/Users/thida/ftp/gradle-project-demo/.gradle/8.12.1/gc.properties/Users/thida/ftp/gradle-project-demo/.gradle/8.12.1/Users/thida/ftp/gradle-project-demo/.gradle/Users/thida/ftp/gradle-project-demo/Users/thida/ftp/Users/thida/Users//Users/thida/ftp/gradle-project-demo/.gradle/buildOutputCleanup/cache.properties/Users/thida/ftp/gradle-project-demo/.gradle/buildOutputCleanupgradle.version8.12.1/Users/thida/ftp/gradle-project-demo/.gradle/configuration-cache/gc.properties/Users/thida/ftp/gradle-project-demo/.gradle/configuration-cache/Users/thida/ftp/gradle-project-demo/.gradle/vcs-1/gc.properties/Users/thida/ftp/gradle-project-demo/.gradle/vcs-1/Users/thida/ftp/gradle-project-demo/.idea/compiler.xml/Users/thida/ftp/gradle-project-demo/.ideaprojectversion4componentnameCompilerConfigurationbytecodeTargetLeveltarget23UTF-8/Users/thida/ftp/gradle-project-demo/.idea/gradle.xmlGradleMigrationSettingsmigrationVersion1GradleSettingsoptionlinkedExternalProjectsSettingsGradleProjectSettingsexternalProjectPathvalue$PROJECT_DIR$gradleJvm#JAVA_HOMEmodulesset$PROJECT_DIR$/app/Users/thida/ftp/gradle-project-demo/.idea/misc.xmlExternalStorageConfigurationManagerenabledtrueFrameworkDetectionExcludesConfigurationfiletypeweburlfile://$PROJECT_DIR$ProjectRootManager2languageLevelJDK_23defaultproject-jdk-nameproject-jdk-typeJavaSDK/Users/thida/ftp/gradle-project-demo/.idea/vcs.xmlVcsDirectoryMappingsmappingdirectoryvcsGit/Users/thida/ftp/gradle-project-demo/.idea/workspace.xmlAutoImportSettingsautoReloadTypeSELECTIVEChangeListManagerlistid162144ae-4e9c-4596-a096-99a38be9c0beChangescommentchangebeforePath$PROJECT_DIR$/app/build.gradlebeforeDirfalseafterPathafterDir$PROJECT_DIR$/app/src/main/java/org/example/App.javaSHOW_DIALOGHIGHLIGHT_CONFLICTSHIGHLIGHT_NON_ACTIVE_CHANGELISTLAST_RESOLUTIONIGNOREExternalProjectsDataprojectStatepathProjectStateGit.SettingsRECENT_GIT_ROOT_PATHGitHubPullRequestSearchHistory{
  "lastFilter": {
    "state": "OPEN",
    "assignee": "Sheetalsk"
  }
}GithubPullRequestsUISettings{
  "selectedUrlAndAccountId": {
    "url": "https://github.com/Sheetalsk/dependabot-gradle-demo.git",
    "accountId": "b1ad1b19-ab15-4804-98f3-f033a18ebef8"
  }
}ProjectColorInfo{
  "associatedIndex": 6
}ProjectId2syvDzbPeTEfOyKH0u6vZxS0qj3ProjectViewStatehideEmptyMiddlePackagesshowLibraryContentsPropertiesComponent{
  "keyToString": {
    "Gradle.gradle-project-demo:app [:app:org.example.App.main()].executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "git-widget-placeholder": "main",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "/Users/thida/ftp/gradle-project-demo",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.15",
    "project.structure.side.proportion": "0.0",
    "vue.rearranger.settings.migration": "true"
  }
}RunManagerconfigurationAppApplicationfactoryNametemporarynameIsGeneratedMAIN_CLASS_NAMEorg.example.Appmoduledependendabot-gradle.app.mainextensioncoveragepatternPATTERNorg.example.*ENABLEDmethodvMakerecent_temporaryitemitemvalueApplication.AppSharedIndexesattachedChunksbundled-jdk-9823dce3aa75-125ca727e0f0-intellij.indexing.shared.core-IU-243.23654.189bundled-js-predefined-d6986cc7102b-822845ee3bb5-JavaScript-IU-243.23654.189SpellCheckerSettingsRuntimeDictionaries0FoldersCustomDictionariesDefaultDictionaryapplication-levelUseSingleDictionarytransferredTaskManagertaskactiveDefaultsummaryDefault taskchangelistcreated1739440514206numberpresentableIdupdatedworkItemfrom1739440515685duration27650001739520031063365000serversTypeScriptGeneratedFilesManager3/Users/thida/ftp/gradle-project-demo/app/src/main/java/org/example/App.java/Users/thida/ftp/gradle-project-demo/app/src/main/java/org/example/Users/thida/ftp/gradle-project-demo/app/src/main/java/org/Users/thida/ftp/gradle-project-demo/app/src/main/java/Users/thida/ftp/gradle-project-demo/app/src/main/Users/thida/ftp/gradle-project-demo/app/src/Users/thida/ftp/gradle-project-demo/apporg.examplevoid"Hello World!"Hello World!String[]lengthpublicfinalcloneclone()argsscanneruserInput"Enter your username:"Enter your username:conn"jdbc:h2:mem:testdb"jdbc:h2:mem:testdb"sa"sa""stmtquery"SELECT * FROM users WHERE username = '"SELECT * FROM users WHERE username = '"'"'rsboolean"Welcome, "Welcome, "username"usernameeThis source file was generated by the Gradle 'init' task TODO: Add a calculation here ðŸš¨ UNSAFE: User input is used directly in SQL query ðŸš¨ VULNERABLE: SQL Injection risk/Users/thida/ftp/gradle-project-demo/app/src/test/java/org/example/AppTest.java/Users/thida/ftp/gradle-project-demo/app/src/test/java/org/example/Users/thida/ftp/gradle-project-demo/app/src/test/java/org/Users/thida/ftp/gradle-project-demo/app/src/test/java/Users/thida/ftp/gradle-project-demo/app/src/testclassUnderTest"app should have a greeting"app should have a greeting/Users/thida/ftp/gradle-project-demo/gradle/wrapper/gradle-wrapper.properties/Users/thida/ftp/gradle-project-demo/gradle/wrapper/Users/thida/ftp/gradle-project-demo/gradledistributionBaseGRADLE_USER_HOMEdistributionPathwrapper/distsdistributionUrlhttps://services.gradle.org/distributions/gradle-8.12.1-bin.zipnetworkTimeout10000validateDistributionUrlzipStoreBasezipStorePath/Users/thida/ftp/gradle-project-demo/gradle.propertiesorg.gradle.configuration-cacheorg.gradle.parallelorg.gradle.cachingjava.ioBufferedReader/modules/java.base/java/io/BufferedReader.class/modules/java.base/java/io/modules/java.base/java/modules/java.base/modulesjava.util.streamStream<>/modules/java.base/java/util/stream/Stream.class/modules/java.base/java/util/stream/modules/java.base/java/utilBaseStream<>/modules/java.base/java/util/stream/BaseStream.classabstractStream<String>BaseStream<String,Stream<String>>lineslines()closeclose()resetreset()intmarkmark(int)markSupportedmarkSupported()readyready()longskipskip(long)readLinereadLine()boolean[]readLine(boolean,boolean[])charchar[]readread(char[],int,int)read()BufferedReader(java.io.Reader)BufferedReader(java.io.Reader,int)BufferedWriter/modules/java.base/java/io/BufferedWriter.classflushflush()newLinenewLine()writewrite(java.lang.String,int,int)write(char[],int,int)write(int)flushBufferflushBuffer()BufferedWriter(java.io.Writer,int)BufferedWriter(java.io.Writer)Closeable/modules/java.base/java/io/Closeable.classConsole/modules/java.base/java/io/Console.classsealed<clinit><clinit>()staticisTerminalisTerminal()charsetcharset()readPasswordreadPassword()Object[]readPassword(java.util.Locale,java.lang.String,java.lang.Object[])readPassword(java.lang.String,java.lang.Object[])readLine(java.util.Locale,java.lang.String,java.lang.Object[])readLine(java.lang.String,java.lang.Object[])printfprintf(java.util.Locale,java.lang.String,java.lang.Object[])printf(java.lang.String,java.lang.Object[])formatformat(java.util.Locale,java.lang.String,java.lang.Object[])format(java.lang.String,java.lang.Object[])readlnreadln(java.lang.String)printprint(java.lang.Object)printlnprintln(java.lang.Object)readerreader()writerwriter()Console()CHARSETDataInput/modules/java.base/java/io/DataInput.classreadUTFreadUTF()doublereadDoublereadDouble()floatreadFloatreadFloat()readLongreadLong()readIntreadInt()readCharreadChar()readUnsignedShortreadUnsignedShort()shortreadShortreadShort()readUnsignedBytereadUnsignedByte()bytereadBytereadByte()readBooleanreadBoolean()skipBytesskipBytes(int)byte[]readFullyreadFully(byte[],int,int)readFully(byte[])DataOutput/modules/java.base/java/io/DataOutput.classwriteUTFwriteUTF(java.lang.String)writeCharswriteChars(java.lang.String)writeByteswriteBytes(java.lang.String)writeDoublewriteDouble(double)writeFloatwriteFloat(float)writeLongwriteLong(long)writeIntwriteInt(int)writeCharwriteChar(int)writeShortwriteShort(int)writeBytewriteByte(int)writeBooleanwriteBoolean(boolean)write(byte[],int,int)write(byte[])File/modules/java.base/java/io/File.classjava.langComparable<File>/modules/java.base/java/lang/Comparable.class/modules/java.base/java/langcompareTocompareTo(java.lang.Object)compareTo(java.io.File)toPathtoPath()toStringtoString()hashCodehashCode()equalsequals(java.lang.Object)createTempFilecreateTempFile(java.lang.String,java.lang.String)createTempFile(java.lang.String,java.lang.String,java.io.File)getUsableSpacegetUsableSpace()getFreeSpacegetFreeSpace()getTotalSpacegetTotalSpace()File[]listRootslistRoots()canExecutecanExecute()setExecutablesetExecutable(boolean)setExecutable(boolean,boolean)setReadablesetReadable(boolean)setReadable(boolean,boolean)setWritablesetWritable(boolean)setWritable(boolean,boolean)setReadOnlysetReadOnly()setLastModifiedsetLastModified(long)renameTorenameTo(java.io.File)mkdirsmkdirs()mkdirmkdir()listFileslistFiles(java.io.FileFilter)listFiles(java.io.FilenameFilter)listFiles()list(java.io.FilenameFilter)list()deleteOnExitdeleteOnExit()deletedelete()createNewFilecreateNewFile()length()lastModifiedlastModified()isHiddenisHidden()isFileisFile()isDirectoryisDirectory()existsexists()canWritecanWrite()canReadcanRead()toURItoURI()toURLtoURL()getCanonicalFilegetCanonicalFile()getCanonicalPathgetCanonicalPath()getAbsoluteFilegetAbsoluteFile()getAbsolutePathgetAbsolutePath()isAbsoluteisAbsolute()getPathgetPath()getParentFilegetParentFile()getParentgetParent()getNamegetName()File(java.net.URI)File(java.io.File,java.lang.String)File(java.lang.String,java.lang.String)File(java.lang.String)getPrefixLengthgetPrefixLength()isInvalidisInvalid()pathSeparatorpathSeparatorCharseparatorseparatorCharFileDescriptor/modules/java.base/java/io/FileDescriptor.classcloseAllcloseAll(java.io.Closeable)synchronizedattachattach(java.io.Closeable)unregisterCleanupunregisterCleanup()jdk.internal.refPhantomCleanable<FileDescriptor>/modules/java.base/jdk/internal/ref/PhantomCleanable.class/modules/java.base/jdk/internal/ref/modules/java.base/jdk/internal/modules/java.base/jdkjava.lang.refPhantomReference<FileDescriptor>/modules/java.base/java/lang/ref/PhantomReference.class/modules/java.base/java/lang/refReference<FileDescriptor>/modules/java.base/java/lang/ref/Reference.classregisterCleanupregisterCleanup(jdk.internal.ref.PhantomCleanable)setHandlesetHandle(long)set(int)syncsync()validvalid()FileDescriptor()erroutinFileFilter/modules/java.base/java/io/FileFilter.classacceptaccept(java.io.File)FileNotFoundException/modules/java.base/java/io/FileNotFoundException.classFileNotFoundException(java.lang.String)FileNotFoundException()FilenameFilter/modules/java.base/java/io/FilenameFilter.classaccept(java.io.File,java.lang.String)FilterOutputStream/modules/java.base/java/io/FilterOutputStream.classFilterOutputStream(java.io.OutputStream)protectedFlushable/modules/java.base/java/io/Flushable.classIOException/modules/java.base/java/io/IOException.classIOException(java.lang.Throwable)IOException(java.lang.String,java.lang.Throwable)IOException(java.lang.String)IOException()serialVersionUIDInputStream/modules/java.base/java/io/InputStream.classtransferTotransferTo(java.io.OutputStream)availableavailable()skipNBytesskipNBytes(long)readNBytesreadNBytes(byte[],int,int)readNBytes(int)readAllBytesreadAllBytes()read(byte[],int,int)read(byte[])nullInputStreamnullInputStream()InputStream()InvalidClassException/modules/java.base/java/io/InvalidClassException.classgetMessagegetMessage()InvalidClassException(java.lang.String,java.lang.String,java.lang.Throwable)InvalidClassException(java.lang.String,java.lang.Throwable)InvalidClassException(java.lang.String,java.lang.String)InvalidClassException(java.lang.String)classnameInvalidObjectException/modules/java.base/java/io/InvalidObjectException.classInvalidObjectException(java.lang.String,java.lang.Throwable)InvalidObjectException(java.lang.String)NotActiveException/modules/java.base/java/io/NotActiveException.classNotActiveException()NotActiveException(java.lang.String)ObjectInput/modules/java.base/java/io/ObjectInput.classreadObjectreadObject()FilterInfo/modules/java.base/java/io/ObjectInputFilter$FilterInfo.classstreamBytesstreamBytes()referencesreferences()depthdepth()arrayLengtharrayLength()Class<>/modules/java.base/java/lang/Class.classjava.lang.invokeOfField<>/modules/java.base/java/lang/invoke/TypeDescriptor$OfField.class/modules/java.base/java/lang/invoke?Class<?>OfField<Class<?>>serialClassserialClass()Status/modules/java.base/java/io/ObjectInputFilter$Status.classEnum<Status>/modules/java.base/java/lang/Enum.classComparable<Status>compareTo(java.io.ObjectInputFilter.Status)finalizefinalize()Enum<>Comparable<>TEnum<T>Comparable<T>valueOfvalueOf(java.lang.Class,java.lang.String)Class<T>java.utilOptional<>/modules/java.base/java/util/Optional.classEnumDesc<E>/modules/java.base/java/lang/Enum$EnumDesc.classjava.lang.constantDynamicConstantDesc<E>/modules/java.base/java/lang/constant/DynamicConstantDesc.class/modules/java.base/java/lang/constantOptional<EnumDesc<E>>describeConstabledescribeConstable()EnumDesc<Status>DynamicConstantDesc<Status>Optional<EnumDesc<Status>>Class<E>getDeclaringClassgetDeclaringClass()Class<Status>compareTo(java.lang.Enum)EnumEnum(java.lang.String,int)Enum<Status>(java.lang.String,int)ordinalordinal()name()valueOf(java.lang.String)Status[]valuesvalues()REJECTEDALLOWEDUNDECIDEDObjectInputFilter/modules/java.base/java/io/ObjectInputFilter.classrejectUndecidedClassrejectUndecidedClass(java.io.ObjectInputFilter)mergemerge(java.io.ObjectInputFilter,java.io.ObjectInputFilter)java.util.functionPredicate<Class<?>>/modules/java.base/java/util/function/Predicate.class/modules/java.base/java/util/functionrejectFilterrejectFilter(java.util.function.Predicate,java.io.ObjectInputFilter.Status)allowFilterallowFilter(java.util.function.Predicate,java.io.ObjectInputFilter.Status)checkInputcheckInput(java.io.ObjectInputFilter.FilterInfo)GetField/modules/java.base/java/io/ObjectInputStream$GetField.classgetget(java.lang.String,java.lang.Object)get(java.lang.String,double)get(java.lang.String,float)get(java.lang.String,long)get(java.lang.String,int)get(java.lang.String,short)get(java.lang.String,char)get(java.lang.String,byte)get(java.lang.String,boolean)defaulteddefaulted(java.lang.String)getObjectStreamClassgetObjectStreamClass()GetField()ObjectInputStream/modules/java.base/java/io/ObjectInputStream.classreadTypeStringreadTypeString()setObjectInputFiltersetObjectInputFilter(java.io.ObjectInputFilter)getObjectInputFiltergetObjectInputFilter()readClassDescriptorreadClassDescriptor()readStreamHeaderreadStreamHeader()enableResolveObjectenableResolveObject(boolean)resolveObjectresolveObject(java.lang.Object)resolveProxyClassresolveProxyClass(java.lang.String[])resolveClassresolveClass(java.io.ObjectStreamClass)registerValidationregisterValidation(java.io.ObjectInputValidation,int)readFieldsreadFields()defaultReadObjectdefaultReadObject()readUnsharedreadUnshared()readObjectOverridereadObjectOverride()ObjectInputStream()ObjectInputStream(java.io.InputStream)ObjectInputValidation/modules/java.base/java/io/ObjectInputValidation.classvalidateObjectvalidateObject()ObjectOutput/modules/java.base/java/io/ObjectOutput.classwriteObjectwriteObject(java.lang.Object)PutField/modules/java.base/java/io/ObjectOutputStream$PutField.classwrite(java.io.ObjectOutput)/modules/java.base/java/io/ObjectOutputStream.class"1.4"1.4putput(java.lang.String,java.lang.Object)put(java.lang.String,double)put(java.lang.String,float)put(java.lang.String,long)put(java.lang.String,int)put(java.lang.String,short)put(java.lang.String,char)put(java.lang.String,byte)put(java.lang.String,boolean)PutField()ObjectOutputStreamwriteTypeStringwriteTypeString(java.lang.String)getProtocolVersiongetProtocolVersion()draindrain()writeClassDescriptorwriteClassDescriptor(java.io.ObjectStreamClass)writeStreamHeaderwriteStreamHeader()enableReplaceObjectenableReplaceObject(boolean)replaceObjectreplaceObject(java.lang.Object)annotateProxyClassannotateProxyClass(java.lang.Class)annotateClassannotateClass(java.lang.Class)writeFieldswriteFields()putFieldsputFields()defaultWriteObjectdefaultWriteObject()writeUnsharedwriteUnshared(java.lang.Object)writeObjectOverridewriteObjectOverride(java.lang.Object)useProtocolVersionuseProtocolVersion(int)ObjectOutputStream()ObjectOutputStream(java.io.OutputStream)ClassDataSlot/modules/java.base/java/io/ObjectStreamClass$ClassDataSlot.classClassDataSlot(java.io.ObjectStreamClass,boolean)hasDatadescObjectStreamClass/modules/java.base/java/io/ObjectStreamClass.classgetRecordConstructorgetRecordConstructor()setObjFieldValuessetObjFieldValues(java.lang.Object,java.lang.Object[])checkObjFieldValueTypescheckObjFieldValueTypes(java.lang.Object,java.lang.Object[])getObjFieldValuesgetObjFieldValues(java.lang.Object,java.lang.Object[])setPrimFieldValuessetPrimFieldValues(java.lang.Object,byte[])getPrimFieldValuesgetPrimFieldValues(java.lang.Object,byte[])getNumObjFieldsgetNumObjFields()getPrimDataSizegetPrimDataSize()ClassDataSlot[]getClassDataLayoutgetClassDataLayout()invokeReadResolveinvokeReadResolve(java.lang.Object)invokeWriteReplaceinvokeWriteReplace(java.lang.Object)invokeReadObjectNoDatainvokeReadObjectNoData(java.lang.Object)invokeReadObjectinvokeReadObject(java.lang.Object,java.io.ObjectInputStream)invokeWriteObjectinvokeWriteObject(java.lang.Object,java.io.ObjectOutputStream)newInstancenewInstance()hasReadResolveMethodhasReadResolveMethod()hasWriteReplaceMethodhasWriteReplaceMethod()hasReadObjectNoDataMethodhasReadObjectNoDataMethod()hasReadObjectMethodhasReadObjectMethod()hasWriteObjectMethodhasWriteObjectMethod()isInstantiableisInstantiable()hasWriteObjectDatahasWriteObjectData()hasBlockExternalDatahasBlockExternalData()isSerializableisSerializable()isExternalizableisExternalizable()isRecordisRecord()isEnumisEnum()isProxyisProxy()getFieldgetField(java.lang.String,java.lang.Class)ObjectStreamField[]getFieldsgetFields(boolean)getLocalDescgetLocalDesc()getSuperDescgetSuperDesc()checkDefaultSerializecheckDefaultSerialize()checkSerializecheckSerialize()checkDeserializecheckDeserialize()checkInitializedcheckInitialized()getResolveExceptiongetResolveException()writeNonProxywriteNonProxy(java.io.ObjectOutputStream)readNonProxyreadNonProxy(java.io.ObjectInputStream)initNonProxyinitNonProxy(java.io.ObjectStreamClass,java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)initProxyinitProxy(java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)ObjectStreamClass()lookuplookup(java.lang.Class,boolean)getField(java.lang.String)getFields()forClassforClass()getSerialVersionUIDgetSerialVersionUID()lookupAnylookupAny(java.lang.Class)lookup(java.lang.Class)NO_FIELDSObjectStreamConstants/modules/java.base/java/io/ObjectStreamConstants.classPROTOCOL_VERSION_2PROTOCOL_VERSION_1SERIAL_FILTER_PERMISSIONSUBCLASS_IMPLEMENTATION_PERMISSIONSUBSTITUTION_PERMISSIONSC_ENUMSC_EXTERNALIZABLESC_SERIALIZABLESC_BLOCK_DATASC_WRITE_METHODbaseWireHandleTC_MAXTC_ENUMTC_PROXYCLASSDESCTC_LONGSTRINGTC_EXCEPTIONTC_BLOCKDATALONGTC_RESETTC_ENDBLOCKDATATC_BLOCKDATATC_CLASSTC_ARRAYTC_STRINGTC_OBJECTTC_CLASSDESCTC_REFERENCETC_NULLTC_BASESTREAM_VERSIONSTREAM_MAGICObjectStreamException/modules/java.base/java/io/ObjectStreamException.classObjectStreamException(java.lang.Throwable)ObjectStreamException()ObjectStreamException(java.lang.String,java.lang.Throwable)ObjectStreamException(java.lang.String)ObjectStreamField/modules/java.base/java/io/ObjectStreamField.classComparable<Object>getSignaturegetSignature()getField()isUnsharedisUnshared()isPrimitiveisPrimitive()setOffsetsetOffset(int)getOffsetgetOffset()getTypeStringgetTypeString()getTypeCodegetTypeCode()getTypegetType()ObjectStreamField(java.lang.reflect.Field,boolean,boolean)ObjectStreamField(java.lang.String,java.lang.String,boolean)ObjectStreamField(java.lang.String,java.lang.Class,boolean)ObjectStreamField(java.lang.String,java.lang.Class)OptionalDataException/modules/java.base/java/io/OptionalDataException.classOptionalDataException(boolean)OptionalDataException(int)eofOutputStream/modules/java.base/java/io/OutputStream.classnullOutputStreamnullOutputStream()OutputStream()PrintStream/modules/java.base/java/io/PrintStream.classappendappend(char)append(java.lang.CharSequence,int,int)append(java.lang.CharSequence)println(java.lang.String)println(char[])println(double)println(float)println(long)println(int)println(char)println(boolean)println()print(java.lang.String)print(char[])print(double)print(float)print(long)print(int)print(char)print(boolean)writeBytes(byte[])clearErrorclearError()setErrorsetError()checkErrorcheckError()PrintStream(java.io.File,java.nio.charset.Charset)PrintStream(java.io.File,java.lang.String)PrintStream(java.io.File)PrintStream(java.lang.String,java.nio.charset.Charset)PrintStream(java.lang.String,java.lang.String)PrintStream(java.lang.String)PrintStream(java.io.OutputStream,boolean,java.nio.charset.Charset)PrintStream(java.io.OutputStream,boolean,java.lang.String)PrintStream(java.io.OutputStream,boolean)PrintStream(java.io.OutputStream)PrintWriter/modules/java.base/java/io/PrintWriter.classwrite(java.lang.String)write(char[])PrintWriter(java.io.File,java.nio.charset.Charset)PrintWriter(java.io.File,java.lang.String)PrintWriter(java.io.File)PrintWriter(java.lang.String,java.nio.charset.Charset)PrintWriter(java.lang.String,java.lang.String)PrintWriter(java.io.Writer,java.lang.Object)PrintWriter(java.lang.String)PrintWriter(java.io.OutputStream,boolean,java.nio.charset.Charset)PrintWriter(java.io.OutputStream,boolean)PrintWriter(java.io.OutputStream)PrintWriter(java.io.Writer,boolean)PrintWriter(java.io.Writer)ProxyingConsole/modules/java.base/java/io/ProxyingConsole.classProxyingConsole(jdk.internal.io.JdkConsole)Reader/modules/java.base/java/io/Reader.classtransferTo(java.io.Writer)read(char[])read(java.nio.CharBuffer)Reader(java.io.Reader)Reader(java.lang.Object)Reader()nullReadernullReader()lockSerializable/modules/java.base/java/io/Serializable.classSerializablePermission/modules/java.base/java/io/SerializablePermission.classSerializablePermission(java.lang.String,java.lang.String)SerializablePermission(java.lang.String)StreamCorruptedException/modules/java.base/java/io/StreamCorruptedException.classStreamCorruptedException()StreamCorruptedException(java.lang.String)SyncFailedException/modules/java.base/java/io/SyncFailedException.classSyncFailedException(java.lang.String)UnsupportedEncodingException/modules/java.base/java/io/UnsupportedEncodingException.classUnsupportedEncodingException(java.lang.String)UnsupportedEncodingException()Writer/modules/java.base/java/io/Writer.classWriter(java.lang.Object)Writer(java.io.Writer)Writer()nullWriternullWriter()AbstractStringBuilder/modules/java.base/java/lang/AbstractStringBuilder.classrepeatrepeat(java.lang.CharSequence,int)repeat(int,int)prependprepend(long,byte[])mixmix(long)isLatin1isLatin1()getCodergetCoder()initBytesinitBytes(char[],int,int)getBytesgetBytes(byte[],int,byte)getValuegetValue()codePointscodePoints()charschars()reversereverse()lastIndexOflastIndexOf(java.lang.String,int)lastIndexOf(java.lang.String)indexOfindexOf(java.lang.String,int)indexOf(java.lang.String)insertinsert(int,double)insert(int,float)insert(int,long)insert(int,int)insert(int,char)insert(int,boolean)insert(int,java.lang.CharSequence,int,int)insert(int,java.lang.CharSequence)insert(int,char[])insert(int,java.lang.String)insert(int,java.lang.Object)insert(int,char[],int,int)substringsubstring(int,int)subSequencesubSequence(int,int)substring(int)replacereplace(int,int,java.lang.String)deleteCharAtdeleteCharAt(int)appendCodePointappendCodePoint(int)delete(int,int)append(double)append(float)append(long)append(int)append(boolean)append(char[],int,int)append(char[])append(java.lang.AbstractStringBuilder)append(java.lang.StringBuffer)append(java.lang.String)append(java.lang.Object)setCharAtsetCharAt(int,char)getCharsgetChars(int,int,char[],int)offsetByCodePointsoffsetByCodePoints(int,int)codePointCountcodePointCount(int,int)codePointBeforecodePointBefore(int)codePointAtcodePointAt(int)charAtcharAt(int)setLengthsetLength(int)trimToSizetrimToSize()ensureCapacityensureCapacity(int)capacitycapacity()compareTo(java.lang.AbstractStringBuilder)AbstractStringBuilder(java.lang.CharSequence)AbstractStringBuilder(java.lang.String)AbstractStringBuilder(int)AbstractStringBuilder()countmaybeLatin1coderAppendable/modules/java.base/java/lang/Appendable.classAssertionError/modules/java.base/java/lang/AssertionError.classAssertionError(java.lang.String,java.lang.Throwable)AssertionError(double)AssertionError(float)AssertionError(long)AssertionError(int)AssertionError(char)AssertionError(boolean)AssertionError(java.lang.Object)AssertionError()AutoCloseable/modules/java.base/java/lang/AutoCloseable.classBoolean/modules/java.base/java/lang/Boolean.classComparable<Boolean>compareTo(java.lang.Boolean)DynamicConstantDesc<Boolean>Optional<DynamicConstantDesc<Boolean>>logicalXorlogicalXor(boolean,boolean)logicalOrlogicalOr(boolean,boolean)logicalAndlogicalAnd(boolean,boolean)comparecompare(boolean,boolean)getBooleangetBoolean(java.lang.String)hashCode(boolean)toString(boolean)valueOf(boolean)booleanValuebooleanValue()parseBooleanparseBoolean(java.lang.String)Boolean(java.lang.String)"9"9Boolean(boolean)Class<Boolean>TYPEFALSETRUECharSequence/modules/java.base/java/lang/CharSequence.classcompare(java.lang.CharSequence,java.lang.CharSequence)isEmptyisEmpty()Character/modules/java.base/java/lang/Character.classComparable<Character>compareTo(java.lang.Character)codePointOfcodePointOf(java.lang.String)getName(int)reverseBytesreverseBytes(char)toUpperCaseCharArraytoUpperCaseCharArray(int)toUpperCaseExtoUpperCaseEx(int)compare(char,char)isMirroredisMirrored(int)isMirrored(char)getDirectionalitygetDirectionality(int)getDirectionality(char)forDigitforDigit(int,int)getType(int)getType(char)isISOControlisISOControl(int)isISOControl(char)isWhitespaceisWhitespace(int)isWhitespace(char)isSpaceCharisSpaceChar(int)isSpaceChar(char)isSpaceisSpace(char)"1.1"1.1getNumericValuegetNumericValue(int)getNumericValue(char)digitdigit(int,int)digit(char,int)toTitleCasetoTitleCase(int)toTitleCase(char)toUpperCasetoUpperCase(int)toUpperCase(char)toLowerCasetoLowerCase(int)toLowerCase(char)isExtendedPictographicisExtendedPictographic(int)isEmojiComponentisEmojiComponent(int)isEmojiModifierBaseisEmojiModifierBase(int)isEmojiModifierisEmojiModifier(int)isEmojiPresentationisEmojiPresentation(int)isEmojiisEmoji(int)isIdentifierIgnorableisIdentifierIgnorable(int)isIdentifierIgnorable(char)isUnicodeIdentifierPartisUnicodeIdentifierPart(int)isUnicodeIdentifierPart(char)isUnicodeIdentifierStartisUnicodeIdentifierStart(int)isUnicodeIdentifierStart(char)isJavaIdentifierPartisJavaIdentifierPart(int)isJavaIdentifierPart(char)isJavaIdentifierStartisJavaIdentifierStart(int)isJavaIdentifierStart(char)isIdeographicisIdeographic(int)isAlphabeticisAlphabetic(int)isJavaLetterOrDigitisJavaLetterOrDigit(char)isJavaLetterisJavaLetter(char)isLetterOrDigitisLetterOrDigit(int)isLetterOrDigit(char)isLetterisLetter(int)isLetter(char)isDefinedisDefined(int)isDefined(char)isDigitisDigit(int)isDigit(char)isTitleCaseisTitleCase(int)isTitleCase(char)isUpperCaseisUpperCase(int)isUpperCase(char)isLowerCaseisLowerCase(int)isLowerCase(char)offsetByCodePointsImploffsetByCodePointsImpl(char[],int,int,int,int)offsetByCodePoints(char[],int,int,int,int)offsetByCodePoints(java.lang.CharSequence,int,int)codePointCountImplcodePointCountImpl(char[],int,int)codePointCount(char[],int,int)codePointCount(java.lang.CharSequence,int,int)toSurrogatestoSurrogates(int,char[],int)toCharstoChars(int)toChars(int,char[],int)lowSurrogatelowSurrogate(int)highSurrogatehighSurrogate(int)codePointBeforeImplcodePointBeforeImpl(char[],int,int)codePointBefore(char[],int,int)codePointBefore(char[],int)codePointBefore(java.lang.CharSequence,int)codePointAtImplcodePointAtImpl(char[],int,int)codePointAt(char[],int,int)codePointAt(char[],int)codePointAt(java.lang.CharSequence,int)toCodePointtoCodePoint(char,char)charCountcharCount(int)isSurrogatePairisSurrogatePair(char,char)isSurrogateisSurrogate(char)isLowSurrogateisLowSurrogate(char)isHighSurrogateisHighSurrogate(char)isSupplementaryCodePointisSupplementaryCodePoint(int)isBmpCodePointisBmpCodePoint(int)isValidCodePointisValidCodePoint(int)toString(int)toString(char)hashCode(char)charValuecharValue()valueOf(char)Character(char)DynamicConstantDesc<Character>Optional<DynamicConstantDesc<Character>>BYTESSIZEMAX_CODE_POINTMIN_CODE_POINTMIN_SUPPLEMENTARY_CODE_POINTMAX_SURROGATEMIN_SURROGATEMAX_LOW_SURROGATEMIN_LOW_SURROGATEMAX_HIGH_SURROGATEMIN_HIGH_SURROGATEDIRECTIONALITY_POP_DIRECTIONAL_ISOLATEDIRECTIONALITY_FIRST_STRONG_ISOLATEDIRECTIONALITY_RIGHT_TO_LEFT_ISOLATEDIRECTIONALITY_LEFT_TO_RIGHT_ISOLATEDIRECTIONALITY_POP_DIRECTIONAL_FORMATDIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEDIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGDIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEDIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGDIRECTIONALITY_OTHER_NEUTRALSDIRECTIONALITY_WHITESPACEDIRECTIONALITY_SEGMENT_SEPARATORDIRECTIONALITY_PARAGRAPH_SEPARATORDIRECTIONALITY_BOUNDARY_NEUTRALDIRECTIONALITY_NONSPACING_MARKDIRECTIONALITY_COMMON_NUMBER_SEPARATORDIRECTIONALITY_ARABIC_NUMBERDIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORDIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORDIRECTIONALITY_EUROPEAN_NUMBERDIRECTIONALITY_RIGHT_TO_LEFT_ARABICDIRECTIONALITY_RIGHT_TO_LEFTDIRECTIONALITY_LEFT_TO_RIGHTDIRECTIONALITY_UNDEFINEDERRORFINAL_QUOTE_PUNCTUATIONINITIAL_QUOTE_PUNCTUATIONOTHER_SYMBOLMODIFIER_SYMBOLCURRENCY_SYMBOLMATH_SYMBOLOTHER_PUNCTUATIONCONNECTOR_PUNCTUATIONEND_PUNCTUATIONSTART_PUNCTUATIONDASH_PUNCTUATIONSURROGATEPRIVATE_USEFORMATCONTROLPARAGRAPH_SEPARATORLINE_SEPARATORSPACE_SEPARATOROTHER_NUMBERLETTER_NUMBERDECIMAL_DIGIT_NUMBERCOMBINING_SPACING_MARKENCLOSING_MARKNON_SPACING_MARKOTHER_LETTERMODIFIER_LETTERTITLECASE_LETTERLOWERCASE_LETTERUPPERCASE_LETTERUNASSIGNEDClass<Character>MAX_VALUEMIN_VALUEMAX_RADIXMIN_RADIXClassarrayTypearrayType()componentTypecomponentType()isArrayisArray()isSealedisSealed()Class[]Class<>[]Class<?>[]getPermittedSubclassesgetPermittedSubclasses()nativeOptional<ClassDesc>descriptorStringdescriptorString()getNestMembersgetNestMembers()isNestmateOfisNestmateOf(java.lang.Class)getNestHostgetNestHost()AnnotatedType[]getAnnotatedInterfacesgetAnnotatedInterfaces()getAnnotatedSuperclassgetAnnotatedSuperclass()Map<>/modules/java.base/java/util/Map.class? extends AnnotationClass<? extends Annotation>Map<Class<? extends Annotation>,Annotation>getDeclaredAnnotationMapgetDeclaredAnnotationMap()getAnnotationTypegetAnnotationType()casAnnotationTypecasAnnotationType(sun.reflect.annotation.AnnotationType,sun.reflect.annotation.AnnotationType)Annotation[]getDeclaredAnnotationsgetDeclaredAnnotations()AA[]getDeclaredAnnotationsByTypegetDeclaredAnnotationsByType(java.lang.Class)Class<A>getDeclaredAnnotationgetDeclaredAnnotation(java.lang.Class)getAnnotationsgetAnnotations()getAnnotationsByTypegetAnnotationsByType(java.lang.Class)isAnnotationPresentisAnnotationPresent(java.lang.Class)getAnnotationgetAnnotation(java.lang.Class)U? extends UClass<? extends U>asSubclassasSubclass(java.lang.Class)Class<U>castcast(java.lang.Object)Map<String,T>enumConstantDirectoryenumConstantDirectory()T[]getEnumConstantsSharedgetEnumConstantsShared()getEnumConstantsgetEnumConstants()desiredAssertionStatusdesiredAssertionStatus()getConstantPoolgetConstantPool()getExecutableTypeAnnotationBytesgetExecutableTypeAnnotationBytes(java.lang.reflect.Executable)getRawTypeAnnotationsgetRawTypeAnnotations()getRawAnnotationsgetRawAnnotations()getPrimitiveClassgetPrimitiveClass(java.lang.String)protectionDomainprotectionDomain()getProtectionDomaingetProtectionDomain()getResourcegetResource(java.lang.String)getResourceAsStreamgetResourceAsStream(java.lang.String)java.lang.reflectConstructor<>/modules/java.base/java/lang/reflect/Constructor.class/modules/java.base/java/lang/reflectConstructor<T>getDeclaredConstructorgetDeclaredConstructor(java.lang.Class[])findMethodfindMethod(boolean,java.lang.String,java.lang.Class[])List<>/modules/java.base/java/util/List.classSequencedCollection<>/modules/java.base/java/util/SequencedCollection.classCollection<>/modules/java.base/java/util/Collection.classIterable<>/modules/java.base/java/lang/Iterable.classList<Method>SequencedCollection<Method>Collection<Method>Iterable<Method>getDeclaredPublicMethodsgetDeclaredPublicMethods(java.lang.String,java.lang.Class[])getDeclaredMethodgetDeclaredMethod(java.lang.String,java.lang.Class[])getDeclaredFieldgetDeclaredField(java.lang.String)Constructor[]Constructor<>[]Constructor<?>Constructor<?>[]getDeclaredConstructorsgetDeclaredConstructors()Method[]getDeclaredMethodsgetDeclaredMethods()RecordComponent[]getRecordComponentsgetRecordComponents()Field[]getDeclaredFieldsgetDeclaredFields()getDeclaredClassesgetDeclaredClasses()getConstructorgetConstructor(java.lang.Class[])getMethodgetMethod(java.lang.String,java.lang.Class[])getConstructorsgetConstructors()getMethodsgetMethods()getClassesgetClasses()isMemberClassisMemberClass()isLocalClassisLocalClass()isAnonymousClassisAnonymousClass()getCanonicalNamegetCanonicalName()getTypeNamegetTypeName()getSimpleNamegetSimpleName()getEnclosingClassgetEnclosingClass()getEnclosingConstructorgetEnclosingConstructor()getEnclosingMethodgetEnclosingMethod()setSignerssetSigners(java.lang.Object[])getSignersgetSigners()Set<>/modules/java.base/java/util/Set.classSet<AccessFlag>Collection<AccessFlag>Iterable<AccessFlag>accessFlagsaccessFlags()getModifiersgetModifiers()getComponentTypegetComponentType()Type[]getGenericInterfacesgetGenericInterfaces()getInterfacesgetInterfaces()getPackageNamegetPackageName()getPackagegetPackage()getGenericSuperclassgetGenericSuperclass()? super TClass<? super T>getSuperclassgetSuperclass()TypeVariable[]TypeVariable<>/modules/java.base/java/lang/reflect/TypeVariable.classTypeVariable<>[]TypeVariable<Class>TypeVariable<Class>[]getTypeParametersgetTypeParameters()getClassDatagetClassData()getModulegetModule()getClassLoader0getClassLoader0()getClassLoadergetClassLoader()isSyntheticisSynthetic()isAnnotationisAnnotation()isInterfaceisInterface()isAssignableFromisAssignableFrom(java.lang.Class)isInstanceisInstance(java.lang.Object)forPrimitiveNameforPrimitiveName(java.lang.String)forNameforName(java.lang.Module,java.lang.String)forName(java.lang.String,boolean,java.lang.ClassLoader)forName(java.lang.String)TypeVariable<?>typeVarBoundstypeVarBounds(java.lang.reflect.TypeVariable)toGenericStringtoGenericString()classValueMaptransientClassFormatError/modules/java.base/java/lang/ClassFormatError.classClassFormatError(java.lang.String)ClassFormatError()ClassFrameInfo/modules/java.base/java/lang/ClassFrameInfo.classensureRetainClassRefEnabledensureRetainClassRefEnabled()retainClassRefretainClassRef()toStackTraceElementtoStackTraceElement()isNativeMethodisNativeMethod()getLineNumbergetLineNumber()getFileNamegetFileName()getByteCodeIndexgetByteCodeIndex()getMethodNamegetMethodName()getClassNamegetClassName()isCallerSensitiveisCallerSensitive()declaringClassdeclaringClass()ClassFrameInfo(java.lang.StackWalker)flagsclassOrMemberNameJLIAClassLoader/modules/java.base/java/lang/ClassLoader.classjava.util.concurrentConcurrentHashMap<>/modules/java.base/java/util/concurrent/ConcurrentHashMap.class/modules/java.base/java/util/concurrentAbstractMap<>/modules/java.base/java/util/AbstractMap.classConcurrentMap<>/modules/java.base/java/util/concurrent/ConcurrentMap.classConcurrentHashMap<?,?>AbstractMap<?,?>Map<?,?>ConcurrentMap<?,?>createOrGetClassLoaderValueMapcreateOrGetClassLoaderValueMap()desiredAssertionStatus(java.lang.String)clearAssertionStatusclearAssertionStatus()setClassAssertionStatussetClassAssertionStatus(java.lang.String,boolean)setPackageAssertionStatussetPackageAssertionStatus(java.lang.String,boolean)setDefaultAssertionStatussetDefaultAssertionStatus(boolean)findNativefindNative(java.lang.ClassLoader,java.lang.String)loadLibraryloadLibrary(java.lang.Class,java.lang.String)loadLibrary(java.lang.Class,java.io.File)findLibraryfindLibrary(java.lang.String)Stream<Package>BaseStream<Package,Stream<Package>>packagespackages()Package[]getPackagesgetPackages()getPackage(java.lang.String)getDefinedPackagesgetDefinedPackages()getDefinedPackagegetDefinedPackage(java.lang.String)definePackagedefinePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)definePackage(java.lang.String,java.lang.Module)definePackage(java.lang.Class)checkClassLoaderPermissioncheckClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)getClassLoader(java.lang.Class)isAncestorisAncestor(java.lang.ClassLoader)initSystemClassLoaderinitSystemClassLoader()getBuiltinAppClassLoadergetBuiltinAppClassLoader()getBuiltinPlatformClassLoadergetBuiltinPlatformClassLoader()getSystemClassLoadergetSystemClassLoader()getPlatformClassLoadergetPlatformClassLoader()getUnnamedModulegetUnnamedModule()getSystemResourceAsStreamgetSystemResourceAsStream(java.lang.String)Enumeration<>/modules/java.base/java/util/Enumeration.classEnumeration<URL>getSystemResourcesgetSystemResources(java.lang.String)getSystemResourcegetSystemResource(java.lang.String)isRegisteredAsParallelCapableisRegisteredAsParallelCapable()registerAsParallelCapableregisterAsParallelCapable()findResourcesfindResources(java.lang.String)findResourcefindResource(java.lang.String)Stream<URL>BaseStream<URL,Stream<URL>>resourcesresources(java.lang.String)getResourcesgetResources(java.lang.String)findResource(java.lang.String,java.lang.String)setSigners(java.lang.Class,java.lang.Object[])findLoadedClassfindLoadedClass(java.lang.String)findBootstrapClassOrNullfindBootstrapClassOrNull(java.lang.String)findSystemClassfindSystemClass(java.lang.String)resolveClass(java.lang.Class)defineClass0defineClass0(java.lang.ClassLoader,java.lang.Class,java.lang.String,byte[],int,int,java.security.ProtectionDomain,boolean,int,java.lang.Object)defineClass2defineClass2(java.lang.ClassLoader,java.lang.String,java.nio.ByteBuffer,int,int,java.security.ProtectionDomain,java.lang.String)defineClass1defineClass1(java.lang.ClassLoader,java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.String)defineClassdefineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)defineClass(java.lang.String,byte[],int,int)defineClass(byte[],int,int)findClassfindClass(java.lang.String,java.lang.String)findClass(java.lang.String)getClassLoadingLockgetClassLoadingLock(java.lang.String)loadClassloadClass(java.lang.Module,java.lang.String)loadClass(java.lang.String,boolean)loadClass(java.lang.String)ClassLoader()ClassLoader(java.lang.ClassLoader)ClassLoader(java.lang.String,java.lang.ClassLoader)nameAndIdnameAndId()addClassaddClass(java.lang.Class)Map<String,Boolean>classAssertionStatusassertionLockClassNotFoundException/modules/java.base/java/lang/ClassNotFoundException.classgetExceptiongetException()ClassNotFoundException(java.lang.String,java.lang.Throwable)ClassNotFoundException(java.lang.String)ClassNotFoundException()ClassValueMap/modules/java.base/java/lang/ClassValue$ClassValueMap.classEntry<?>/modules/java.base/java/lang/ClassValue$Entry.classVersion<?>/modules/java.base/java/lang/ClassValue$Version.classWeakReference<Version<?>>/modules/java.base/java/lang/ref/WeakReference.classReference<Version<?>>WeakHashMap<Identity,Entry<?>>/modules/java.base/java/util/WeakHashMap.classAbstractMap<Identity,Entry<?>>Map<Identity,Entry<?>>KVMap<K,V>copyOfcopyOf(java.util.Map)? extends K? extends VMap<? extends K,? extends V>Entry<>/modules/java.base/java/util/Map$Entry.classEntry<K,V>entryentry(java.lang.Object,java.lang.Object)Entry[]Entry<>[]ofEntriesofEntries(java.util.Map.Entry[])Entry<? extends K,? extends V>Entry<? extends K,? extends V>[]ofof(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object)of()? super VBiFunction<? super V,? super V,? extends V>/modules/java.base/java/util/function/BiFunction.classmerge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)? super Entry<?>? extends Entry<?>BiFunction<? super Entry<?>,? super Entry<?>,? extends Entry<?>>WeakReference<>Reference<>merge(java.lang.ClassValue.Identity,java.lang.ClassValue.Entry,java.util.function.BiFunction)? super KBiFunction<? super K,? super V,? extends V>computecompute(java.lang.Object,java.util.function.BiFunction)? super IdentityBiFunction<? super Identity,? super Entry<?>,? extends Entry<?>>compute(java.lang.ClassValue.Identity,java.util.function.BiFunction)computeIfPresentcomputeIfPresent(java.lang.Object,java.util.function.BiFunction)computeIfPresent(java.lang.ClassValue.Identity,java.util.function.BiFunction)Function<? super K,? extends V>/modules/java.base/java/util/function/Function.classcomputeIfAbsentcomputeIfAbsent(java.lang.Object,java.util.function.Function)Function<? super Identity,? extends Entry<?>>computeIfAbsent(java.lang.ClassValue.Identity,java.util.function.Function)replace(java.lang.Object,java.lang.Object)replace(java.lang.ClassValue.Identity,java.lang.ClassValue.Entry)replace(java.lang.Object,java.lang.Object,java.lang.Object)replace(java.lang.ClassValue.Identity,java.lang.ClassValue.Entry,java.lang.ClassValue.Entry)removeremove(java.lang.Object,java.lang.Object)putIfAbsentputIfAbsent(java.lang.Object,java.lang.Object)putIfAbsent(java.lang.ClassValue.Identity,java.lang.ClassValue.Entry)replaceAllreplaceAll(java.util.function.BiFunction)BiConsumer<? super K,? super V>/modules/java.base/java/util/function/BiConsumer.classforEachforEach(java.util.function.BiConsumer)BiConsumer<? super Identity,? super Entry<?>>getOrDefaultgetOrDefault(java.lang.Object,java.lang.Object)getOrDefault(java.lang.Object,java.lang.ClassValue.Entry)Set<Entry<K,V>>Collection<Entry<K,V>>Iterable<Entry<K,V>>entrySetentrySet()Entry<Identity,Entry<?>>Set<Entry<Identity,Entry<?>>>Collection<Entry<Identity,Entry<?>>>Iterable<Entry<Identity,Entry<?>>>Collection<V>Iterable<V>Collection<Entry<?>>Iterable<Entry<?>>Set<K>Collection<K>Iterable<K>keySetkeySet()Set<Identity>Collection<Identity>Iterable<Identity>clearclear()putAllputAll(java.util.Map)? extends IdentityMap<? extends Identity,? extends Entry<?>>remove(java.lang.Object)put(java.lang.Object,java.lang.Object)put(java.lang.ClassValue.Identity,java.lang.ClassValue.Entry)get(java.lang.Object)containsValuecontainsValue(java.lang.Object)containsKeycontainsKey(java.lang.Object)sizesize()AbstractMapAbstractMap()AbstractMap<Identity,Entry<?>>()WeakHashMap<>WeakHashMap<K,V>AbstractMap<K,V>newWeakHashMapnewWeakHashMap(int)removeMappingremoveMapping(java.lang.Object)resizeresize(int)/modules/java.base/java/util/WeakHashMap$Entry.classprivateWeakReference<Object>Reference<Object>getEntrygetEntry(java.lang.Object)hashhash(java.lang.Object)unmaskNullunmaskNull(java.lang.Object)WeakHashMapWeakHashMap(java.util.Map)WeakHashMap<Identity,Entry<?>>(java.util.Map)WeakHashMap()WeakHashMap<Identity,Entry<?>>()WeakHashMap(int)WeakHashMap<Identity,Entry<?>>(int)WeakHashMap(int,float)WeakHashMap<Identity,Entry<?>>(int,float)modCountEntry<K,V>[]tableClassValue<>/modules/java.base/java/lang/ClassValue.classEntry<T>Version<T>WeakReference<Version<T>>Reference<Version<T>>probeBackupLocationsprobeBackupLocations(java.lang.ClassValue.Entry[],java.lang.ClassValue)Entry<?>[]ClassValue<T>probeHomeLocationprobeHomeLocation(java.lang.ClassValue.Entry[],java.lang.ClassValue)loadFromCacheloadFromCache(java.lang.ClassValue.Entry[],int)changeEntrychangeEntry(java.lang.ClassValue,java.lang.Object)ClassValue<?>removeEntryremoveEntry(java.lang.ClassValue)finishEntryfinishEntry(java.lang.ClassValue,java.lang.ClassValue.Entry)startEntrystartEntry(java.lang.ClassValue)getCachegetCache()ClassValueMap()EntryreachabilityFencereachabilityFence(java.lang.Object)ReferenceQueue<? super T>/modules/java.base/java/lang/ref/ReferenceQueue.classReferenceReference(java.lang.Object,java.lang.ref.ReferenceQueue)? super Version<T>ReferenceQueue<? super Version<T>>Reference<Version<T>>(java.lang.ClassValue.Version,java.lang.ref.ReferenceQueue)Reference(java.lang.Object)Reference<Version<T>>(java.lang.ClassValue.Version)enqueueenqueue()isEnqueuedisEnqueued()clearInactiveFinalReferenceclearInactiveFinalReference()getFromInactiveFinalReferencegetFromInactiveFinalReference()Version<>refersToImplrefersToImpl(java.lang.Object)refersToImpl(java.lang.ClassValue.Version)refersTorefersTo(java.lang.Object)refersTo(java.lang.ClassValue.Version)get()startReferenceHandlerThreadstartReferenceHandlerThread(java.lang.ThreadGroup)nextvolatilequeueWeakReferenceWeakReference(java.lang.Object,java.lang.ref.ReferenceQueue)WeakReference<Version<T>>(java.lang.ClassValue.Version,java.lang.ref.ReferenceQueue)WeakReference(java.lang.Object)WeakReference<Version<T>>(java.lang.ClassValue.Version)refreshVersionrefreshVersion(java.lang.ClassValue.Version)isLiveisLive()classValueOrNullclassValueOrNull()version()isPromiseisPromise()value()Entry(java.lang.ClassValue.Version)Entry(java.lang.ClassValue.Version,java.lang.Object)DEAD_ENTRYIdentity/modules/java.base/java/lang/ClassValue$Identity.classIdentity()VersionWeakReference<Version>Reference<Version>promisepromise()classValueclassValue()Version(java.lang.ClassValue)ClassValuemakeEntrymakeEntry(java.lang.ClassValue.Version,java.lang.Object)bumpVersionbumpVersion()matchmatch(java.lang.ClassValue.Entry)castEntrycastEntry(java.lang.ClassValue.Entry)put(java.lang.Class,java.lang.Object)remove(java.lang.Class)get(java.lang.Class)computeValuecomputeValue(java.lang.Class)ClassValue()identityHASH_MASKhashCodeForCacheCloneNotSupportedException/modules/java.base/java/lang/CloneNotSupportedException.classCloneNotSupportedException(java.lang.String)CloneNotSupportedException()Cloneable/modules/java.base/java/lang/Cloneable.classComparableDeprecated/modules/java.base/java/lang/Deprecated.classElementType[]forRemovalforRemoval()sincesince()Double/modules/java.base/java/lang/Double.classComparable<Double>compareTo(java.lang.Double)resolveConstantDescresolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)Optional<Double>minmin(double,double)maxmax(double,double)sumsum(double,double)compare(double,double)longBitsToDoublelongBitsToDouble(long)doubleToRawLongBitsdoubleToRawLongBits(double)doubleToLongBitsdoubleToLongBits(double)hashCode(double)doubleValuedoubleValue()floatValuefloatValue()longValuelongValue()intValueintValue()shortValueshortValue()byteValuebyteValue()isInfiniteisInfinite()isNaNisNaN()Double(java.lang.String)Double(double)isFiniteisFinite(double)isInfinite(double)isNaN(double)parseDoubleparseDouble(java.lang.String)valueOf(double)toHexStringtoHexString(double)toString(double)Class<Double>MIN_EXPONENTMAX_EXPONENTPRECISIONMIN_NORMALNaNNEGATIVE_INFINITYPOSITIVE_INFINITYEnumDescList<ConstantDesc>SequencedCollection<ConstantDesc>Collection<ConstantDesc>Iterable<ConstantDesc>bootstrapArgsListbootstrapArgsList()ConstantDesc[]bootstrapArgsbootstrapArgs()bootstrapMethodbootstrapMethod()constantTypeconstantType()constantNameconstantName()DynamicConstantDesc<>DynamicConstantDesc<T>of(java.lang.constant.DirectMethodHandleDesc)of(java.lang.constant.DirectMethodHandleDesc,java.lang.constant.ConstantDesc[])ofNamedofNamed(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])ofCanonicalofCanonical(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])DynamicConstantDescDynamicConstantDesc(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])DynamicConstantDesc<E>(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])EEnum<E>Comparable<E>EnumDesc<>of(java.lang.constant.ClassDesc,java.lang.String)"18"18Error/modules/java.base/java/lang/Error.classError(java.lang.String,java.lang.Throwable,boolean,boolean)Error(java.lang.Throwable)Error(java.lang.String,java.lang.Throwable)Error(java.lang.String)Error()Exception/modules/java.base/java/lang/Exception.classException(java.lang.String,java.lang.Throwable,boolean,boolean)Exception(java.lang.Throwable)Exception(java.lang.String,java.lang.Throwable)Exception(java.lang.String)Exception()Float/modules/java.base/java/lang/Float.classComparable<Float>compareTo(java.lang.Float)Optional<Float>min(float,float)max(float,float)sum(float,float)compare(float,float)floatToFloat16floatToFloat16(float)float16ToFloatfloat16ToFloat(short)intBitsToFloatintBitsToFloat(int)floatToRawIntBitsfloatToRawIntBits(float)floatToIntBitsfloatToIntBits(float)hashCode(float)Float(java.lang.String)Float(double)Float(float)isFinite(float)isInfinite(float)isNaN(float)parseFloatparseFloat(java.lang.String)valueOf(float)toHexString(float)toString(float)Class<Float>FunctionalInterface/modules/java.base/java/lang/FunctionalInterface.classIllegalAccessException/modules/java.base/java/lang/IllegalAccessException.classIllegalAccessException(java.lang.String)IllegalAccessException()IllegalArgumentException/modules/java.base/java/lang/IllegalArgumentException.classIllegalArgumentException(java.lang.Throwable)IllegalArgumentException(java.lang.String,java.lang.Throwable)IllegalArgumentException(java.lang.String)IllegalArgumentException()IllegalStateException/modules/java.base/java/lang/IllegalStateException.classIllegalStateException(java.lang.Throwable)IllegalStateException(java.lang.String,java.lang.Throwable)IllegalStateException(java.lang.String)IllegalStateException()InstantiationException/modules/java.base/java/lang/InstantiationException.classInstantiationException(java.lang.String)InstantiationException()Integer/modules/java.base/java/lang/Integer.classComparable<Integer>compareTo(java.lang.Integer)Optional<Integer>min(int,int)max(int,int)sum(int,int)reverseBytes(int)signumsignum(int)expandexpand(int,int)compresscompress(int,int)reverse(int)rotateRightrotateRight(int,int)rotateLeftrotateLeft(int,int)bitCountbitCount(int)numberOfTrailingZerosnumberOfTrailingZeros(int)numberOfLeadingZerosnumberOfLeadingZeros(int)lowestOneBitlowestOneBit(int)highestOneBithighestOneBit(int)remainderUnsignedremainderUnsigned(int,int)divideUnsigneddivideUnsigned(int,int)toUnsignedLongtoUnsignedLong(int)compareUnsignedcompareUnsigned(int,int)compare(int,int)decodedecode(java.lang.String)getIntegergetInteger(java.lang.String,java.lang.Integer)getInteger(java.lang.String,int)getInteger(java.lang.String)hashCode(int)Integer(java.lang.String)Integer(int)valueOf(int)valueOf(java.lang.String,int)parseUnsignedIntparseUnsignedInt(java.lang.String)parseUnsignedInt(java.lang.CharSequence,int,int,int)parseUnsignedInt(java.lang.String,int)parseIntparseInt(java.lang.String)parseInt(java.lang.CharSequence,int,int,int)parseInt(java.lang.String,int)stringSizestringSize(int)toUnsignedStringtoUnsignedString(int)toBinaryStringtoBinaryString(int)toOctalStringtoOctalString(int)toHexString(int)toUnsignedString(int,int)toString(int,int)digitsClass<Integer>InternalError/modules/java.base/java/lang/InternalError.classInternalError(java.lang.Throwable)InternalError(java.lang.String,java.lang.Throwable)InternalError(java.lang.String)InternalError()InterruptedException/modules/java.base/java/lang/InterruptedException.classInterruptedException(java.lang.String)InterruptedException()IterableSpliterator<>/modules/java.base/java/util/Spliterator.classSpliterator<T>spliteratorspliterator()Consumer<? super T>/modules/java.base/java/util/function/Consumer.classforEach(java.util.function.Consumer)Iterator<>/modules/java.base/java/util/Iterator.classIterator<T>iteratoriterator()LinkageError/modules/java.base/java/lang/LinkageError.classLinkageError(java.lang.String,java.lang.Throwable)LinkageError(java.lang.String)LinkageError()Long/modules/java.base/java/lang/Long.classComparable<Long>compareTo(java.lang.Long)Optional<Long>min(long,long)max(long,long)sum(long,long)reverseBytes(long)signum(long)expand(long,long)compress(long,long)reverse(long)rotateRight(long,int)rotateLeft(long,int)bitCount(long)numberOfTrailingZeros(long)numberOfLeadingZeros(long)lowestOneBit(long)highestOneBit(long)remainderUnsigned(long,long)divideUnsigned(long,long)compareUnsigned(long,long)compare(long,long)getLonggetLong(java.lang.String,java.lang.Long)getLong(java.lang.String,long)getLong(java.lang.String)hashCode(long)Long(java.lang.String)Long(long)valueOf(long)parseUnsignedLongparseUnsignedLong(java.lang.String)parseUnsignedLong(java.lang.CharSequence,int,int,int)parseUnsignedLong(java.lang.String,int)parseLongparseLong(java.lang.String)parseLong(java.lang.CharSequence,int,int,int)parseLong(java.lang.String,int)stringSize(long)toUnsignedString(long)toString(long)toUnsignedString0toUnsignedString0(long,int)toBinaryString(long)toOctalString(long)toHexString(long)toUnsignedString(long,int)toString(long,int)Class<Long>Module/modules/java.base/java/lang/Module.classFunction<String,ClassLoader>Map<String,Module>defineModulesdefineModules(java.lang.module.Configuration,java.util.function.Function,java.lang.ModuleLayer)Set<String>Collection<String>Iterable<String>canUsecanUse(java.lang.Class)implAddUsesimplAddUses(java.lang.Class)addUsesaddUses(java.lang.Class)implAddOpensToAllUnnamedimplAddOpensToAllUnnamed(java.util.Set,java.util.Set)implAddOpensToAllUnnamed(java.lang.String)implAddOpensimplAddOpens(java.lang.String,java.lang.Module)implAddOpens(java.lang.String)implAddExportsNoSyncimplAddExportsNoSync(java.lang.String,java.lang.Module)implAddExportsNoSync(java.lang.String)implAddExportsToAllUnnamedimplAddExportsToAllUnnamed(java.lang.String)implAddExportsimplAddExports(java.lang.String,java.lang.Module)implAddExports(java.lang.String)addOpensaddOpens(java.lang.String,java.lang.Module)addExportsaddExports(java.lang.String,java.lang.Module)isReflectivelyOpenedisReflectivelyOpened(java.lang.String,java.lang.Module)isReflectivelyExportedisReflectivelyExported(java.lang.String,java.lang.Module)isOpenisOpen(java.lang.String)isExportedisExported(java.lang.String)isOpen(java.lang.String,java.lang.Module)isExported(java.lang.String,java.lang.Module)implAddReadsNoSyncimplAddReadsNoSync(java.lang.Module)implAddReadsAllUnnamedimplAddReadsAllUnnamed()implAddReadsimplAddReads(java.lang.Module)addReadsaddReads(java.lang.Module)canRead(java.lang.Module)implAddEnableNativeAccessToAllUnnamedimplAddEnableNativeAccessToAllUnnamed()ensureNativeAccessensureNativeAccess(java.lang.Class,java.lang.String,java.lang.Class)isNativeAccessEnabledisNativeAccessEnabled()implAddEnableNativeAccessimplAddEnableNativeAccess()getLayergetLayer()getDescriptorgetDescriptor()isNamedisNamed()Module(java.lang.ClassLoader,java.lang.module.ModuleDescriptor)Module(java.lang.ClassLoader)Module(java.lang.ModuleLayer,java.lang.ClassLoader,java.lang.module.ModuleDescriptor,java.net.URI)Controller/modules/java.base/java/lang/ModuleLayer$Controller.classenableNativeAccessenableNativeAccess(java.lang.Module)/modules/java.base/java/lang/ModuleLayer.classaddOpens(java.lang.Module,java.lang.String,java.lang.Module)addExports(java.lang.Module,java.lang.String,java.lang.Module)addReads(java.lang.Module,java.lang.Module)layerlayer()Controller(java.lang.ModuleLayer)ModuleLayerStream<ModuleLayer>BaseStream<ModuleLayer,Stream<ModuleLayer>>layerslayers(java.lang.ClassLoader)bindToLoaderbindToLoader(java.lang.ClassLoader)getServicesCataloggetServicesCatalog()bootboot()emptyempty()findLoaderfindLoader(java.lang.String)addEnableNativeAccessaddEnableNativeAccess(java.lang.String)Optional<Module>findModulefindModule(java.lang.String)Set<Module>Collection<Module>Iterable<Module>modules()layers()List<ModuleLayer>SequencedCollection<ModuleLayer>Collection<ModuleLayer>Iterable<ModuleLayer>parentsparents()configuration()defineModules(java.lang.module.Configuration,java.util.List,java.util.function.Function)defineModulesWithManyLoadersdefineModulesWithManyLoaders(java.lang.module.Configuration,java.util.List,java.lang.ClassLoader)defineModulesWithOneLoaderdefineModulesWithOneLoader(java.lang.module.Configuration,java.util.List,java.lang.ClassLoader)defineModules(java.lang.module.Configuration,java.util.function.Function)defineModulesWithManyLoaders(java.lang.module.Configuration,java.lang.ClassLoader)defineModulesWithOneLoader(java.lang.module.Configuration,java.lang.ClassLoader)NamedPackage/modules/java.base/java/lang/NamedPackage.classtoPackagetoPackage(java.lang.String,java.lang.Module)locationlocation()module()packageNamepackageName()NamedPackage(java.lang.String,java.lang.Module)NoSuchFieldException/modules/java.base/java/lang/NoSuchFieldException.classNoSuchFieldException(java.lang.String)NoSuchFieldException()NoSuchMethodException/modules/java.base/java/lang/NoSuchMethodException.classNoSuchMethodException(java.lang.String)NoSuchMethodException()Number/modules/java.base/java/lang/Number.classNumber()NumberFormatException/modules/java.base/java/lang/NumberFormatException.classforCharSequenceforCharSequence(java.lang.CharSequence,int,int,int)forInputStringforInputString(java.lang.String,int)NumberFormatException(java.lang.String)NumberFormatException()Object/modules/java.base/java/lang/Object.classwaitwait(long,int)wait(long)wait()notifyAllnotifyAll()notifynotify()getClassgetClass()Object()Package/modules/java.base/java/lang/Package.classPackage(java.lang.String,java.lang.Module)Package(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.lang.ClassLoader)isCompatibleWithisCompatibleWith(java.lang.String)isSealed(java.net.URL)getImplementationVendorgetImplementationVendor()getImplementationVersiongetImplementationVersion()getImplementationTitlegetImplementationTitle()getSpecificationVendorgetSpecificationVendor()getSpecificationVersiongetSpecificationVersion()getSpecificationTitlegetSpecificationTitle()Process/modules/java.base/java/lang/Process.classStream<ProcessHandle>BaseStream<ProcessHandle,Stream<ProcessHandle>>descendantsdescendants()childrenchildren()infoinfo()toHandletoHandle()CompletableFuture<>/modules/java.base/java/util/concurrent/CompletableFuture.classFuture<>/modules/java.base/java/util/concurrent/Future.classCompletionStage<>/modules/java.base/java/util/concurrent/CompletionStage.classCompletableFuture<Process>Future<Process>CompletionStage<Process>onExitonExit()pidpid()isAliveisAlive()supportsNormalTerminationsupportsNormalTermination()destroyForciblydestroyForcibly()destroydestroy()exitValueexitValue()waitForwaitFor(long,java.util.concurrent.TimeUnit)waitFor()outputWriteroutputWriter(java.nio.charset.Charset)outputWriter()errorReadererrorReader(java.nio.charset.Charset)errorReader()inputReaderinputReader(java.nio.charset.Charset)inputReader()getErrorStreamgetErrorStream()getInputStreamgetInputStream()getOutputStreamgetOutputStream()Process()Info/modules/java.base/java/lang/ProcessHandle$Info.classOptional<String>useruser()Optional<Duration>totalCpuDurationtotalCpuDuration()Optional<Instant>startInstantstartInstant()Optional<String[]>argumentsarguments()commandLinecommandLine()commandcommand()ProcessHandle/modules/java.base/java/lang/ProcessHandle.classComparable<ProcessHandle>compareTo(java.lang.ProcessHandle)CompletableFuture<ProcessHandle>Future<ProcessHandle>CompletionStage<ProcessHandle>allProcessesallProcesses()Optional<ProcessHandle>parentparent()currentcurrent()of(long)Readable/modules/java.base/java/lang/Readable.classRecord/modules/java.base/java/lang/Record.classRecord()ReflectiveOperationException/modules/java.base/java/lang/ReflectiveOperationException.classReflectiveOperationException(java.lang.Throwable)ReflectiveOperationException(java.lang.String,java.lang.Throwable)ReflectiveOperationException(java.lang.String)ReflectiveOperationException()Runnable/modules/java.base/java/lang/Runnable.classrunrun()/modules/java.base/java/lang/Runtime$Version.classComparable<Version>compareTo(java.lang.Runtime.Version)/modules/java.base/java/lang/Runtime.classequalsIgnoreOptionalequalsIgnoreOptional(java.lang.Object)compareToIgnoreOptionalcompareToIgnoreOptional(java.lang.Runtime.Version)optionaloptional()buildbuild()prepre()List<Integer>SequencedCollection<Integer>Collection<Integer>Iterable<Integer>securitysecurity()"10"10minorminor()majormajor()patchpatch()updateupdate()interiminterim()featurefeature()parseparse(java.lang.String)RuntimeloadLibrary0loadLibrary0(java.lang.Class,java.lang.String)loadLibrary(java.lang.String)load0load0(java.lang.Class,java.lang.String)loadload(java.lang.String)runFinalizationrunFinalization()gcgc()maxMemorymaxMemory()totalMemorytotalMemory()freeMemoryfreeMemory()availableProcessorsavailableProcessors()execexec(java.lang.String[],java.lang.String[],java.io.File)exec(java.lang.String[],java.lang.String[])exec(java.lang.String[])exec(java.lang.String,java.lang.String[],java.io.File)exec(java.lang.String,java.lang.String[])exec(java.lang.String)halthalt(int)removeShutdownHookremoveShutdownHook(java.lang.Thread)addShutdownHookaddShutdownHook(java.lang.Thread)exitexit(int)getRuntimegetRuntime()RuntimeException/modules/java.base/java/lang/RuntimeException.classRuntimeException(java.lang.String,java.lang.Throwable,boolean,boolean)RuntimeException(java.lang.Throwable)RuntimeException(java.lang.String,java.lang.Throwable)RuntimeException(java.lang.String)RuntimeException()RuntimePermission/modules/java.base/java/lang/RuntimePermission.classRuntimePermission(java.lang.String,java.lang.String)RuntimePermission(java.lang.String)SafeVarargs/modules/java.base/java/lang/SafeVarargs.classCallableOp/modules/java.base/java/lang/ScopedValue$CallableOp.classX/modules/java.base/java/lang/ScopedValue.classcallcall()Carrier/modules/java.base/java/lang/ScopedValue$Carrier.classrun(java.lang.Runnable)CallableOp<>Rcall(java.lang.ScopedValue.CallableOp)? extends RCallableOp<? extends R,X>ScopedValue<>get(java.lang.ScopedValue)ScopedValue<T>ScopedValue<?>getKeygetKey()of(java.lang.ScopedValue,java.lang.Object)wherewhere(java.lang.ScopedValue,java.lang.Object)Carrier(java.lang.ScopedValue,java.lang.Object,java.lang.ScopedValue.Carrier)prevkeybitmaskScopedValuecontainsAllcontainsAll(int,int)bitmask()Supplier<>/modules/java.base/java/util/function/Supplier.classorElseThroworElseThrow(java.util.function.Supplier)? extends XSupplier<? extends X>orElseorElse(java.lang.Object)isBoundisBound()runWhererunWhere(java.lang.ScopedValue,java.lang.Object,java.lang.Runnable)callWherecallWhere(java.lang.ScopedValue,java.lang.Object,java.lang.ScopedValue.CallableOp)SecurityException/modules/java.base/java/lang/SecurityException.classSecurityException(java.lang.Throwable)SecurityException(java.lang.String,java.lang.Throwable)SecurityException(java.lang.String)SecurityException()SecurityManager/modules/java.base/java/lang/SecurityManager.class"17"17getThreadGroupgetThreadGroup()checkSecurityAccesscheckSecurityAccess(java.lang.String)checkSetFactorycheckSetFactory()checkPackageDefinitioncheckPackageDefinition(java.lang.String)checkPackageAccesscheckPackageAccess(java.lang.String)invalidatePackageAccessCacheinvalidatePackageAccessCache()addNonExportedPackagesaddNonExportedPackages(java.lang.ModuleLayer)checkPrintJobAccesscheckPrintJobAccess()checkPropertyAccesscheckPropertyAccess(java.lang.String)checkPropertiesAccesscheckPropertiesAccess()checkMulticastcheckMulticast(java.net.InetAddress,byte)checkMulticast(java.net.InetAddress)checkAcceptcheckAccept(java.lang.String,int)checkListencheckListen(int)checkConnectcheckConnect(java.lang.String,int,java.lang.Object)checkConnect(java.lang.String,int)checkDeletecheckDelete(java.lang.String)checkWritecheckWrite(java.lang.String)checkWrite(java.io.FileDescriptor)checkReadcheckRead(java.lang.String,java.lang.Object)checkRead(java.lang.String)checkRead(java.io.FileDescriptor)checkLinkcheckLink(java.lang.String)checkExeccheckExec(java.lang.String)checkExitcheckExit(int)checkAccesscheckAccess(java.lang.ThreadGroup)checkAccess(java.lang.Thread)checkCreateClassLoadercheckCreateClassLoader()checkPermissioncheckPermission(java.security.Permission,java.lang.Object)checkPermission(java.security.Permission)getSecurityContextgetSecurityContext()getClassContextgetClassContext()SecurityManager()StackFrameInfo/modules/java.base/java/lang/StackFrameInfo.classgetMethodTypegetMethodType()StackFrameInfo(java.lang.StackWalker)StackTraceElement/modules/java.base/java/lang/StackTraceElement.classStackTraceElement[]of(java.lang.StackTraceElement[])of(java.lang.StackFrameInfo)of(java.lang.Object,int)getClassLoaderNamegetClassLoaderName()getModuleVersiongetModuleVersion()getModuleNamegetModuleName()StackTraceElement(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)StackTraceElement(java.lang.String,java.lang.String,java.lang.String,int)ExtendedOption/modules/java.base/java/lang/StackWalker$ExtendedOption.classEnum<ExtendedOption>Comparable<ExtendedOption>compareTo(java.lang.StackWalker.ExtendedOption)EnumDesc<ExtendedOption>DynamicConstantDesc<ExtendedOption>Optional<EnumDesc<ExtendedOption>>Class<ExtendedOption>Enum<ExtendedOption>(java.lang.String,int)ExtendedOption[]LOCALS_AND_OPERANDSOption/modules/java.base/java/lang/StackWalker$Option.classEnum<Option>Comparable<Option>compareTo(java.lang.StackWalker.Option)EnumDesc<Option>DynamicConstantDesc<Option>Optional<EnumDesc<Option>>Class<Option>Enum<Option>(java.lang.String,int)Option[]SHOW_HIDDEN_FRAMESSHOW_REFLECT_FRAMESDROP_METHOD_INFORETAIN_CLASS_REFERENCEStackFrame/modules/java.base/java/lang/StackWalker$StackFrame.classStackWalker/modules/java.base/java/lang/StackWalker.classgetContinuationgetContinuation()getContScopegetContScope()hasLocalsOperandsOptionhasLocalsOperandsOption()hasOptionhasOption(java.lang.StackWalker.Option)estimateDepthestimateDepth()Set<Option>Collection<Option>Iterable<Option>newInstance(java.util.Set,java.lang.StackWalker.ExtendedOption,jdk.internal.vm.ContinuationScope,jdk.internal.vm.Continuation)newInstance(java.util.Set,java.lang.StackWalker.ExtendedOption,jdk.internal.vm.ContinuationScope)newInstance(java.util.Set,jdk.internal.vm.ContinuationScope)newInstance(java.util.Set,java.lang.StackWalker.ExtendedOption)getCallerClassgetCallerClass()? super StackFrameConsumer<? super StackFrame>Function<>walkwalk(java.util.function.Function)Stream<StackFrame>BaseStream<StackFrame,Stream<StackFrame>>? super Stream<StackFrame>? extends TFunction<? super Stream<StackFrame>,? extends T>getInstancegetInstance(java.util.Set,int)getInstance(java.util.Set)getInstance(java.lang.StackWalker.Option)getInstance()EnumSet<Option>/modules/java.base/java/util/EnumSet.classAbstractSet<Option>/modules/java.base/java/util/AbstractSet.classAbstractCollection<Option>/modules/java.base/java/util/AbstractCollection.classDEFAULT_EMPTY_OPTIONString/modules/java.base/java/lang/String.classComparable<String>compareTo(java.lang.String)valueOfCodePointvalueOfCodePoint(int)checkBoundsBeginEndcheckBoundsBeginEnd(int,int,int)checkBoundsOffCountcheckBoundsOffCount(int,int,int)checkOffsetcheckOffset(int,int)checkIndexcheckIndex(int,int)coder()String(byte[],byte)String(java.lang.AbstractStringBuilder,java.lang.Void)getBytes(byte[],int,int,byte,int)repeatCopyRestrepeatCopyRest(byte[],int,int,int)repeat(int)internintern()copyValueOfcopyValueOf(char[])copyValueOf(char[],int,int)valueOf(char[],int,int)valueOf(char[])valueOf(java.lang.Object)formattedformatted(java.lang.Object[])toCharArraytoCharArray()transformtransform(java.util.function.Function)? super StringFunction<? super String,? extends R>translateEscapestranslateEscapes()stripIndentstripIndent()indentindent(int)isBlankisBlank()stripTrailingstripTrailing()stripLeadingstripLeading()stripstrip()trimtrim()toUpperCase()toUpperCase(java.util.Locale)toLowerCase()toLowerCase(java.util.Locale)? extends CharSequenceIterable<? extends CharSequence>joinjoin(java.lang.CharSequence,java.lang.Iterable)join(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],int)CharSequence[]join(java.lang.CharSequence,java.lang.CharSequence[])splitsplit(java.lang.String)splitWithDelimiterssplitWithDelimiters(java.lang.String,int)split(java.lang.String,int)replace(java.lang.CharSequence,java.lang.CharSequence)replaceAll(java.lang.String,java.lang.String)replaceFirstreplaceFirst(java.lang.String,java.lang.String)containscontains(java.lang.CharSequence)matchesmatches(java.lang.String)replace(char,char)concatconcat(java.lang.String)lastIndexOf(byte[],byte,int,java.lang.String,int)indexOf(byte[],byte,int,java.lang.String,int)indexOf(java.lang.String,int,int)lastIndexOf(int,int)lastIndexOf(int)indexOf(int,int,int)indexOf(int,int)indexOf(int)endsWithendsWith(java.lang.String)startsWithstartsWith(java.lang.String)startsWith(java.lang.String,int)regionMatchesregionMatches(boolean,int,java.lang.String,int,int)regionMatches(int,java.lang.String,int,int)compareToIgnoreCasecompareToIgnoreCase(java.lang.String)equalsIgnoreCaseequalsIgnoreCase(java.lang.String)contentEqualscontentEquals(java.lang.CharSequence)contentEquals(java.lang.StringBuffer)copyToSegmentRawcopyToSegmentRaw(java.lang.foreign.MemorySegment,long)bytesCompatiblebytesCompatible(java.nio.charset.Charset)getBytes()getBytes(java.nio.charset.Charset)getBytes(java.lang.String)getBytes(int,int,byte[],int)String(java.lang.StringBuilder)String(java.lang.StringBuffer)String(byte[])String(byte[],int,int)String(byte[],java.nio.charset.Charset)String(byte[],java.lang.String)decodeASCIIdecodeASCII(byte[],int,char[],int,int)getBytesNoReplgetBytesNoRepl(java.lang.String,java.nio.charset.Charset)getBytesUTF8NoReplgetBytesUTF8NoRepl(java.lang.String)newStringNoReplnewStringNoRepl(byte[],java.nio.charset.Charset)newStringUTF8NoReplnewStringUTF8NoRepl(byte[],int,int,boolean)String(byte[],int,int,java.nio.charset.Charset)String(byte[],int,int,java.lang.String)String(byte[],int)String(byte[],int,int,int)int[]String(int[],int,int)String(char[],int,int)String(char[])String(java.lang.String)String()UTF16LATIN1Comparator<String>/modules/java.base/java/util/Comparator.classCASE_INSENSITIVE_ORDERCOMPACT_STRINGSStringBuffer/modules/java.base/java/lang/StringBuffer.classComparable<StringBuffer>compareTo(java.lang.StringBuffer)StringBuffer(java.lang.CharSequence)StringBuffer(java.lang.String)StringBuffer(int)StringBuffer()StringBuilder/modules/java.base/java/lang/StringBuilder.classComparable<StringBuilder>compareTo(java.lang.StringBuilder)StringBuilder(java.lang.CharSequence)StringBuilder(java.lang.String)StringBuilder(int)StringBuilder()Level/modules/java.base/java/lang/System$Logger$Level.classEnum<Level>Comparable<Level>compareTo(java.lang.System.Logger.Level)EnumDesc<Level>DynamicConstantDesc<Level>Optional<EnumDesc<Level>>Class<Level>Enum<Level>(java.lang.String,int)getSeveritygetSeverity()Level[]OFFWARNINGINFODEBUGTRACEALLLogger/modules/java.base/java/lang/System$Logger.classloglog(java.lang.System.Logger.Level,java.util.ResourceBundle,java.lang.String,java.lang.Object[])log(java.lang.System.Logger.Level,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)log(java.lang.System.Logger.Level,java.lang.String,java.lang.Object[])Supplier<String>log(java.lang.System.Logger.Level,java.util.function.Supplier,java.lang.Throwable)log(java.lang.System.Logger.Level,java.lang.String,java.lang.Throwable)log(java.lang.System.Logger.Level,java.lang.Object)log(java.lang.System.Logger.Level,java.util.function.Supplier)log(java.lang.System.Logger.Level,java.lang.String)isLoggableisLoggable(java.lang.System.Logger.Level)System/modules/java.base/java/lang/System.classmapLibraryNamemapLibraryName(java.lang.String)getLoggergetLogger(java.lang.String,java.util.ResourceBundle)getLogger(java.lang.String)Map<String,String>getenvgetenv()getenv(java.lang.String)clearPropertyclearProperty(java.lang.String)setPropertysetProperty(java.lang.String,java.lang.String)getPropertygetProperty(java.lang.String,java.lang.String)getProperty(java.lang.String)setPropertiessetProperties(java.util.Properties)lineSeparatorlineSeparator()getPropertiesgetProperties()identityHashCodeidentityHashCode(java.lang.Object)arraycopyarraycopy(java.lang.Object,int,java.lang.Object,int,int)nanoTimenanoTime()currentTimeMilliscurrentTimeMillis()getSecurityManagergetSecurityManager()setSecurityManagersetSecurityManager(java.lang.SecurityManager)inheritedChannelinheritedChannel()consoleconsole()setErrsetErr(java.io.PrintStream)setOutsetOut(java.io.PrintStream)setInsetIn(java.io.InputStream)bootLayerOfPlatform/modules/java.base/java/lang/Thread$Builder$OfPlatform.classstackSizestackSize(long)prioritypriority(int)daemondaemon()daemon(boolean)groupgroup(java.lang.ThreadGroup)uncaughtExceptionHandleruncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)inheritInheritableThreadLocalsinheritInheritableThreadLocals(boolean)name(java.lang.String,long)name(java.lang.String)OfVirtual/modules/java.base/java/lang/Thread$Builder$OfVirtual.classBuilder/modules/java.base/java/lang/Thread$Builder.classfactoryfactory()startstart(java.lang.Runnable)unstartedunstarted(java.lang.Runnable)State/modules/java.base/java/lang/Thread$State.classEnum<State>Comparable<State>compareTo(java.lang.Thread.State)EnumDesc<State>DynamicConstantDesc<State>Optional<EnumDesc<State>>Class<State>Enum<State>(java.lang.String,int)State[]TERMINATEDTIMED_WAITINGWAITINGBLOCKEDRUNNABLENEWUncaughtExceptionHandler/modules/java.base/java/lang/Thread$UncaughtExceptionHandler.class/modules/java.base/java/lang/Thread.classuncaughtExceptionuncaughtException(java.lang.Thread,java.lang.Throwable)ThreadsetHeadStackableScopesetHeadStackableScope(jdk.internal.vm.StackableScope)headStackableScopesheadStackableScopes()setThreadContainersetThreadContainer(jdk.internal.vm.ThreadContainer)threadContainerthreadContainer()virtualThreadGroupvirtualThreadGroup()dispatchUncaughtExceptiondispatchUncaughtException(java.lang.Throwable)setUncaughtExceptionHandlersetUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)getUncaughtExceptionHandlergetUncaughtExceptionHandler()getDefaultUncaughtExceptionHandlergetDefaultUncaughtExceptionHandler()setDefaultUncaughtExceptionHandlersetDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)isTerminatedisTerminated()threadStatethreadState()getStategetState()threadIdthreadId()getIdgetId()"19"19Thread[]getAllThreadsgetAllThreads()Map<Thread,StackTraceElement[]>getAllStackTracesgetAllStackTraces()asyncGetStackTraceasyncGetStackTrace()getStackTracegetStackTrace()holdsLockholdsLock(java.lang.Object)setContextClassLoadersetContextClassLoader(java.lang.ClassLoader)getContextClassLoadergetContextClassLoader()checkAccess()isDaemonisDaemon()setDaemonsetDaemon(boolean)dumpStackdumpStack()join(java.time.Duration)join()join(long,int)join(long)enumerateenumerate(java.lang.Thread[])activeCountactiveCount()setNamesetName(java.lang.String)getPrioritygetPriority()setPrioritysetPriority(int)alivealive()getAndClearInterruptgetAndClearInterrupt()clearInterruptclearInterrupt()setInterruptsetInterrupt()isInterruptedisInterrupted()interruptedinterrupted()interruptinterrupt()stopstop()"1.2"1.2clearReferencesclearReferences()runWithrunWith(java.lang.Object,java.lang.Runnable)start(jdk.internal.vm.ThreadContainer)start()isVirtualisVirtual()startVirtualThreadstartVirtualThread(java.lang.Runnable)Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,boolean)Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)Thread(java.lang.Runnable,java.lang.String)Thread(java.lang.ThreadGroup,java.lang.String)Thread(java.lang.String)Thread(java.lang.ThreadGroup,java.lang.Runnable)Thread(java.lang.Runnable,java.security.AccessControlContext)Thread(java.lang.Runnable)Thread()genThreadNamegenThreadName()ofVirtualofVirtual()ofPlatformofPlatform()Thread(java.lang.String,int,boolean)Thread(java.lang.ThreadGroup,java.lang.String,int,java.lang.Runnable,long,java.security.AccessControlContext)onSpinWaitonSpinWait()sleepsleep(java.time.Duration)sleep(long,int)sleep(long)yieldyield()ensureMaterializedForStackWalkensureMaterializedForStackWalk(java.lang.Object)setScopedValueCachesetScopedValueCache(java.lang.Object[])scopedValueCachescopedValueCache()setCurrentThreadsetCurrentThread(java.lang.Thread)currentThreadcurrentThread()currentCarrierThreadcurrentCarrierThread()setContinuationsetContinuation(jdk.internal.vm.Continuation)blockedOnblockedOn(sun.nio.ch.Interruptible)nioBlockernioBlocker()inheritScopedValueBindingsinheritScopedValueBindings(jdk.internal.vm.ThreadContainer)findScopedValueBindingsfindScopedValueBindings()setScopedValueBindingssetScopedValueBindings(java.lang.Object)scopedValueBindingsscopedValueBindings()threadLocalRandomSecondarySeedthreadLocalRandomProbethreadLocalRandomSeedNO_INHERIT_THREAD_LOCALSMAX_PRIORITYNORM_PRIORITYMIN_PRIORITYinterruptLockinheritableThreadLocalsthreadLocalsBaseThreadBuilder/modules/java.base/java/lang/ThreadBuilders$BaseThreadBuilder.classsetInheritInheritableThreadLocalssetInheritInheritableThreadLocals(boolean)setName(java.lang.String,long)nextThreadNamenextThreadName()uncaughtExceptionHandler()characteristicscharacteristics()countercounter()PlatformThreadBuilder/modules/java.base/java/lang/ThreadBuilders$PlatformThreadBuilder.classPlatformThreadBuilder()VirtualThreadBuilder/modules/java.base/java/lang/ThreadBuilders$VirtualThreadBuilder.classVirtualThreadBuilder(java.util.concurrent.Executor)VirtualThreadBuilder()ThreadBuilders/modules/java.base/java/lang/ThreadBuilders.classnewVirtualThreadnewVirtualThread(java.util.concurrent.Executor,java.lang.String,int,java.lang.Runnable)ThreadGroup/modules/java.base/java/lang/ThreadGroup.class"16"16ThreadGroup[]enumerate(java.lang.ThreadGroup[],boolean)enumerate(java.lang.ThreadGroup[])activeGroupCountactiveGroupCount()enumerate(java.lang.Thread[],boolean)parentOfparentOf(java.lang.ThreadGroup)setMaxPrioritysetMaxPriority(int)isDestroyedisDestroyed()getMaxPrioritygetMaxPriority()ThreadGroup(java.lang.ThreadGroup,java.lang.String)ThreadGroup(java.lang.String)ThreadGroup(java.lang.ThreadGroup,java.lang.String,int,boolean)ThreadLocalMap/modules/java.base/java/lang/ThreadLocal$ThreadLocalMap.classThreadLocal<?>/modules/java.base/java/lang/ThreadLocal.classThreadLocalMap(java.lang.ThreadLocal,java.lang.Object)ThreadLocaldumpStackIfVirtualThreaddumpStackIfVirtualThread()childValuechildValue(java.lang.Object)createInheritedMapcreateInheritedMap(java.lang.ThreadLocal.ThreadLocalMap)createMapcreateMap(java.lang.Thread,java.lang.Object)getMapgetMap(java.lang.Thread)removeCarrierThreadLocalremoveCarrierThreadLocal()remove()setCarrierThreadLocalsetCarrierThreadLocal(java.lang.Object)set(java.lang.Object)isCarrierThreadLocalPresentisCarrierThreadLocalPresent()getCarrierThreadLocalgetCarrierThreadLocal()ThreadLocal()ThreadLocal<>SThreadLocal<S>withInitialwithInitial(java.util.function.Supplier)? extends SSupplier<? extends S>initialValueinitialValue()Throwable/modules/java.base/java/lang/Throwable.classThrowable[]getSuppressedgetSuppressed()addSuppressedaddSuppressed(java.lang.Throwable)setStackTracesetStackTrace(java.lang.StackTraceElement[])fillInStackTracefillInStackTrace()printStackTraceprintStackTrace(java.io.PrintWriter)printStackTrace(java.io.PrintStream)printStackTrace()setCausesetCause(java.lang.Throwable)initCauseinitCause(java.lang.Throwable)getCausegetCause()getLocalizedMessagegetLocalizedMessage()Throwable(java.lang.String,java.lang.Throwable,boolean,boolean)Throwable(java.lang.Throwable)Throwable(java.lang.String,java.lang.Throwable)Throwable(java.lang.String)Throwable()jfrTracingTypeNotPresentException/modules/java.base/java/lang/TypeNotPresentException.classtypeNametypeName()TypeNotPresentException(java.lang.String,java.lang.Throwable)UnsupportedOperationException/modules/java.base/java/lang/UnsupportedOperationException.classUnsupportedOperationException(java.lang.Throwable)UnsupportedOperationException(java.lang.String,java.lang.Throwable)UnsupportedOperationException(java.lang.String)UnsupportedOperationException()VirtualMachineError/modules/java.base/java/lang/VirtualMachineError.classVirtualMachineError(java.lang.Throwable)VirtualMachineError(java.lang.String,java.lang.Throwable)VirtualMachineError(java.lang.String)VirtualMachineError()Void/modules/java.base/java/lang/Void.classClass<Void>WrongThreadException/modules/java.base/java/lang/WrongThreadException.classWrongThreadException(java.lang.Throwable)WrongThreadException(java.lang.String,java.lang.Throwable)WrongThreadException(java.lang.String)WrongThreadException()java.lang.annotationAnnotation/modules/java.base/java/lang/annotation/Annotation.class/modules/java.base/java/lang/annotationannotationTypeannotationType()Documented/modules/java.base/java/lang/annotation/Documented.classElementType/modules/java.base/java/lang/annotation/ElementType.classEnum<ElementType>Comparable<ElementType>compareTo(java.lang.annotation.ElementType)EnumDesc<ElementType>DynamicConstantDesc<ElementType>Optional<EnumDesc<ElementType>>Class<ElementType>Enum<ElementType>(java.lang.String,int)RECORD_COMPONENTMODULETYPE_USETYPE_PARAMETERPACKAGEANNOTATION_TYPELOCAL_VARIABLECONSTRUCTORPARAMETERMETHODFIELDRetention/modules/java.base/java/lang/annotation/Retention.classRetentionPolicy/modules/java.base/java/lang/annotation/RetentionPolicy.classEnum<RetentionPolicy>Comparable<RetentionPolicy>compareTo(java.lang.annotation.RetentionPolicy)EnumDesc<RetentionPolicy>DynamicConstantDesc<RetentionPolicy>Optional<EnumDesc<RetentionPolicy>>Class<RetentionPolicy>Enum<RetentionPolicy>(java.lang.String,int)RetentionPolicy[]RUNTIMECLASSSOURCETarget/modules/java.base/java/lang/annotation/Target.classAsTypeMethodHandleDesc/modules/java.base/java/lang/constant/AsTypeMethodHandleDesc.classDynamicConstantDesc<MethodHandle>DynamicConstantDesc<MethodHandle>(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])invocationTypeinvocationType()AsTypeMethodHandleDesc(java.lang.constant.MethodHandleDesc,java.lang.constant.MethodTypeDesc)ClassDesc/modules/java.base/java/lang/constant/ClassDesc.classOfField<ClassDesc>displayNamedisplayName()isClassOrInterfaceisClassOrInterface()nestednested(java.lang.String,java.lang.String[])nested(java.lang.String)arrayType(int)ofDescriptorofDescriptor(java.lang.String)of(java.lang.String,java.lang.String)ofInternalNameofInternalName(java.lang.String)of(java.lang.String)Constable/modules/java.base/java/lang/constant/Constable.class? extends ConstantDescOptional<? extends ConstantDesc>ConstantDesc/modules/java.base/java/lang/constant/ConstantDesc.classKind/modules/java.base/java/lang/constant/DirectMethodHandleDesc$Kind.classEnum<Kind>Comparable<Kind>compareTo(java.lang.constant.DirectMethodHandleDesc.Kind)EnumDesc<Kind>DynamicConstantDesc<Kind>Optional<EnumDesc<Kind>>Class<Kind>Enum<Kind>(java.lang.String,int)valueOf(int,boolean)Kind[]refKindSTATIC_SETTERSTATIC_GETTERSETTERGETTERINTERFACE_SPECIALSPECIALINTERFACE_VIRTUALVIRTUALINTERFACE_STATICSTATICDirectMethodHandleDesc/modules/java.base/java/lang/constant/DirectMethodHandleDesc.classlookupDescriptorlookupDescriptor()methodNamemethodName()ownerowner()isOwnerInterfaceisOwnerInterface()refKind()kindkind()MethodHandleDesc/modules/java.base/java/lang/constant/MethodHandleDesc.classasTypeasType(java.lang.constant.MethodTypeDesc)ClassDesc[]ofConstructorofConstructor(java.lang.constant.ClassDesc,java.lang.constant.ClassDesc[])ofFieldofField(java.lang.constant.DirectMethodHandleDesc.Kind,java.lang.constant.ClassDesc,java.lang.String,java.lang.constant.ClassDesc)ofMethodofMethod(java.lang.constant.DirectMethodHandleDesc.Kind,java.lang.constant.ClassDesc,java.lang.String,java.lang.constant.MethodTypeDesc)of(java.lang.constant.DirectMethodHandleDesc.Kind,java.lang.constant.ClassDesc,java.lang.String,java.lang.String)MethodTypeDesc/modules/java.base/java/lang/constant/MethodTypeDesc.classOfMethod<ClassDesc,MethodTypeDesc>/modules/java.base/java/lang/invoke/TypeDescriptor$OfMethod.classOfField[]OfField<F>OfField<F>[]F[]OfMethod<>insertParameterTypesinsertParameterTypes(int,java.lang.invoke.TypeDescriptor.OfField[])insertParameterTypes(int,java.lang.constant.ClassDesc[])dropParameterTypesdropParameterTypes(int,int)changeParameterTypechangeParameterType(int,java.lang.invoke.TypeDescriptor.OfField)changeParameterType(int,java.lang.constant.ClassDesc)changeReturnTypechangeReturnType(java.lang.invoke.TypeDescriptor.OfField)changeReturnType(java.lang.constant.ClassDesc)List<F>SequencedCollection<F>Collection<F>Iterable<F>parameterListparameterList()List<ClassDesc>SequencedCollection<ClassDesc>Collection<ClassDesc>Iterable<ClassDesc>OfField<>[]parameterArrayparameterArray()returnTypereturnType()parameterTypeparameterType(int)parameterCountparameterCount()displayDescriptordisplayDescriptor()of(java.lang.constant.ClassDesc,java.lang.constant.ClassDesc[])of(java.lang.constant.ClassDesc,java.util.List)of(java.lang.constant.ClassDesc)java.lang.foreignAddressLayout/modules/java.base/java/lang/foreign/AddressLayout.class/modules/java.base/java/lang/foreignOptional<MemoryLayout>targetLayouttargetLayout()withoutTargetLayoutwithoutTargetLayout()withTargetLayoutwithTargetLayout(java.lang.foreign.MemoryLayout)withOrderwithOrder(java.nio.ByteOrder)withByteAlignmentwithByteAlignment(long)withoutNamewithoutName()withNamewithName(java.lang.String)Arena/modules/java.base/java/lang/foreign/Arena.classscopescope()allocateallocate(long,long)ofSharedofShared()ofConfinedofConfined()globalglobal()ofAutoofAuto()GroupLayout/modules/java.base/java/lang/foreign/GroupLayout.classList<MemoryLayout>SequencedCollection<MemoryLayout>Collection<MemoryLayout>Iterable<MemoryLayout>memberLayoutsmemberLayouts()PathElement/modules/java.base/java/lang/foreign/MemoryLayout$PathElement.classdereferenceElementdereferenceElement()sequenceElementsequenceElement()sequenceElement(long,long)sequenceElement(long)groupElementgroupElement(long)groupElement(java.lang.String)MemoryLayout/modules/java.base/java/lang/foreign/MemoryLayout.classMemoryLayout[]unionLayoutunionLayout(java.lang.foreign.MemoryLayout[])structLayoutstructLayout(java.lang.foreign.MemoryLayout[])sequenceLayoutsequenceLayout(long,java.lang.foreign.MemoryLayout)paddingLayoutpaddingLayout(long)PathElement[]selectselect(java.lang.foreign.MemoryLayout.PathElement[])sliceHandlesliceHandle(java.lang.foreign.MemoryLayout.PathElement[])arrayElementVarHandlearrayElementVarHandle(java.lang.foreign.MemoryLayout.PathElement[])varHandlevarHandle(java.lang.foreign.MemoryLayout.PathElement[])byteOffsetHandlebyteOffsetHandle(java.lang.foreign.MemoryLayout.PathElement[])byteOffsetbyteOffset(java.lang.foreign.MemoryLayout.PathElement[])scaleHandlescaleHandle()scalescale(long,long)byteAlignmentbyteAlignment()byteSizebyteSize()Scope/modules/java.base/java/lang/foreign/MemorySegment$Scope.classMemorySegment/modules/java.base/java/lang/foreign/MemorySegment.classmismatchmismatch(java.lang.foreign.MemorySegment,long,long,java.lang.foreign.MemorySegment,long,long)copycopy(java.lang.Object,int,java.lang.foreign.MemorySegment,java.lang.foreign.ValueLayout,long,int)copy(java.lang.foreign.MemorySegment,java.lang.foreign.ValueLayout,long,java.lang.Object,int,int)setAtIndexsetAtIndex(java.lang.foreign.AddressLayout,long,java.lang.foreign.MemorySegment)getAtIndexgetAtIndex(java.lang.foreign.AddressLayout,long)setAtIndex(java.lang.foreign.ValueLayout.OfDouble,long,double)getAtIndex(java.lang.foreign.ValueLayout.OfDouble,long)setAtIndex(java.lang.foreign.ValueLayout.OfLong,long,long)getAtIndex(java.lang.foreign.ValueLayout.OfLong,long)setAtIndex(java.lang.foreign.ValueLayout.OfFloat,long,float)getAtIndex(java.lang.foreign.ValueLayout.OfFloat,long)setAtIndex(java.lang.foreign.ValueLayout.OfInt,long,int)getAtIndex(java.lang.foreign.ValueLayout.OfInt,long)setAtIndex(java.lang.foreign.ValueLayout.OfShort,long,short)setAtIndex(java.lang.foreign.ValueLayout.OfBoolean,long,boolean)setAtIndex(java.lang.foreign.ValueLayout.OfByte,long,byte)getAtIndex(java.lang.foreign.ValueLayout.OfShort,long)setAtIndex(java.lang.foreign.ValueLayout.OfChar,long,char)getAtIndex(java.lang.foreign.ValueLayout.OfChar,long)getAtIndex(java.lang.foreign.ValueLayout.OfBoolean,long)getAtIndex(java.lang.foreign.ValueLayout.OfByte,long)set(java.lang.foreign.AddressLayout,long,java.lang.foreign.MemorySegment)get(java.lang.foreign.AddressLayout,long)set(java.lang.foreign.ValueLayout.OfDouble,long,double)get(java.lang.foreign.ValueLayout.OfDouble,long)set(java.lang.foreign.ValueLayout.OfLong,long,long)get(java.lang.foreign.ValueLayout.OfLong,long)set(java.lang.foreign.ValueLayout.OfFloat,long,float)get(java.lang.foreign.ValueLayout.OfFloat,long)set(java.lang.foreign.ValueLayout.OfInt,long,int)get(java.lang.foreign.ValueLayout.OfInt,long)set(java.lang.foreign.ValueLayout.OfShort,long,short)get(java.lang.foreign.ValueLayout.OfShort,long)set(java.lang.foreign.ValueLayout.OfChar,long,char)get(java.lang.foreign.ValueLayout.OfChar,long)set(java.lang.foreign.ValueLayout.OfBoolean,long,boolean)get(java.lang.foreign.ValueLayout.OfBoolean,long)set(java.lang.foreign.ValueLayout.OfByte,long,byte)get(java.lang.foreign.ValueLayout.OfByte,long)copy(java.lang.foreign.MemorySegment,java.lang.foreign.ValueLayout,long,java.lang.foreign.MemorySegment,java.lang.foreign.ValueLayout,long,long)copy(java.lang.foreign.MemorySegment,long,java.lang.foreign.MemorySegment,long,long)ofAddressofAddress(long)double[]ofArrayofArray(double[])long[]ofArray(long[])float[]ofArray(float[])ofArray(int[])short[]ofArray(short[])ofArray(char[])ofArray(byte[])ofBufferofBuffer(java.nio.Buffer)setStringsetString(long,java.lang.String,java.nio.charset.Charset)setString(long,java.lang.String)getStringgetString(long,java.nio.charset.Charset)getString(long)toArraytoArray(java.lang.foreign.ValueLayout.OfDouble)toArray(java.lang.foreign.ValueLayout.OfLong)toArray(java.lang.foreign.ValueLayout.OfFloat)toArray(java.lang.foreign.ValueLayout.OfInt)toArray(java.lang.foreign.ValueLayout.OfChar)toArray(java.lang.foreign.ValueLayout.OfShort)toArray(java.lang.foreign.ValueLayout.OfByte)asByteBufferasByteBuffer()forceforce()unloadunload()load()isLoadedisLoaded()mismatch(java.lang.foreign.MemorySegment)copyFromcopyFrom(java.lang.foreign.MemorySegment)fillfill(byte)Optional<MemorySegment>asOverlappingSliceasOverlappingSlice(java.lang.foreign.MemorySegment)isMappedisMapped()isNativeisNative()asReadOnlyasReadOnly()isReadOnlyisReadOnly()Consumer<MemorySegment>reinterpretreinterpret(long,java.lang.foreign.Arena,java.util.function.Consumer)reinterpret(java.lang.foreign.Arena,java.util.function.Consumer)reinterpret(long)asSliceasSlice(long)asSlice(long,java.lang.foreign.MemoryLayout)asSlice(long,long,long)asSlice(long,long)maxByteAlignmentmaxByteAlignment()isAccessibleByisAccessibleBy(java.lang.Thread)Stream<MemorySegment>BaseStream<MemorySegment,Stream<MemorySegment>>elementselements(java.lang.foreign.MemoryLayout)Spliterator<MemorySegment>spliterator(java.lang.foreign.MemoryLayout)Optional<Object>heapBaseheapBase()addressaddress()NULLPaddingLayout/modules/java.base/java/lang/foreign/PaddingLayout.classSegmentAllocator/modules/java.base/java/lang/foreign/SegmentAllocator.classprefixAllocatorprefixAllocator(java.lang.foreign.MemorySegment)slicingAllocatorslicingAllocator(java.lang.foreign.MemorySegment)allocate(long)allocate(java.lang.foreign.MemoryLayout,long)allocate(java.lang.foreign.MemoryLayout)allocateFromallocateFrom(java.lang.foreign.ValueLayout.OfDouble,double[])allocateFrom(java.lang.foreign.ValueLayout.OfLong,long[])allocateFrom(java.lang.foreign.ValueLayout.OfFloat,float[])allocateFrom(java.lang.foreign.ValueLayout.OfInt,int[])allocateFrom(java.lang.foreign.ValueLayout.OfChar,char[])allocateFrom(java.lang.foreign.ValueLayout.OfShort,short[])allocateFrom(java.lang.foreign.ValueLayout.OfByte,byte[])allocateFrom(java.lang.foreign.ValueLayout,java.lang.foreign.MemorySegment,java.lang.foreign.ValueLayout,long,long)allocateFrom(java.lang.foreign.AddressLayout,java.lang.foreign.MemorySegment)allocateFrom(java.lang.foreign.ValueLayout.OfDouble,double)allocateFrom(java.lang.foreign.ValueLayout.OfLong,long)allocateFrom(java.lang.foreign.ValueLayout.OfFloat,float)allocateFrom(java.lang.foreign.ValueLayout.OfInt,int)allocateFrom(java.lang.foreign.ValueLayout.OfShort,short)allocateFrom(java.lang.foreign.ValueLayout.OfChar,char)allocateFrom(java.lang.foreign.ValueLayout.OfByte,byte)allocateFrom(java.lang.String,java.nio.charset.Charset)allocateFrom(java.lang.String)SequenceLayout/modules/java.base/java/lang/foreign/SequenceLayout.classflattenflatten()reshapereshape(long[])withElementCountwithElementCount(long)elementCountelementCount()elementLayoutelementLayout()StructLayout/modules/java.base/java/lang/foreign/StructLayout.classUnionLayout/modules/java.base/java/lang/foreign/UnionLayout.classOfBoolean/modules/java.base/java/lang/foreign/ValueLayout$OfBoolean.classOfByte/modules/java.base/java/lang/foreign/ValueLayout$OfByte.classOfChar/modules/java.base/java/lang/foreign/ValueLayout$OfChar.classOfDouble/modules/java.base/java/lang/foreign/ValueLayout$OfDouble.classOfFloat/modules/java.base/java/lang/foreign/ValueLayout$OfFloat.classOfInt/modules/java.base/java/lang/foreign/ValueLayout$OfInt.classOfLong/modules/java.base/java/lang/foreign/ValueLayout$OfLong.classOfShort/modules/java.base/java/lang/foreign/ValueLayout$OfShort.classValueLayout/modules/java.base/java/lang/foreign/ValueLayout.classvarHandle()carriercarrier()orderorder()JAVA_DOUBLE_UNALIGNEDJAVA_FLOAT_UNALIGNEDJAVA_LONG_UNALIGNEDJAVA_INT_UNALIGNEDJAVA_SHORT_UNALIGNEDJAVA_CHAR_UNALIGNEDADDRESS_UNALIGNEDJAVA_DOUBLEJAVA_FLOATJAVA_LONGJAVA_INTJAVA_SHORTJAVA_CHARJAVA_BOOLEANJAVA_BYTEADDRESSFactory/modules/java.base/java/lang/invoke/BoundMethodHandle$Specializer$Factory.classFactory<>/modules/java.base/java/lang/invoke/ClassSpecializer$Factory.classClassSpecializer<BoundMethodHandle,String,SpeciesData>/modules/java.base/java/lang/invoke/ClassSpecializer.classClass<? extends T>List<Class<?>>SequencedCollection<Class<?>>Collection<Class<?>>Iterable<Class<?>>findFactoryfindFactory(java.lang.Class,java.util.List)? extends BoundMethodHandleClass<? extends BoundMethodHandle>chooseFieldNamechooseFieldName(java.lang.Class,int)linkCodeToSpeciesDatalinkCodeToSpeciesData(java.lang.Class,java.lang.invoke.ClassSpecializer.SpeciesData,boolean)SpeciesData<>/modules/java.base/java/lang/invoke/ClassSpecializer$SpeciesData.classClassSpecializer<>loadSpeciesDataFromCodeloadSpeciesDataFromCode(java.lang.Class)linkSpeciesDataToCodelinkSpeciesDataToCode(java.lang.invoke.ClassSpecializer.SpeciesData,java.lang.Class)List<MethodHandle>SequencedCollection<MethodHandle>Collection<MethodHandle>Iterable<MethodHandle>List<NamedFunction>SequencedCollection<NamedFunction>Collection<NamedFunction>Iterable<NamedFunction>makeNominalGettersmakeNominalGetters(java.util.List,java.util.List)generateConcreteSpeciesCodeFilegenerateConcreteSpeciesCodeFile(java.lang.String,java.lang.invoke.ClassSpecializer.SpeciesData)generateConcreteSpeciesCodegenerateConcreteSpeciesCode(java.lang.String,java.lang.invoke.ClassSpecializer.SpeciesData)loadSpeciesloadSpecies(java.lang.invoke.ClassSpecializer.SpeciesData)loadSpecies(java.lang.invoke.BoundMethodHandle.SpeciesData)Factory()Factory<>()Specializer/modules/java.base/java/lang/invoke/BoundMethodHandle$Specializer.classclassNameclassName(java.lang.Class)classBCNameclassBCName(java.lang.String)classBCName(java.lang.Class)classSigclassSig(java.lang.String)classSig(java.lang.Class)methodSigmethodSig(java.lang.invoke.MethodType)makeFactorymakeFactory()topSpeciesKeytopSpeciesKey()newSpeciesDatanewSpeciesData(java.lang.Object)newSpeciesData(java.lang.String)findSpeciesfindSpecies(java.lang.Object)findSpecies(java.lang.String)reflectFieldreflectField(java.lang.Class,java.lang.String)reflectConstructorreflectConstructor(java.lang.Class,java.lang.Class[])Class<K>Class<S>List<MemberName>SequencedCollection<MemberName>Collection<MemberName>Iterable<MemberName>ClassSpecializerClassSpecializer(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.invoke.MethodType,java.lang.invoke.MemberName,java.lang.String,java.util.List)Class<BoundMethodHandle>Class<String>Class<SpeciesData>ClassSpecializer<BoundMethodHandle,String,SpeciesData>(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.invoke.MethodType,java.lang.invoke.MemberName,java.lang.String,java.util.List)transformMethodstransformMethods()topSpeciestopSpecies()baseConstructorTypebaseConstructorType()metaTypemetaType()keyTypekeyType()topClasstopClass()TN_COPY_NO_EXTENDBMH_TRANSFORMSSpeciesData/modules/java.base/java/lang/invoke/BoundMethodHandle$SpeciesData.classderiveSuperClassderiveSuperClass()deriveTypeStringderiveTypeString()deriveClassNamederiveClassName()List<X>SequencedCollection<X>Collection<X>Iterable<X>deriveTransformHelperArgumentsderiveTransformHelperArguments(java.lang.invoke.MemberName,int,java.util.List,java.util.List)deriveTransformHelperderiveTransformHelper(java.lang.invoke.MemberName,int)deriveFieldTypesderiveFieldTypes(java.lang.Object)deriveFieldTypes(java.lang.String)transformHelpertransformHelper(int)gettersgetters()getterFunctionsgetterFunctions()getterFunctiongetterFunction(int)gettergetter(int)speciesCodespeciesCode()isResolvedisResolved()outerouter()fieldCountfieldCount()fieldTypesfieldTypes()key()SpeciesData(java.lang.Object)SpeciesData<>(java.lang.String)extendWithextendWith(java.lang.invoke.LambdaForm.BasicType)SpeciesData(java.lang.invoke.BoundMethodHandle.Specializer,java.lang.String)BoundMethodHandle/modules/java.base/java/lang/invoke/BoundMethodHandle.classspeciesData_LLLLLspeciesData_LLLLL()speciesData_LLLLspeciesData_LLLL()speciesData_LLLspeciesData_LLL()speciesData_LLspeciesData_LL()speciesData_LspeciesData_L()copyWithExtendDcopyWithExtendD(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,double)copyWithExtendFcopyWithExtendF(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,float)copyWithExtendJcopyWithExtendJ(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,long)copyWithExtendIcopyWithExtendI(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,int)copyWithExtendLcopyWithExtendL(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,java.lang.Object)copyWithcopyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)argarg(int)internalValuesinternalValues(int)internalPropertiesinternalProperties(int)speciesDataForspeciesDataFor(java.lang.invoke.LambdaForm)speciesDataspeciesData()makeReinvokermakeReinvoker(java.lang.invoke.MethodHandle)rebindrebind()bindArgumentDbindArgumentD(int,double)bindArgumentFbindArgumentF(int,float)bindArgumentJbindArgumentJ(int,long)bindArgumentIbindArgumentI(int,int)bindArgumentLbindArgumentL(int,java.lang.Object)bindSinglebindSingle(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,java.lang.Object)editoreditor()BoundMethodHandle(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)SPECIALIZERCallSite/modules/java.base/java/lang/invoke/CallSite.classmakeSitemakeSite(java.lang.invoke.MethodHandle,java.lang.String,java.lang.invoke.MethodType,java.lang.Object,java.lang.Class)setTargetVolatilesetTargetVolatile(java.lang.invoke.MethodHandle)getTargetVolatilegetTargetVolatile()setTargetNormalsetTargetNormal(java.lang.invoke.MethodHandle)makeDynamicInvokermakeDynamicInvoker()dynamicInvokerdynamicInvoker()setTargetsetTarget(java.lang.invoke.MethodHandle)getTargetgetTarget()type()CallSite(java.lang.invoke.MethodType,java.lang.invoke.MethodHandle)CallSite(java.lang.invoke.MethodHandle)CallSite(java.lang.invoke.MethodType)ConstantCallSite/modules/java.base/java/lang/invoke/ConstantCallSite.classConstantCallSite(java.lang.invoke.MethodType,java.lang.invoke.MethodHandle)ConstantCallSite(java.lang.invoke.MethodHandle)DelegatingMethodHandle/modules/java.base/java/lang/invoke/DelegatingMethodHandle.classmakeReinvokerFormmakeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,boolean,java.lang.invoke.LambdaForm.NamedFunction,java.lang.invoke.LambdaForm.NamedFunction)makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.invoke.LambdaForm.NamedFunction)internalProperties()internalCallerClassinternalCallerClass()isInvokeSpecialisInvokeSpecial()viewAsTypeviewAsType(java.lang.invoke.MethodType,boolean)isCrackableisCrackable()internalMemberNameinternalMemberName()asTypeUncachedasTypeUncached(java.lang.invoke.MethodType)DelegatingMethodHandle(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)DelegatingMethodHandle(java.lang.invoke.MethodType,java.lang.invoke.MethodHandle)DelegatingMethodHandle(java.lang.invoke.MethodHandle)NF_getTargetAccessor/modules/java.base/java/lang/invoke/DirectMethodHandle$Accessor.classcheckCastcheckCast(java.lang.Object)fieldOffsetfieldTypeConstructor/modules/java.base/java/lang/invoke/DirectMethodHandle$Constructor.classinstanceClassinitMethodInterface/modules/java.base/java/lang/invoke/DirectMethodHandle$Interface.classcheckReceivercheckReceiver(java.lang.Object)Special/modules/java.base/java/lang/invoke/DirectMethodHandle$Special.classStaticAccessor/modules/java.base/java/lang/invoke/DirectMethodHandle$StaticAccessor.classDirectMethodHandle/modules/java.base/java/lang/invoke/DirectMethodHandle.classmakePreparedFieldLambdaFormmakePreparedFieldLambdaForm(byte,boolean,int)ftypeKindftypeKind(java.lang.Class)checkCast(java.lang.Object,java.lang.Object)staticOffsetstaticOffset(java.lang.Object)staticBasestaticBase(java.lang.Object)nullChecknullCheck(java.lang.Object)checkBasecheckBase(java.lang.Object)fieldOffset(java.lang.Object)allocateInstanceallocateInstance(java.lang.Object)constructorMethodconstructorMethod(java.lang.Object)ensureInitializedensureInitialized(java.lang.Object)shouldBeInitializedshouldBeInitialized(java.lang.invoke.MemberName)internalMemberNameEnsureInitinternalMemberNameEnsureInit(java.lang.Object)internalMemberName(java.lang.Object)findDirectMethodHandlefindDirectMethodHandle(java.lang.invoke.LambdaForm.Name)makePreparedLambdaFormmakePreparedLambdaForm(java.lang.invoke.MethodType,int)makeAllocatormakeAllocator(java.lang.Class,java.lang.invoke.MemberName)makemake(java.lang.invoke.MemberName)make(java.lang.Class,java.lang.invoke.MemberName)make(byte,java.lang.Class,java.lang.invoke.MemberName,java.lang.Class)NF_LIMITNF_checkReceiverNF_UNSAFENF_constructorMethodNF_allocateInstanceNF_checkCastNF_staticOffsetNF_staticBaseNF_checkBaseNF_fieldOffsetNF_ensureInitializedNF_internalMemberNameEnsureInitNF_internalMemberNameFT_LIMITFT_CHECKED_REFFT_UNCHECKED_REFFT_LAST_WRAPPERAF_LIMITAF_PUTSTATIC_INITAF_GETSTATIC_INITAF_PUTSTATICAF_GETSTATICAF_PUTFIELDAF_GETFIELDcrackablememberIndirectVarHandle/modules/java.base/java/lang/invoke/IndirectVarHandle.classgetMethodHandleUncachedgetMethodHandleUncached(int)isAccessModeSupportedisAccessModeSupported(java.lang.invoke.VarHandle.AccessMode)checkAccessModeThenIsDirectcheckAccessModeThenIsDirect(java.lang.invoke.VarHandle.AccessDescriptor)withInvokeBehaviorwithInvokeBehavior()withInvokeExactBehaviorwithInvokeExactBehavior()asDirectasDirect()accessModeTypeUncachedaccessModeTypeUncached(java.lang.invoke.VarHandle.AccessType)BiFunction<AccessMode,MethodHandle,MethodHandle>IndirectVarHandle(java.lang.invoke.VarHandle,java.lang.Class,java.lang.Class[],java.util.function.BiFunction)Invokers/modules/java.base/java/lang/invoke/Invokers.classmaybeCustomizemaybeCustomize(java.lang.invoke.MethodHandle)checkCustomizedcheckCustomized(java.lang.invoke.MethodHandle)getCallSiteTargetgetCallSiteTarget(java.lang.invoke.CallSite)callSiteFormcallSiteForm(java.lang.invoke.MethodType,boolean)linkToTargetMethodlinkToTargetMethod(java.lang.invoke.MethodType)linkToCallSiteMethodlinkToCallSiteMethod(java.lang.invoke.MethodType)directVarHandleTargetdirectVarHandleTarget(java.lang.invoke.VarHandle)checkGenericTypecheckGenericType(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)checkExactTypecheckExactType(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)newWrongMethodTypeExceptionnewWrongMethodTypeException(java.lang.invoke.MethodType,java.lang.invoke.MethodType)checkVarHandleExactTypecheckVarHandleExactType(java.lang.invoke.VarHandle,java.lang.invoke.VarHandle.AccessDescriptor)checkVarHandleGenericTypecheckVarHandleGenericType(java.lang.invoke.VarHandle,java.lang.invoke.VarHandle.AccessDescriptor)varHandleInvokeLinkerMethodvarHandleInvokeLinkerMethod(java.lang.invoke.MethodType)invokeHandleForminvokeHandleForm(java.lang.invoke.MethodType,boolean,int)methodHandleInvokeLinkerMethodmethodHandleInvokeLinkerMethod(java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])spreadInvokerspreadInvoker(int)invokeBasicMethodinvokeBasicMethod(java.lang.invoke.MethodType)varHandleMethodExactInvokervarHandleMethodExactInvoker(java.lang.invoke.VarHandle.AccessMode)varHandleMethodInvokervarHandleMethodInvoker(java.lang.invoke.VarHandle.AccessMode)basicInvokerbasicInvoker()genericInvokergenericInvoker()exactInvokerexactInvoker()Invokers(java.lang.invoke.MethodType)INV_LIMITVH_INV_GENERICVH_INV_EXACTINV_BASICINV_GENERICINV_EXACTBasicType/modules/java.base/java/lang/invoke/LambdaForm$BasicType.classEnum<BasicType>Comparable<BasicType>compareTo(java.lang.invoke.LambdaForm.BasicType)EnumDesc<BasicType>DynamicConstantDesc<BasicType>Optional<EnumDesc<BasicType>>Class<BasicType>Enum<BasicType>(java.lang.String,int)isArgBasicTypeCharisArgBasicTypeChar(char)isBasicTypeCharisBasicTypeChar(char)basicTypesOrdbasicTypesOrd(java.lang.Class[])basicTypeCharbasicTypeChar(java.lang.Class)BasicType[]basicTypeOrdsbasicTypeOrds(java.lang.invoke.LambdaForm.BasicType[])basicTypebasicType(java.lang.Class)basicType(char)basicType(byte)basicTypeSlotsbasicTypeSlots()basicTypeWrapperbasicTypeWrapper()basicTypeClassbasicTypeClass()basicTypeChar()btWrapperbtClassbtCharTYPE_LIMITARG_TYPE_LIMITARG_TYPES/modules/java.base/java/lang/invoke/LambdaForm.classALL_TYPESV_TYPED_TYPEF_TYPEJ_TYPEI_TYPEL_TYPE/modules/java.base/java/lang/invoke/LambdaForm$Kind.classcompareTo(java.lang.invoke.LambdaForm.Kind)defaultLambdaNameVARHANDLE_LINKERVARHANDLE_INVOKERVARHANDLE_EXACT_INVOKERGUARD_WITH_CATCHGUARDLOOPSPREADCONVERTCOLLECTORCOLLECTTABLE_SWITCHTRY_FINALLYPUT_DOUBLE_VOLATILEGET_DOUBLE_VOLATILEPUT_DOUBLEGET_DOUBLEPUT_FLOAT_VOLATILEGET_FLOAT_VOLATILEPUT_FLOATGET_FLOATPUT_LONG_VOLATILEGET_LONG_VOLATILEPUT_LONGGET_LONGPUT_SHORT_VOLATILEGET_SHORT_VOLATILEPUT_SHORTGET_SHORTPUT_CHAR_VOLATILEGET_CHAR_VOLATILEPUT_CHARGET_CHARPUT_BYTE_VOLATILEGET_BYTE_VOLATILEPUT_BYTEGET_BYTEPUT_BOOLEAN_VOLATILEGET_BOOLEAN_VOLATILEPUT_BOOLEANGET_BOOLEANPUT_INT_VOLATILEGET_INT_VOLATILEPUT_INTGET_INTPUT_REFERENCE_VOLATILEGET_REFERENCE_VOLATILEPUT_REFERENCEGET_REFERENCEDIRECT_INVOKE_STATIC_INITDIRECT_INVOKE_INTERFACEDIRECT_NEW_INVOKE_SPECIALDIRECT_INVOKE_STATICDIRECT_INVOKE_SPECIAL_IFCDIRECT_INVOKE_SPECIALDIRECT_INVOKE_VIRTUALLINK_TO_CALL_SITELINK_TO_TARGET_METHODGENERIC_INVOKERGENERIC_LINKEREXACT_INVOKEREXACT_LINKERDELEGATEREINVOKERBOUND_REINVOKERIDENTITYZEROGENERICName/modules/java.base/java/lang/invoke/LambdaForm$Name.classequals(java.lang.invoke.LambdaForm.Name)useCountuseCount(java.lang.invoke.LambdaForm.Name)lastUseIndexlastUseIndex(java.lang.invoke.LambdaForm.Name)exprStringexprString()paramStringparamString()debugStringdebugString()isLinkerMethodInvokeisLinkerMethodInvoke()isInvokeBasicisInvokeBasic()refersTo(java.lang.Class,java.lang.String)isConstantZeroisConstantZero()isParamisParam()internArgumentsinternArguments()Name[]replaceNamesreplaceNames(java.lang.invoke.LambdaForm.Name[],java.lang.invoke.LambdaForm.Name[],int,int)replaceNamereplaceName(java.lang.invoke.LambdaForm.Name,java.lang.invoke.LambdaForm.Name)withConstraintwithConstraint(java.lang.Object)cloneWithIndexcloneWithIndex(int)newIndexnewIndex(int)typeChartypeChar()initIndexinitIndex(int)indexindex()Name(java.lang.invoke.LambdaForm.BasicType)Name(int,java.lang.invoke.LambdaForm.BasicType)Name(java.lang.invoke.LambdaForm.NamedFunction,java.lang.Object[])Name(java.lang.invoke.LambdaForm.NamedFunction,java.lang.Object,java.lang.Object)Name(java.lang.invoke.LambdaForm.NamedFunction,java.lang.Object)Name(java.lang.invoke.LambdaForm.NamedFunction)Name(java.lang.invoke.MemberName,java.lang.Object[])Name(java.lang.invoke.MethodType,java.lang.Object[])Name(java.lang.invoke.MethodHandle,java.lang.Object[])constraintfunctionNamedFunction/modules/java.base/java/lang/invoke/LambdaForm$NamedFunction.classintrinsicDataintrinsicData()intrinsicNameintrinsicName()isIdentityisIdentity()arityarity()memberDeclaringClassOrNullmemberDeclaringClassOrNull()member()methodTypemethodType()invokeWithArgumentsTracinginvokeWithArgumentsTracing(java.lang.Object[])invokeWithArgumentsinvokeWithArguments(java.lang.Object[])resolveresolve()resolvedHandleresolvedHandle()NamedFunction(java.lang.invoke.MemberName)NamedFunction(java.lang.reflect.Method)NamedFunction(java.lang.invoke.MethodType)NamedFunction(java.lang.invoke.MemberName,java.lang.invoke.MethodHandle)NamedFunction(java.lang.invoke.MethodHandle)INVOKER_METHOD_TYPELambdaFormconstantZeroconstantZero(java.lang.invoke.LambdaForm.BasicType)identity(java.lang.invoke.LambdaForm.BasicType)zeroFormzeroForm(java.lang.invoke.LambdaForm.BasicType)identityFormidentityForm(java.lang.invoke.LambdaForm.BasicType)arguments(int,java.lang.invoke.MethodType)internArgumentinternArgument(java.lang.invoke.LambdaForm.Name)argumentargument(int,java.lang.invoke.LambdaForm.BasicType)shortenSignatureshortenSignature(java.lang.String)basicTypeSignaturebasicTypeSignature(java.lang.invoke.MethodType)contains(java.lang.invoke.LambdaForm.Name)equals(java.lang.invoke.LambdaForm)debugString(int)traceInterpretertraceInterpreter(java.lang.String,java.lang.Object)traceInterpreter(java.lang.String,java.lang.Object,java.lang.Object[])interpretWithArgumentsTracinginterpretWithArgumentsTracing(java.lang.Object[])interpretNameinterpretName(java.lang.invoke.LambdaForm.Name,java.lang.Object[])interpretWithArgumentsinterpretWithArguments(java.lang.Object[])compileToBytecodecompileToBytecode()prepareprepare()isLoopisLoop(int)isTableSwitchisTableSwitch(int)isTryFinallyisTryFinally(int)isGuardWithCatchisGuardWithCatch(int)isSelectAlternativeisSelectAlternative(int)isValidSignatureisValidSignature(java.lang.String)signatureAritysignatureArity(java.lang.String)basicTypeSignature()expressionCountexpressionCount()parameterConstraintparameterConstraint(int)parameterparameter(int)nameRefsAreLegalnameRefsAreLegal()uncustomizeuncustomize()customizecustomize(java.lang.invoke.MethodHandle)lambdaNamelambdaName()associateWithDebugNameassociateWithDebugName(java.lang.invoke.LambdaForm,java.lang.String)debugNamesdebugNames()createcreate(int,java.lang.invoke.LambdaForm.Name[],boolean,java.lang.invoke.LambdaForm.Kind)create(int,java.lang.invoke.LambdaForm.Name[],java.lang.invoke.LambdaForm.Kind)create(int,java.lang.invoke.LambdaForm.Name[])create(int,java.lang.invoke.LambdaForm.Name[],int,java.lang.invoke.LambdaForm.Kind)create(int,java.lang.invoke.LambdaForm.Name[],int)INTERNED_ARGUMENT_LIMITLAST_RESULTVOID_RESULTtransformCachevmentrynamescustomizedforceInlineresultLambdaFormEditor/modules/java.base/java/lang/invoke/LambdaFormEditor.classpermutedTypesMatchpermutedTypesMatch(int[],java.lang.invoke.LambdaForm.BasicType[],java.lang.invoke.LambdaForm.Name[],int)noteLoopLocalTypesFormnoteLoopLocalTypesForm(int,java.lang.invoke.LambdaForm.BasicType[])permuteArgumentsFormpermuteArgumentsForm(int,int[])filterArgumentsFormfilterArgumentsForm(int,java.lang.invoke.MethodType,int[])foldArgumentsFormfoldArgumentsForm(int,boolean,java.lang.invoke.MethodType,int[])foldArgumentsForm(int,boolean,java.lang.invoke.MethodType)collectReturnValueFormcollectReturnValueForm(java.lang.invoke.MethodType)filterReturnFormfilterReturnForm(java.lang.invoke.LambdaForm.BasicType,boolean)filterRepeatedArgumentFormfilterRepeatedArgumentForm(java.lang.invoke.LambdaForm.BasicType,int[])filterArgumentFormfilterArgumentForm(int,java.lang.invoke.LambdaForm.BasicType)collectArgumentsFormcollectArgumentsForm(int,java.lang.invoke.MethodType)spreadArgumentsFormspreadArgumentsForm(int,java.lang.Class,int)dupArgumentFormdupArgumentForm(int,int)addArgumentFormaddArgumentForm(int,java.lang.invoke.LambdaForm.BasicType)bindArgumentFormbindArgumentForm(int)bindArgumentD(java.lang.invoke.BoundMethodHandle,int,double)bindArgumentF(java.lang.invoke.BoundMethodHandle,int,float)bindArgumentJ(java.lang.invoke.BoundMethodHandle,int,long)bindArgumentI(java.lang.invoke.BoundMethodHandle,int,int)bindArgumentL(java.lang.invoke.BoundMethodHandle,int,java.lang.Object)lambdaFormEditorlambdaFormEditor(java.lang.invoke.LambdaForm)lambdaFormLazyInitializingVarHandle/modules/java.base/java/lang/invoke/LazyInitializingVarHandle.classOptional<VarHandleDesc>target()LazyInitializingVarHandle(java.lang.invoke.VarHandle,java.lang.Class)/modules/java.base/java/lang/invoke/MemberName$Factory.classresolveOrNullresolveOrNull(byte,java.lang.invoke.MemberName,java.lang.Class,int)NoSuchMemberExceptionresolveOrFailresolveOrFail(byte,java.lang.invoke.MemberName,java.lang.Class,int,java.lang.Class)Class<NoSuchMemberException>INSTANCEMemberName/modules/java.base/java/lang/invoke/MemberName.classgetFactorygetFactory()makeAccessExceptionmakeAccessException()makeAccessException(java.lang.String,java.lang.Object)ensureTypeVisibleensureTypeVisible(java.lang.Class)initResolvedinitResolved(boolean)MemberName(byte,java.lang.Class,java.lang.String,java.lang.Object)MemberName(java.lang.Class,java.lang.String,java.lang.invoke.MethodType,byte)MemberName(java.lang.Class,java.lang.String,java.lang.Class,byte)equals(java.lang.invoke.MemberName)getDefinitiongetDefinition()MemberName()makeVarHandleMethodInvokemakeVarHandleMethodInvoke(java.lang.String,java.lang.invoke.MethodType,int)makeVarHandleMethodInvoke(java.lang.String,java.lang.invoke.MethodType)makeMethodHandleInvokemakeMethodHandleInvoke(java.lang.String,java.lang.invoke.MethodType,int)makeMethodHandleInvoke(java.lang.String,java.lang.invoke.MethodType)MemberName(java.lang.Class)isSetterisSetter()isGetterisGetter()MemberName(java.lang.reflect.Field,boolean)MemberName(java.lang.reflect.Field)MemberName(java.lang.reflect.Constructor)asNormalOriginalasNormalOriginal()asConstructorasConstructor()asSpecialasSpecial()MemberName(java.lang.reflect.Method,boolean)MemberName(java.lang.reflect.Method)isTrustedFinalFieldisTrustedFinalField()isPackageisPackage()isTypeisType()isFieldisField()isConstructorisConstructor()isMethodisMethod()isInvocableisInvocable()isVarargsisVarargs()isBridgeisBridge()isAbstractisAbstract()isVolatileisVolatile()canBeStaticallyBoundcanBeStaticallyBound()isFinalisFinal()isProtectedisProtected()isPrivateisPrivate()isPublicisPublic()isStaticisStatic()isVarHandleMethodInvokeNameisVarHandleMethodInvokeName(java.lang.String)isVarHandleMethodInvokeisVarHandleMethodInvoke()isMethodHandleInvokeNameisMethodHandleInvokeName(java.lang.String)isMethodHandleInvokeisMethodHandleInvoke()referenceKindIsConsistentWithreferenceKindIsConsistentWith(int)getReferenceKindgetReferenceKind()getFieldTypegetFieldType()getInvocationTypegetInvocationType()getMethodDescriptorgetMethodDescriptor()getMethodOrFieldTypegetMethodOrFieldType()IS_INVOCABLEALL_KINDSALL_ACCESSTRUSTED_FINALCALLER_SENSITIVEIS_TYPEIS_FIELDIS_CONSTRUCTORIS_METHODRECOGNIZED_MODIFIERSCONSTRUCTOR_NAMEENUMANNOTATIONSYNTHETICVARARGSBRIDGEresolutionPolymorphicSignature/modules/java.base/java/lang/invoke/MethodHandle$PolymorphicSignature.class/modules/java.base/java/lang/invoke/MethodHandle.classMethodHandleFunction<LambdaForm,LambdaForm>updateFormupdateForm(java.util.function.Function)customize()maybeCustomize()debugPrefixdebugPrefix(int)withInternalMemberNamewithInternalMemberName(java.lang.invoke.MemberName,boolean)internalForminternalForm()viewAsTypeChecksviewAsTypeChecks(java.lang.invoke.MethodType,boolean)setVarargssetVarargs(java.lang.invoke.MemberName)standardStringstandardString()Optional<MethodHandleDesc>bindTobindTo(java.lang.Object)asFixedArityasFixedArity()isVarargsCollectorisVarargsCollector()asVarargsCollectorasVarargsCollector(java.lang.Class)asCollectorChecksasCollectorChecks(java.lang.Class,int,int)asCollectorasCollector(int,java.lang.Class,int)asCollector(java.lang.Class,int)withVarargswithVarargs(boolean)asSpreaderasSpreader(int,java.lang.Class,int)asSpreader(java.lang.Class,int)asType(java.lang.invoke.MethodType)List<?>SequencedCollection<?>Collection<?>Iterable<?>invokeWithArguments(java.util.List)linkToNativelinkToNative(java.lang.Object[])linkToInterfacelinkToInterface(java.lang.Object[])linkToSpeciallinkToSpecial(java.lang.Object[])linkToStaticlinkToStatic(java.lang.Object[])linkToVirtuallinkToVirtual(java.lang.Object[])invokeBasicinvokeBasic(java.lang.Object[])invokeinvoke(java.lang.Object[])invokeExactinvokeExact(java.lang.Object[])MethodHandle(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)formArrayAccess/modules/java.base/java/lang/invoke/MethodHandleImpl$ArrayAccess.classEnum<ArrayAccess>Comparable<ArrayAccess>compareTo(java.lang.invoke.MethodHandleImpl.ArrayAccess)EnumDesc<ArrayAccess>DynamicConstantDesc<ArrayAccess>Optional<EnumDesc<ArrayAccess>>Class<ArrayAccess>Enum<ArrayAccess>(java.lang.String,int)intrinsicintrinsic(java.lang.invoke.MethodHandleImpl.ArrayAccess)cacheIndexcacheIndex(java.lang.invoke.MethodHandleImpl.ArrayAccess)objectAccessorobjectAccessor(java.lang.invoke.MethodHandleImpl.ArrayAccess)opNameopName(java.lang.invoke.MethodHandleImpl.ArrayAccess)ArrayAccess[]LENGTHSETGETAsVarargsCollector/modules/java.base/java/lang/invoke/MethodHandleImpl$AsVarargsCollector.classAsVarargsCollector(java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.Class)AsVarargsCollector(java.lang.invoke.MethodHandle,java.lang.Class)CasesHolder/modules/java.base/java/lang/invoke/MethodHandleImpl$CasesHolder.classMethodHandle[]CasesHolder(java.lang.invoke.MethodHandle[])cases/modules/java.base/java/lang/invoke/MethodHandleImpl.classCountingWrapper/modules/java.base/java/lang/invoke/MethodHandleImpl$CountingWrapper.classmaybeStopCountingmaybeStopCounting(java.lang.Object)countDowncountDown()NF_maybeStopCountingIntrinsic/modules/java.base/java/lang/invoke/MethodHandleImpl$Intrinsic.classEnum<Intrinsic>Comparable<Intrinsic>compareTo(java.lang.invoke.MethodHandleImpl.Intrinsic)EnumDesc<Intrinsic>DynamicConstantDesc<Intrinsic>Optional<EnumDesc<Intrinsic>>Class<Intrinsic>Enum<Intrinsic>(java.lang.String,int)Intrinsic[]NONEARRAY_LENGTHARRAY_STOREARRAY_LOADSELECT_ALTERNATIVEIntrinsicMethodHandle/modules/java.base/java/lang/invoke/MethodHandleImpl$IntrinsicMethodHandle.classIntrinsicMethodHandle(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl.Intrinsic,java.lang.Object)IntrinsicMethodHandle(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl.Intrinsic)LoopClauses/modules/java.base/java/lang/invoke/MethodHandleImpl$LoopClauses.classMethodHandle[][]LoopClauses(java.lang.invoke.MethodHandle[][])clausesWrappedMember/modules/java.base/java/lang/invoke/MethodHandleImpl$WrappedMember.classMethodHandleImplgetConstantHandlegetConstantHandle(int)tableSwitchtableSwitch(int,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl.CasesHolder,java.lang.Object[])makeTableSwitchmakeTableSwitch(java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle[])tryFinallytryFinally(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.Object[])makeTryFinallymakeTryFinally(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.Class,java.lang.Class[])Iterator<?>iterateNextiterateNext(java.util.Iterator)iteratePredicateiteratePredicate(java.util.Iterator)initIteratorinitIterator(java.lang.Iterable)countedLoopStepcountedLoopStep(int,int)countedLoopPredicatecountedLoopPredicate(int,int)looploop(java.lang.invoke.LambdaForm.BasicType[],java.lang.invoke.MethodHandleImpl.LoopClauses,java.lang.Object[])makeLoopmakeLoop(java.lang.Class,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)getFunctiongetFunction(byte)assertSameassertSame(java.lang.Object,java.lang.Object)varargsArrayvarargsArray(java.lang.Class,int)varargsArray(int)makeIntrinsicmakeIntrinsic(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,java.lang.invoke.MethodHandleImpl.Intrinsic)makeIntrinsic(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl.Intrinsic,java.lang.Object)makeIntrinsic(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl.Intrinsic)makeWrappedMembermakeWrappedMember(java.lang.invoke.MethodHandle,java.lang.invoke.MemberName,boolean)bindCallerbindCaller(java.lang.invoke.MethodHandle,java.lang.Class)fakeVarHandleInvokefakeVarHandleInvoke(java.lang.invoke.MemberName)fakeMethodHandleInvokefakeMethodHandleInvoke(java.lang.invoke.MemberName)throwExceptionthrowException(java.lang.Throwable)throwException(java.lang.invoke.MethodType)? extends ThrowableClass<? extends Throwable>guardWithCatchguardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])makeGuardWithCatchmakeGuardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)makeGuardWithTestFormmakeGuardWithTestForm(java.lang.invoke.MethodType)makeBlockInliningWrappermakeBlockInliningWrapper(java.lang.invoke.MethodHandle)profileprofile(java.lang.invoke.MethodHandle)makeGuardWithTestmakeGuardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)isCompileConstantisCompileConstant(java.lang.Object)profileBooleanprofileBoolean(boolean,int[])selectAlternativeselectAlternative(boolean,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)checkSpreadArgumentcheckSpreadArgument(java.lang.Object,int)makeVarargsCollectormakeVarargsCollector(java.lang.invoke.MethodHandle,java.lang.Class)valueConversionvalueConversion(java.lang.Class,java.lang.Class,boolean,boolean)makePairwiseConvertmakePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean)computeValueConversionscomputeValueConversions(java.lang.invoke.MethodType,java.lang.invoke.MethodType,boolean,boolean)makePairwiseConvertByEditormakePairwiseConvertByEditor(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)unmatchedArrayAccessunmatchedArrayAccess(java.lang.invoke.MethodHandleImpl.ArrayAccess)makeArrayElementAccessormakeArrayElementAccessor(java.lang.Class,java.lang.invoke.MethodHandleImpl.ArrayAccess)MethodHandleImpl()MH_LIMITMH_VarHandles_handleCheckedExceptionsMH_Array_newInstanceMH_iterateNextMH_iteratePredMH_initIteratorMH_countedLoopStepMH_countedLoopPredMH_selectAlternativeMH_castNF_tableSwitchNF_profileBooleanNF_loopNF_tryFinallyNF_throwExceptionNF_guardWithCatchNF_checkSpreadArgumentMAX_JVM_ARITYFAKE_METHOD_HANDLE_INVOKEMethodHandleInfo/modules/java.base/java/lang/invoke/MethodHandleInfo.classtoString(int,java.lang.Class,java.lang.String,java.lang.invoke.MethodType)referenceKindToStringreferenceKindToString(int)isVarArgsisVarArgs()reflectAsreflectAs(java.lang.Class,java.lang.invoke.MethodHandles.Lookup)REF_invokeInterfaceREF_newInvokeSpecialREF_invokeSpecialREF_invokeStaticREF_invokeVirtualREF_putStaticREF_putFieldREF_getStaticREF_getFieldClassDefiner/modules/java.base/java/lang/invoke/MethodHandles$Lookup$ClassDefiner.classdefineClassAsLookupdefineClassAsLookup(boolean,java.lang.Object)defineClass(boolean,java.lang.Object)defineClassAsLookup(boolean)defineClass(boolean)internalNameinternalName()ClassOption/modules/java.base/java/lang/invoke/MethodHandles$Lookup$ClassOption.classEnum<ClassOption>Comparable<ClassOption>compareTo(java.lang.invoke.MethodHandles.Lookup.ClassOption)EnumDesc<ClassOption>DynamicConstantDesc<ClassOption>Optional<EnumDesc<ClassOption>>Class<ClassOption>Enum<ClassOption>(java.lang.String,int)Set<ClassOption>Collection<ClassOption>Iterable<ClassOption>optionsToFlagoptionsToFlag(java.util.Set)ClassOption[]STRONGNESTMATELookup/modules/java.base/java/lang/invoke/MethodHandles$Lookup.classlinkMethodHandleConstantlinkMethodHandleConstant(byte,java.lang.Class,java.lang.String,java.lang.Object)accessFailedMessageaccessFailedMessage(java.lang.Class,java.lang.invoke.MemberName)checkAccess(byte,java.lang.Class,java.lang.invoke.MemberName)checkFieldcheckField(byte,java.lang.Class,java.lang.invoke.MemberName)checkMethodcheckMethod(byte,java.lang.Class,java.lang.invoke.MemberName)checkSecurityManagercheckSecurityManager(java.lang.Class,java.lang.invoke.MemberName)checkSecurityManager(java.lang.Class)hasFullPrivilegeAccesshasFullPrivilegeAccess()hasPrivateAccesshasPrivateAccess()/modules/java.base/java/lang/invoke/MethodHandles.class"14"14findBoundCallerLookupfindBoundCallerLookup(java.lang.invoke.MemberName)checkMethodNamecheckMethodName(byte,java.lang.String)isClassAccessibleisClassAccessible(java.lang.Class)checkSymbolicClasscheckSymbolicClass(java.lang.Class)resolveOrNull(byte,java.lang.Class,java.lang.String,java.lang.invoke.MethodType)resolveOrNull(byte,java.lang.invoke.MemberName)resolveOrFail(byte,java.lang.invoke.MemberName)resolveOrFail(byte,java.lang.Class,java.lang.String,java.lang.invoke.MethodType)resolveOrFail(byte,java.lang.Class,java.lang.String,java.lang.Class)revealDirectrevealDirect(java.lang.invoke.MethodHandle)unreflectVarHandleunreflectVarHandle(java.lang.reflect.Field)unreflectSetterunreflectSetter(java.lang.reflect.Field)unreflectGetterunreflectGetter(java.lang.reflect.Field)serializableConstructorserializableConstructor(java.lang.Class,java.lang.reflect.Constructor)unreflectConstructorunreflectConstructor(java.lang.reflect.Constructor)unreflectSpecialunreflectSpecial(java.lang.reflect.Method,java.lang.Class)unreflectunreflect(java.lang.reflect.Method)bindbind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)findStaticVarHandlefindStaticVarHandle(java.lang.Class,java.lang.String,java.lang.Class)findStaticSetterfindStaticSetter(java.lang.Class,java.lang.String,java.lang.Class)findStaticGetterfindStaticGetter(java.lang.Class,java.lang.String,java.lang.Class)findVarHandlefindVarHandle(java.lang.Class,java.lang.String,java.lang.Class)findSetterfindSetter(java.lang.Class,java.lang.String,java.lang.Class)findGetterfindGetter(java.lang.Class,java.lang.String,java.lang.Class)findSpecialfindSpecial(java.lang.Class,java.lang.String,java.lang.invoke.MethodType,java.lang.Class)accessClassaccessClass(java.lang.Class)ensureInitialized(java.lang.Class)findConstructorfindConstructor(java.lang.Class,java.lang.invoke.MethodType)findVirtualfindVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)findStaticfindStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)makeHiddenClassDefinermakeHiddenClassDefiner(java.lang.String,byte[],java.util.Set,jdk.internal.util.ClassFileDumper)makeHiddenClassDefiner(byte[],jdk.internal.util.ClassFileDumper)makeClassDefinermakeClassDefiner(java.lang.String,byte[],jdk.internal.util.ClassFileDumper)defineHiddenClassWithClassDatadefineHiddenClassWithClassData(byte[],java.lang.Object,boolean,java.lang.invoke.MethodHandles.Lookup.ClassOption[])defineHiddenClassdefineHiddenClass(byte[],boolean,java.lang.invoke.MethodHandles.Lookup.ClassOption[])defineClass(byte[])dropLookupModedropLookupMode(int)in(java.lang.Class)Lookup(java.lang.Class)lookupModeslookupModes()previousLookupClasspreviousLookupClass()lookupClasslookupClass()ConcurrentHashMap<MemberName,DirectMethodHandle>AbstractMap<MemberName,DirectMethodHandle>Map<MemberName,DirectMethodHandle>ConcurrentMap<MemberName,DirectMethodHandle>LOOKASIDE_TABLEPUBLIC_LOOKUPIMPL_LOOKUPORIGINALUNCONDITIONALPROTECTEDPRIVATEPUBLICMethodHandlesdropCoordinatesdropCoordinates(java.lang.invoke.VarHandle,int,java.lang.Class[])collectCoordinatescollectCoordinates(java.lang.invoke.VarHandle,int,java.lang.invoke.MethodHandle)permuteCoordinatespermuteCoordinates(java.lang.invoke.VarHandle,java.util.List,int[])insertCoordinatesinsertCoordinates(java.lang.invoke.VarHandle,int,java.lang.Object[])filterCoordinatesfilterCoordinates(java.lang.invoke.VarHandle,int,java.lang.invoke.MethodHandle[])filterValuefilterValue(java.lang.invoke.VarHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)tableSwitch(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle[])tryFinally(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)swapArgumentsswapArguments(java.lang.invoke.MethodHandle,int,int)iteratedLoopiteratedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)countedLoopcountedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)countedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)doWhileLoopdoWhileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)whileLoopwhileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)loop(java.lang.invoke.MethodHandle[][])throwException(java.lang.Class,java.lang.Class)catchExceptioncatchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)misMatchedTypesmisMatchedTypes(java.lang.String,java.lang.Object,java.lang.Object)guardWithTestguardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)foldArgumentsWithCombinerfoldArgumentsWithCombiner(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle,int[])filterArgumentsWithCombinerfilterArgumentsWithCombiner(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle,int[])foldArgumentsfoldArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)collectReturnValuecollectReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)filterReturnValuefilterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)collectArgumentscollectArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)filterArgumentfilterArgument(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)filterArgumentsfilterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle[])dropReturndropReturn(java.lang.invoke.MethodHandle)dropArgumentsToMatchdropArgumentsToMatch(java.lang.invoke.MethodHandle,int,java.util.List,int)dropArgumentsdropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class,java.lang.Class)dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class)dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class[])dropArgumentsTrusteddropArgumentsTrusted(java.lang.invoke.MethodHandle,int,java.lang.Class[])dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)insertArgumentsinsertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object[])empty(java.lang.invoke.MethodType)zerozero(java.lang.Class)identity(java.lang.Class)constantconstant(java.lang.Class,java.lang.Object)permuteArgumentCheckspermuteArgumentChecks(int[],java.lang.invoke.MethodType,java.lang.invoke.MethodType)permuteArgumentspermuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int[])explicitCastArgumentsexplicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)basicInvoker(java.lang.invoke.MethodType)varHandleInvokervarHandleInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)varHandleExactInvokervarHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)invokerinvoker(java.lang.invoke.MethodType)exactInvoker(java.lang.invoke.MethodType)spreadInvoker(java.lang.invoke.MethodType,int)byteBufferViewVarHandlebyteBufferViewVarHandle(java.lang.Class,java.nio.ByteOrder)byteArrayViewVarHandlebyteArrayViewVarHandle(java.lang.Class,java.nio.ByteOrder)arrayElementVarHandle(java.lang.Class)arrayElementSetterarrayElementSetter(java.lang.Class)arrayElementGetterarrayElementGetter(java.lang.Class)arrayLength(java.lang.Class)arrayConstructorarrayConstructor(java.lang.Class)reflectAs(java.lang.Class,java.lang.invoke.MethodHandle)classDataAtclassDataAt(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.Class,int)classDataclassData(java.lang.Class)classData(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.Class)privateLookupInprivateLookupIn(java.lang.Class,java.lang.invoke.MethodHandles.Lookup)publicLookuppublicLookup()lookup()IMPL_NAMESMethodType/modules/java.base/java/lang/invoke/MethodType.classOfMethod<Class<?>,MethodType>insertParameterTypes(int,java.lang.Class[])changeParameterType(int,java.lang.Class)changeReturnType(java.lang.Class)Optional<MethodTypeDesc>toFieldDescriptorStringtoFieldDescriptorString(java.lang.Class)toMethodDescriptorStringtoMethodDescriptorString()fromDescriptorfromDescriptor(java.lang.String,java.lang.ClassLoader)fromMethodDescriptorStringfromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)invokersinvokers()parameterSlotCountparameterSlotCount()canConvertcanConvert(java.lang.Class,java.lang.Class)explicitCastEquivalentToAsTypeexplicitCastEquivalentToAsType(java.lang.invoke.MethodType)isConvertibleToisConvertibleTo(java.lang.invoke.MethodType)isViewableAsisViewableAs(java.lang.invoke.MethodType,boolean)effectivelyIdenticalParameterseffectivelyIdenticalParameters(int,java.util.List)lastParameterTypelastParameterType()unwrapunwrap()wrapwrap()isGenericisGeneric()genericgeneric()invokerTypeinvokerType()basicType()eraseerase()hasWrappershasWrappers()hasPrimitiveshasPrimitives()asCollectorTypeasCollectorType(java.lang.Class,int,int)leadingReferenceParameterleadingReferenceParameter()asSpreaderTypeasSpreaderType(java.lang.Class,int,int)replaceParameterTypesreplaceParameterTypes(int,int,java.lang.Class[])appendParameterTypesappendParameterTypes(java.util.List)insertParameterTypes(int,java.util.List)appendParameterTypes(java.lang.Class[])genericMethodTypegenericMethodType(int)genericMethodType(int,boolean)methodType(java.lang.Class,java.lang.Class[],boolean)methodType(java.lang.Class,java.lang.invoke.MethodType)methodType(java.lang.Class,java.lang.Class)methodType(java.lang.Class)methodType(java.lang.Class,java.lang.Class,java.lang.Class[])methodType(java.lang.Class,java.util.List)methodType(java.lang.Class,java.lang.Class[])checkSlotCountcheckSlotCount(int)setFormsetForm(java.lang.invoke.MethodTypeForm)ptypesptypes()rtypertype()form()NO_PTYPESjdk.internal.utilReferencedKeySet<MethodType>/modules/java.base/jdk/internal/util/ReferencedKeySet.class/modules/java.base/jdk/internal/utilAbstractSet<MethodType>AbstractCollection<MethodType>Collection<MethodType>Iterable<MethodType>Set<MethodType>internTableMAX_MH_INVOKER_ARITYMAX_MH_ARITYMethodTypeForm/modules/java.base/java/lang/invoke/MethodTypeForm.classcanonicalizeAllcanonicalizeAll(java.lang.Class[],int)canonicalizecanonicalize(java.lang.Class,int)canonicalize(java.lang.invoke.MethodType,int)findFormfindForm(java.lang.invoke.MethodType)MethodTypeForm(java.lang.invoke.MethodType)setCachedLambdaFormsetCachedLambdaForm(int,java.lang.invoke.LambdaForm)cachedLambdaFormcachedLambdaForm(int)setCachedMethodHandlesetCachedMethodHandle(int,java.lang.invoke.MethodHandle)cachedMethodHandlecachedMethodHandle(int)erasedTypeerasedType()UNWRAPWRAPERASELF_LIMITLF_COLLECTORLF_VH_GEN_LINKERLF_VH_GEN_INVOKERLF_VH_EX_INVOKERLF_INVNATIVELF_INVSPECIAL_IFCLF_LOOPLF_TFLF_GWTLF_GWCLF_MH_LINKERLF_CS_LINKERLF_GEN_INVOKERLF_GEN_LINKERLF_EX_INVOKERLF_EX_LINKERLF_DELEGATE_BLOCK_INLININGLF_DELEGATELF_REBINDLF_INTERPRETLF_INVSTATIC_INITLF_INVINTERFACELF_NEWINVSPECIALLF_INVSPECIALLF_INVSTATICLF_INVVIRTUALSoftReference[]SoftReference<LambdaForm>/modules/java.base/java/lang/ref/SoftReference.classReference<LambdaForm>SoftReference<LambdaForm>[]lambdaFormsMH_UNINIT_CSMH_NF_INVMH_BASIC_INVSoftReference<MethodHandle>Reference<MethodHandle>SoftReference<MethodHandle>[]methodHandlesprimitiveCountMutableCallSite/modules/java.base/java/lang/invoke/MutableCallSite.classMutableCallSite[]syncAllsyncAll(java.lang.invoke.MutableCallSite[])MutableCallSite(java.lang.invoke.MethodHandle)MutableCallSite(java.lang.invoke.MethodType)NativeMethodHandle/modules/java.base/java/lang/invoke/NativeMethodHandle.classinternalNativeEntryPointinternalNativeEntryPoint(java.lang.Object)make(jdk.internal.foreign.abi.NativeEntryPoint)nepOfFieldFOfMethodMTypeDescriptor/modules/java.base/java/lang/invoke/TypeDescriptor.classVarForm/modules/java.base/java/lang/invoke/VarForm.classgetMethodType_VgetMethodType_V(int)MethodType[]getMethodType_V_initgetMethodType_V_init()resolveMemberNameresolveMemberName(int)getMemberNameOrNullgetMemberNameOrNull(int)getMemberNamegetMemberName(int)getMethodType(int)initMethodTypesinitMethodTypes(java.lang.Class,java.lang.Class[])VarForm(java.lang.Class,java.lang.Class[])VarForm(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class[])methodType_V_tableMemberName[]memberName_tablemethodType_tableimplClassAccessDescriptor/modules/java.base/java/lang/invoke/VarHandle$AccessDescriptor.classAccessDescriptor(java.lang.invoke.MethodType,int,int)modesymbolicMethodTypeInvokersymbolicMethodTypeErasedsymbolicMethodTypeExactAccessMode/modules/java.base/java/lang/invoke/VarHandle$AccessMode.classEnum<AccessMode>Comparable<AccessMode>compareTo(java.lang.invoke.VarHandle.AccessMode)EnumDesc<AccessMode>DynamicConstantDesc<AccessMode>Optional<EnumDesc<AccessMode>>Class<AccessMode>Enum<AccessMode>(java.lang.String,int)valueFromOrdinalvalueFromOrdinal(int)valueFromMethodNamevalueFromMethodName(java.lang.String)AccessMode[]atCOUNTGET_AND_BITWISE_XOR_ACQUIREGET_AND_BITWISE_XOR_RELEASEGET_AND_BITWISE_XORGET_AND_BITWISE_AND_ACQUIREGET_AND_BITWISE_AND_RELEASEGET_AND_BITWISE_ANDGET_AND_BITWISE_OR_ACQUIREGET_AND_BITWISE_OR_RELEASEGET_AND_BITWISE_ORGET_AND_ADD_RELEASEGET_AND_ADD_ACQUIREGET_AND_ADDGET_AND_SET_RELEASEGET_AND_SET_ACQUIREGET_AND_SETWEAK_COMPARE_AND_SET_RELEASEWEAK_COMPARE_AND_SET_ACQUIREWEAK_COMPARE_AND_SETWEAK_COMPARE_AND_SET_PLAINCOMPARE_AND_EXCHANGE_RELEASECOMPARE_AND_EXCHANGE_ACQUIRECOMPARE_AND_EXCHANGECOMPARE_AND_SETSET_OPAQUEGET_OPAQUESET_RELEASEGET_ACQUIRESET_VOLATILEGET_VOLATILEAccessType/modules/java.base/java/lang/invoke/VarHandle$AccessType.classEnum<AccessType>Comparable<AccessType>compareTo(java.lang.invoke.VarHandle.AccessType)EnumDesc<AccessType>DynamicConstantDesc<AccessType>Optional<EnumDesc<AccessType>>Class<AccessType>Enum<AccessType>(java.lang.String,int)accessModeTypeaccessModeType(java.lang.Class,java.lang.Class,java.lang.Class[])AccessType[]isMonomorphicInReturnTypeGET_AND_UPDATEVarHandleDesc/modules/java.base/java/lang/invoke/VarHandle$VarHandleDesc.classDynamicConstantDesc<VarHandle>DynamicConstantDesc<VarHandle>(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])varTypevarType()ofArray(java.lang.constant.ClassDesc)ofStaticFieldofStaticField(java.lang.constant.ClassDesc,java.lang.String,java.lang.constant.ClassDesc)ofField(java.lang.constant.ClassDesc,java.lang.String,java.lang.constant.ClassDesc)VarHandle/modules/java.base/java/lang/invoke/VarHandle.classstoreStoreFencestoreStoreFence()loadLoadFenceloadLoadFence()releaseFencereleaseFence()acquireFenceacquireFence()fullFencefullFence()updateVarFormupdateVarForm(java.lang.invoke.VarForm)getMethodHandlegetMethodHandle(int)toMethodHandletoMethodHandle(java.lang.invoke.VarHandle.AccessMode)accessModeTypeUncached(int)accessModeType(int)accessModeType(java.lang.invoke.VarHandle.AccessMode)coordinateTypescoordinateTypes()getAndBitwiseXorReleasegetAndBitwiseXorRelease(java.lang.Object[])getAndBitwiseXorAcquiregetAndBitwiseXorAcquire(java.lang.Object[])getAndBitwiseXorgetAndBitwiseXor(java.lang.Object[])getAndBitwiseAndReleasegetAndBitwiseAndRelease(java.lang.Object[])getAndBitwiseAndAcquiregetAndBitwiseAndAcquire(java.lang.Object[])getAndBitwiseAndgetAndBitwiseAnd(java.lang.Object[])getAndBitwiseOrReleasegetAndBitwiseOrRelease(java.lang.Object[])getAndBitwiseOrAcquiregetAndBitwiseOrAcquire(java.lang.Object[])getAndBitwiseOrgetAndBitwiseOr(java.lang.Object[])getAndAddReleasegetAndAddRelease(java.lang.Object[])getAndAddAcquiregetAndAddAcquire(java.lang.Object[])getAndAddgetAndAdd(java.lang.Object[])getAndSetReleasegetAndSetRelease(java.lang.Object[])getAndSetAcquiregetAndSetAcquire(java.lang.Object[])getAndSetgetAndSet(java.lang.Object[])weakCompareAndSetReleaseweakCompareAndSetRelease(java.lang.Object[])weakCompareAndSetAcquireweakCompareAndSetAcquire(java.lang.Object[])weakCompareAndSetweakCompareAndSet(java.lang.Object[])weakCompareAndSetPlainweakCompareAndSetPlain(java.lang.Object[])compareAndExchangeReleasecompareAndExchangeRelease(java.lang.Object[])compareAndExchangeAcquirecompareAndExchangeAcquire(java.lang.Object[])compareAndExchangecompareAndExchange(java.lang.Object[])compareAndSetcompareAndSet(java.lang.Object[])setReleasesetRelease(java.lang.Object[])getAcquiregetAcquire(java.lang.Object[])setOpaquesetOpaque(java.lang.Object[])getOpaquegetOpaque(java.lang.Object[])setVolatilesetVolatile(java.lang.Object[])getVolatilegetVolatile(java.lang.Object[])set(java.lang.Object[])get(java.lang.Object[])hasInvokeExactBehaviorhasInvokeExactBehavior()VarHandle(java.lang.invoke.VarForm,boolean)VarHandle(java.lang.invoke.VarForm)methodHandleTablemethodTypeTableexactvformArray/modules/java.base/java/lang/invoke/VarHandleBooleans$Array.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)/modules/java.base/java/lang/invoke/VarHandleBooleans.classgetAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,boolean,boolean)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getAcquire(java.lang.invoke.VarHandle,java.lang.Object,int)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getOpaque(java.lang.invoke.VarHandle,java.lang.Object,int)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)getVolatile(java.lang.invoke.VarHandle,java.lang.Object,int)set(java.lang.invoke.VarHandle,java.lang.Object,int,boolean)get(java.lang.invoke.VarHandle,java.lang.Object,int)Array(int,int)FORMashiftabaseFieldInstanceReadOnly/modules/java.base/java/lang/invoke/VarHandleBooleans$FieldInstanceReadOnly.classgetAcquire(java.lang.invoke.VarHandle,java.lang.Object)getOpaque(java.lang.invoke.VarHandle,java.lang.Object)getVolatile(java.lang.invoke.VarHandle,java.lang.Object)get(java.lang.invoke.VarHandle,java.lang.Object)FieldInstanceReadOnly(java.lang.Class,long,java.lang.invoke.VarForm,boolean)FieldInstanceReadOnly(java.lang.Class,long)receiverTypeFieldInstanceReadWrite/modules/java.base/java/lang/invoke/VarHandleBooleans$FieldInstanceReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,boolean)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,boolean)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,boolean,boolean)setRelease(java.lang.invoke.VarHandle,java.lang.Object,boolean)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,boolean)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,boolean)set(java.lang.invoke.VarHandle,java.lang.Object,boolean)FieldInstanceReadWrite(java.lang.Class,long)FieldStaticReadOnly/modules/java.base/java/lang/invoke/VarHandleBooleans$FieldStaticReadOnly.classgetAcquire(java.lang.invoke.VarHandle)getOpaque(java.lang.invoke.VarHandle)getVolatile(java.lang.invoke.VarHandle)get(java.lang.invoke.VarHandle)FieldStaticReadOnly(java.lang.Class,java.lang.Object,long,java.lang.invoke.VarForm,boolean)FieldStaticReadOnly(java.lang.Class,java.lang.Object,long)baseFieldStaticReadWrite/modules/java.base/java/lang/invoke/VarHandleBooleans$FieldStaticReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,boolean)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,boolean)getAndBitwiseXor(java.lang.invoke.VarHandle,boolean)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,boolean)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,boolean)getAndBitwiseAnd(java.lang.invoke.VarHandle,boolean)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,boolean)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,boolean)getAndBitwiseOr(java.lang.invoke.VarHandle,boolean)getAndSetRelease(java.lang.invoke.VarHandle,boolean)getAndSetAcquire(java.lang.invoke.VarHandle,boolean)getAndSet(java.lang.invoke.VarHandle,boolean)weakCompareAndSetRelease(java.lang.invoke.VarHandle,boolean,boolean)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,boolean,boolean)weakCompareAndSet(java.lang.invoke.VarHandle,boolean,boolean)weakCompareAndSetPlain(java.lang.invoke.VarHandle,boolean,boolean)compareAndExchangeRelease(java.lang.invoke.VarHandle,boolean,boolean)compareAndExchangeAcquire(java.lang.invoke.VarHandle,boolean,boolean)compareAndExchange(java.lang.invoke.VarHandle,boolean,boolean)compareAndSet(java.lang.invoke.VarHandle,boolean,boolean)setRelease(java.lang.invoke.VarHandle,boolean)setOpaque(java.lang.invoke.VarHandle,boolean)setVolatile(java.lang.invoke.VarHandle,boolean)set(java.lang.invoke.VarHandle,boolean)FieldStaticReadWrite(java.lang.Class,java.lang.Object,long)VarHandleBooleansVarHandleBooleans()ArrayHandle/modules/java.base/java/lang/invoke/VarHandleByteArrayAsChars$ArrayHandle.classset(java.lang.invoke.VarHandle,java.lang.Object,int,char)/modules/java.base/java/lang/invoke/VarHandleByteArrayAsChars.classindex(byte[],int)ArrayHandle(boolean)ByteArrayViewVarHandle/modules/java.base/java/lang/invoke/VarHandleByteArrayAsChars$ByteArrayViewVarHandle.classByteArrayViewVarHandle(java.lang.invoke.VarForm,boolean,boolean)beByteBufferHandle/modules/java.base/java/lang/invoke/VarHandleByteArrayAsChars$ByteBufferHandle.classsetOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,char)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,char)checkNullHeapBasecheckNullHeapBase(java.lang.Object)address(java.nio.ByteBuffer,int)indexROindexRO(java.nio.ByteBuffer,int)sessionsession(java.nio.ByteBuffer)index(java.nio.ByteBuffer,int)ByteBufferHandle(boolean)VarHandleByteArrayAsCharsconvEndianconvEndian(boolean,char)VarHandleByteArrayAsChars()SCOPED_MEMORY_ACCESSALIGNNIO_ACCESS/modules/java.base/java/lang/invoke/VarHandleByteArrayAsDoubles$ArrayHandle.classset(java.lang.invoke.VarHandle,java.lang.Object,int,double)/modules/java.base/java/lang/invoke/VarHandleByteArrayAsDoubles.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsDoubles$ByteArrayViewVarHandle.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsDoubles$ByteBufferHandle.classgetAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,double)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,double)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,double)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,double,double)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,double)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,double)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,double)VarHandleByteArrayAsDoublesconvEndian(boolean,long)convEndian(boolean,double)VarHandleByteArrayAsDoubles()/modules/java.base/java/lang/invoke/VarHandleByteArrayAsFloats$ArrayHandle.classset(java.lang.invoke.VarHandle,java.lang.Object,int,float)/modules/java.base/java/lang/invoke/VarHandleByteArrayAsFloats.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsFloats$ByteArrayViewVarHandle.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsFloats$ByteBufferHandle.classgetAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,float)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,float)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,float)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,float,float)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,float)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,float)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,float)VarHandleByteArrayAsFloatsconvEndian(boolean,int)convEndian(boolean,float)VarHandleByteArrayAsFloats()/modules/java.base/java/lang/invoke/VarHandleByteArrayAsInts$ArrayHandle.classset(java.lang.invoke.VarHandle,java.lang.Object,int,int)/modules/java.base/java/lang/invoke/VarHandleByteArrayAsInts.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsInts$ByteArrayViewVarHandle.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsInts$ByteBufferHandle.classgetAndBitwiseXorConvEndianWithCASgetAndBitwiseXorConvEndianWithCAS(java.nio.ByteBuffer,int,int)getAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseAndConvEndianWithCASgetAndBitwiseAndConvEndianWithCAS(java.nio.ByteBuffer,int,int)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseOrConvEndianWithCASgetAndBitwiseOrConvEndianWithCAS(java.nio.ByteBuffer,int,int)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndAddConvEndianWithCASgetAndAddConvEndianWithCAS(java.nio.ByteBuffer,int,int)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,int)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,int,int)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,int)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,int)VarHandleByteArrayAsIntsVarHandleByteArrayAsInts()/modules/java.base/java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle.classset(java.lang.invoke.VarHandle,java.lang.Object,int,long)/modules/java.base/java/lang/invoke/VarHandleByteArrayAsLongs.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsLongs$ByteArrayViewVarHandle.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsLongs$ByteBufferHandle.classgetAndBitwiseXorConvEndianWithCAS(java.nio.ByteBuffer,int,long)getAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseAndConvEndianWithCAS(java.nio.ByteBuffer,int,long)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseOrConvEndianWithCAS(java.nio.ByteBuffer,int,long)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndAddConvEndianWithCAS(java.nio.ByteBuffer,int,long)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,long)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,long)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,long,long)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,long)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,long)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,long)VarHandleByteArrayAsLongsVarHandleByteArrayAsLongs()/modules/java.base/java/lang/invoke/VarHandleByteArrayAsShorts$ArrayHandle.classset(java.lang.invoke.VarHandle,java.lang.Object,int,short)/modules/java.base/java/lang/invoke/VarHandleByteArrayAsShorts.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsShorts$ByteArrayViewVarHandle.class/modules/java.base/java/lang/invoke/VarHandleByteArrayAsShorts$ByteBufferHandle.classsetOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,short)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,short)VarHandleByteArrayAsShortsconvEndian(boolean,short)VarHandleByteArrayAsShorts()VarHandleByteArrayBase/modules/java.base/java/lang/invoke/VarHandleByteArrayBase.classnewIllegalStateExceptionForMisalignedAccessnewIllegalStateExceptionForMisalignedAccess(int)VarHandleByteArrayBase()BEBYTE_BUFFER_IS_READ_ONLYBYTE_BUFFER_HBBUFFER_LIMITBUFFER_ADDRESS/modules/java.base/java/lang/invoke/VarHandleBytes$Array.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,byte)/modules/java.base/java/lang/invoke/VarHandleBytes.classgetAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,byte)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,byte)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,byte,byte)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,byte)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,byte)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,byte)set(java.lang.invoke.VarHandle,java.lang.Object,int,byte)/modules/java.base/java/lang/invoke/VarHandleBytes$FieldInstanceReadOnly.class/modules/java.base/java/lang/invoke/VarHandleBytes$FieldInstanceReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,byte)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,byte)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,byte,byte)setRelease(java.lang.invoke.VarHandle,java.lang.Object,byte)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,byte)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,byte)set(java.lang.invoke.VarHandle,java.lang.Object,byte)/modules/java.base/java/lang/invoke/VarHandleBytes$FieldStaticReadOnly.class/modules/java.base/java/lang/invoke/VarHandleBytes$FieldStaticReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,byte)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,byte)getAndBitwiseXor(java.lang.invoke.VarHandle,byte)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,byte)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,byte)getAndBitwiseAnd(java.lang.invoke.VarHandle,byte)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,byte)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,byte)getAndBitwiseOr(java.lang.invoke.VarHandle,byte)getAndAddRelease(java.lang.invoke.VarHandle,byte)getAndAddAcquire(java.lang.invoke.VarHandle,byte)getAndAdd(java.lang.invoke.VarHandle,byte)getAndSetRelease(java.lang.invoke.VarHandle,byte)getAndSetAcquire(java.lang.invoke.VarHandle,byte)getAndSet(java.lang.invoke.VarHandle,byte)weakCompareAndSetRelease(java.lang.invoke.VarHandle,byte,byte)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,byte,byte)weakCompareAndSet(java.lang.invoke.VarHandle,byte,byte)weakCompareAndSetPlain(java.lang.invoke.VarHandle,byte,byte)compareAndExchangeRelease(java.lang.invoke.VarHandle,byte,byte)compareAndExchangeAcquire(java.lang.invoke.VarHandle,byte,byte)compareAndExchange(java.lang.invoke.VarHandle,byte,byte)compareAndSet(java.lang.invoke.VarHandle,byte,byte)setRelease(java.lang.invoke.VarHandle,byte)setOpaque(java.lang.invoke.VarHandle,byte)setVolatile(java.lang.invoke.VarHandle,byte)set(java.lang.invoke.VarHandle,byte)VarHandleBytesVarHandleBytes()/modules/java.base/java/lang/invoke/VarHandleChars$Array.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,char)/modules/java.base/java/lang/invoke/VarHandleChars.classgetAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,char)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,char)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,char,char)/modules/java.base/java/lang/invoke/VarHandleChars$FieldInstanceReadOnly.class/modules/java.base/java/lang/invoke/VarHandleChars$FieldInstanceReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,char)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,char)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,char)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,char)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,char)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,char)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,char)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,char)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,char,char)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,char,char)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,char,char)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,char,char)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,char,char)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,char,char)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,char,char)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,char,char)setRelease(java.lang.invoke.VarHandle,java.lang.Object,char)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,char)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,char)set(java.lang.invoke.VarHandle,java.lang.Object,char)/modules/java.base/java/lang/invoke/VarHandleChars$FieldStaticReadOnly.class/modules/java.base/java/lang/invoke/VarHandleChars$FieldStaticReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,char)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,char)getAndBitwiseXor(java.lang.invoke.VarHandle,char)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,char)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,char)getAndBitwiseAnd(java.lang.invoke.VarHandle,char)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,char)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,char)getAndBitwiseOr(java.lang.invoke.VarHandle,char)getAndAddRelease(java.lang.invoke.VarHandle,char)getAndAddAcquire(java.lang.invoke.VarHandle,char)getAndAdd(java.lang.invoke.VarHandle,char)getAndSetRelease(java.lang.invoke.VarHandle,char)getAndSetAcquire(java.lang.invoke.VarHandle,char)getAndSet(java.lang.invoke.VarHandle,char)weakCompareAndSetRelease(java.lang.invoke.VarHandle,char,char)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,char,char)weakCompareAndSet(java.lang.invoke.VarHandle,char,char)weakCompareAndSetPlain(java.lang.invoke.VarHandle,char,char)compareAndExchangeRelease(java.lang.invoke.VarHandle,char,char)compareAndExchangeAcquire(java.lang.invoke.VarHandle,char,char)compareAndExchange(java.lang.invoke.VarHandle,char,char)compareAndSet(java.lang.invoke.VarHandle,char,char)setRelease(java.lang.invoke.VarHandle,char)setOpaque(java.lang.invoke.VarHandle,char)setVolatile(java.lang.invoke.VarHandle,char)set(java.lang.invoke.VarHandle,char)VarHandleCharsVarHandleChars()/modules/java.base/java/lang/invoke/VarHandleDoubles$Array.classgetAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int,double)/modules/java.base/java/lang/invoke/VarHandleDoubles.classgetAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,double)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int,double)/modules/java.base/java/lang/invoke/VarHandleDoubles$FieldInstanceReadOnly.class/modules/java.base/java/lang/invoke/VarHandleDoubles$FieldInstanceReadWrite.classgetAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,double)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,double)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,double)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,double)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,double)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,double)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,double,double)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,double,double)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,double,double)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,double,double)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,double,double)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,double,double)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,double,double)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,double,double)setRelease(java.lang.invoke.VarHandle,java.lang.Object,double)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,double)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,double)set(java.lang.invoke.VarHandle,java.lang.Object,double)/modules/java.base/java/lang/invoke/VarHandleDoubles$FieldStaticReadOnly.class/modules/java.base/java/lang/invoke/VarHandleDoubles$FieldStaticReadWrite.classgetAndAddRelease(java.lang.invoke.VarHandle,double)getAndAddAcquire(java.lang.invoke.VarHandle,double)getAndAdd(java.lang.invoke.VarHandle,double)getAndSetRelease(java.lang.invoke.VarHandle,double)getAndSetAcquire(java.lang.invoke.VarHandle,double)getAndSet(java.lang.invoke.VarHandle,double)weakCompareAndSetRelease(java.lang.invoke.VarHandle,double,double)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,double,double)weakCompareAndSet(java.lang.invoke.VarHandle,double,double)weakCompareAndSetPlain(java.lang.invoke.VarHandle,double,double)compareAndExchangeRelease(java.lang.invoke.VarHandle,double,double)compareAndExchangeAcquire(java.lang.invoke.VarHandle,double,double)compareAndExchange(java.lang.invoke.VarHandle,double,double)compareAndSet(java.lang.invoke.VarHandle,double,double)setRelease(java.lang.invoke.VarHandle,double)setOpaque(java.lang.invoke.VarHandle,double)setVolatile(java.lang.invoke.VarHandle,double)set(java.lang.invoke.VarHandle,double)VarHandleDoublesVarHandleDoubles()/modules/java.base/java/lang/invoke/VarHandleFloats$Array.classgetAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int,float)/modules/java.base/java/lang/invoke/VarHandleFloats.classgetAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,float)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int,float)/modules/java.base/java/lang/invoke/VarHandleFloats$FieldInstanceReadOnly.class/modules/java.base/java/lang/invoke/VarHandleFloats$FieldInstanceReadWrite.classgetAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,float)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,float)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,float)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,float)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,float)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,float)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,float,float)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,float,float)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,float,float)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,float,float)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,float,float)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,float,float)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,float,float)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,float,float)setRelease(java.lang.invoke.VarHandle,java.lang.Object,float)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,float)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,float)set(java.lang.invoke.VarHandle,java.lang.Object,float)/modules/java.base/java/lang/invoke/VarHandleFloats$FieldStaticReadOnly.class/modules/java.base/java/lang/invoke/VarHandleFloats$FieldStaticReadWrite.classgetAndAddRelease(java.lang.invoke.VarHandle,float)getAndAddAcquire(java.lang.invoke.VarHandle,float)getAndAdd(java.lang.invoke.VarHandle,float)getAndSetRelease(java.lang.invoke.VarHandle,float)getAndSetAcquire(java.lang.invoke.VarHandle,float)getAndSet(java.lang.invoke.VarHandle,float)weakCompareAndSetRelease(java.lang.invoke.VarHandle,float,float)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,float,float)weakCompareAndSet(java.lang.invoke.VarHandle,float,float)weakCompareAndSetPlain(java.lang.invoke.VarHandle,float,float)compareAndExchangeRelease(java.lang.invoke.VarHandle,float,float)compareAndExchangeAcquire(java.lang.invoke.VarHandle,float,float)compareAndExchange(java.lang.invoke.VarHandle,float,float)compareAndSet(java.lang.invoke.VarHandle,float,float)setRelease(java.lang.invoke.VarHandle,float)setOpaque(java.lang.invoke.VarHandle,float)setVolatile(java.lang.invoke.VarHandle,float)set(java.lang.invoke.VarHandle,float)VarHandleFloatsVarHandleFloats()/modules/java.base/java/lang/invoke/VarHandleInts$Array.class/modules/java.base/java/lang/invoke/VarHandleInts.class/modules/java.base/java/lang/invoke/VarHandleInts$FieldInstanceReadOnly.class/modules/java.base/java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,int)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,int)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,int)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,int)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,int)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,int)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,int)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,int)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int)set(java.lang.invoke.VarHandle,java.lang.Object,int)/modules/java.base/java/lang/invoke/VarHandleInts$FieldStaticReadOnly.class/modules/java.base/java/lang/invoke/VarHandleInts$FieldStaticReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,int)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,int)getAndBitwiseXor(java.lang.invoke.VarHandle,int)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,int)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,int)getAndBitwiseAnd(java.lang.invoke.VarHandle,int)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,int)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,int)getAndBitwiseOr(java.lang.invoke.VarHandle,int)getAndAddRelease(java.lang.invoke.VarHandle,int)getAndAddAcquire(java.lang.invoke.VarHandle,int)getAndAdd(java.lang.invoke.VarHandle,int)getAndSetRelease(java.lang.invoke.VarHandle,int)getAndSetAcquire(java.lang.invoke.VarHandle,int)getAndSet(java.lang.invoke.VarHandle,int)weakCompareAndSetRelease(java.lang.invoke.VarHandle,int,int)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,int,int)weakCompareAndSet(java.lang.invoke.VarHandle,int,int)weakCompareAndSetPlain(java.lang.invoke.VarHandle,int,int)compareAndExchangeRelease(java.lang.invoke.VarHandle,int,int)compareAndExchangeAcquire(java.lang.invoke.VarHandle,int,int)compareAndExchange(java.lang.invoke.VarHandle,int,int)compareAndSet(java.lang.invoke.VarHandle,int,int)setRelease(java.lang.invoke.VarHandle,int)setOpaque(java.lang.invoke.VarHandle,int)setVolatile(java.lang.invoke.VarHandle,int)set(java.lang.invoke.VarHandle,int)VarHandleIntsVarHandleInts()/modules/java.base/java/lang/invoke/VarHandleLongs$Array.class/modules/java.base/java/lang/invoke/VarHandleLongs.class/modules/java.base/java/lang/invoke/VarHandleLongs$FieldInstanceReadOnly.class/modules/java.base/java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,long)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,long)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,long)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,long)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,long)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,long)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,long)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,long,long)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,long,long)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,long)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,long)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long)set(java.lang.invoke.VarHandle,java.lang.Object,long)/modules/java.base/java/lang/invoke/VarHandleLongs$FieldStaticReadOnly.class/modules/java.base/java/lang/invoke/VarHandleLongs$FieldStaticReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,long)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,long)getAndBitwiseXor(java.lang.invoke.VarHandle,long)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,long)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,long)getAndBitwiseAnd(java.lang.invoke.VarHandle,long)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,long)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,long)getAndBitwiseOr(java.lang.invoke.VarHandle,long)getAndAddRelease(java.lang.invoke.VarHandle,long)getAndAddAcquire(java.lang.invoke.VarHandle,long)getAndAdd(java.lang.invoke.VarHandle,long)getAndSetRelease(java.lang.invoke.VarHandle,long)getAndSetAcquire(java.lang.invoke.VarHandle,long)getAndSet(java.lang.invoke.VarHandle,long)weakCompareAndSetRelease(java.lang.invoke.VarHandle,long,long)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,long,long)weakCompareAndSet(java.lang.invoke.VarHandle,long,long)weakCompareAndSetPlain(java.lang.invoke.VarHandle,long,long)compareAndExchangeRelease(java.lang.invoke.VarHandle,long,long)compareAndExchangeAcquire(java.lang.invoke.VarHandle,long,long)compareAndExchange(java.lang.invoke.VarHandle,long,long)compareAndSet(java.lang.invoke.VarHandle,long,long)setRelease(java.lang.invoke.VarHandle,long)setOpaque(java.lang.invoke.VarHandle,long)setVolatile(java.lang.invoke.VarHandle,long)set(java.lang.invoke.VarHandle,long)VarHandleLongsVarHandleLongs()/modules/java.base/java/lang/invoke/VarHandleReferences$Array.classgetAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object)/modules/java.base/java/lang/invoke/VarHandleReferences.classgetAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object,java.lang.Object)setRelease(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object)set(java.lang.invoke.VarHandle,java.lang.Object,int,java.lang.Object)reflectiveTypeCheckreflectiveTypeCheck(java.lang.Object[],java.lang.Object)runtimeTypeCheckruntimeTypeCheck(java.lang.invoke.VarHandleReferences.Array,java.lang.Object[],java.lang.Object)Array(int,int,java.lang.Class)/modules/java.base/java/lang/invoke/VarHandleReferences$FieldInstanceReadOnly.classFieldInstanceReadOnly(java.lang.Class,long,java.lang.Class,java.lang.invoke.VarForm,boolean)FieldInstanceReadOnly(java.lang.Class,long,java.lang.Class)/modules/java.base/java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.classgetAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object,java.lang.Object)setRelease(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)set(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)FieldInstanceReadWrite(java.lang.Class,long,java.lang.Class)/modules/java.base/java/lang/invoke/VarHandleReferences$FieldStaticReadOnly.classFieldStaticReadOnly(java.lang.Class,java.lang.Object,long,java.lang.Class,java.lang.invoke.VarForm,boolean)FieldStaticReadOnly(java.lang.Class,java.lang.Object,long,java.lang.Class)/modules/java.base/java/lang/invoke/VarHandleReferences$FieldStaticReadWrite.classgetAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object)getAndSet(java.lang.invoke.VarHandle,java.lang.Object)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,java.lang.Object)setRelease(java.lang.invoke.VarHandle,java.lang.Object)setOpaque(java.lang.invoke.VarHandle,java.lang.Object)setVolatile(java.lang.invoke.VarHandle,java.lang.Object)set(java.lang.invoke.VarHandle,java.lang.Object)FieldStaticReadWrite(java.lang.Class,java.lang.Object,long,java.lang.Class)VarHandleReferencesVarHandleReferences()VarHandleSegmentAsBytes/modules/java.base/java/lang/invoke/VarHandleSegmentAsBytes.classsetOpaque(java.lang.invoke.VarHandle,java.lang.Object,long,byte)getOpaque(java.lang.invoke.VarHandle,java.lang.Object,long)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long,byte)getAcquire(java.lang.invoke.VarHandle,java.lang.Object,long)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long,byte)getVolatile(java.lang.invoke.VarHandle,java.lang.Object,long)set(java.lang.invoke.VarHandle,java.lang.Object,long,byte)get(java.lang.invoke.VarHandle,java.lang.Object,long)offsetPlainoffsetPlain(jdk.internal.foreign.AbstractMemorySegmentImpl,long)offsetNonPlainoffsetNonPlain(jdk.internal.foreign.AbstractMemorySegmentImpl,long,long)checkReadOnlycheckReadOnly(java.lang.Object,boolean)convEndian(boolean,byte)VarHandleSegmentAsBytes(boolean,long,boolean)NON_PLAIN_ACCESS_MIN_ALIGN_MASKVarHandleSegmentAsChars/modules/java.base/java/lang/invoke/VarHandleSegmentAsChars.classsetOpaque(java.lang.invoke.VarHandle,java.lang.Object,long,char)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long,char)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long,char)set(java.lang.invoke.VarHandle,java.lang.Object,long,char)VarHandleSegmentAsChars(boolean,long,boolean)VarHandleSegmentAsDoubles/modules/java.base/java/lang/invoke/VarHandleSegmentAsDoubles.classgetAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,double)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,double)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,double)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,double,double)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,long,double)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long,double)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long,double)set(java.lang.invoke.VarHandle,java.lang.Object,long,double)VarHandleSegmentAsDoubles(boolean,long,boolean)VarHandleSegmentAsFloats/modules/java.base/java/lang/invoke/VarHandleSegmentAsFloats.classgetAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,float)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,float)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,float)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,float,float)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,long,float)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long,float)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long,float)set(java.lang.invoke.VarHandle,java.lang.Object,long,float)VarHandleSegmentAsFloats(boolean,long,boolean)VarHandleSegmentAsInts/modules/java.base/java/lang/invoke/VarHandleSegmentAsInts.classgetAndBitwiseXorConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,int)getAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseAndConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,int)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseOrConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,int)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndAddConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,int)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,int)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,int)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,int,int)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,long,int)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long,int)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long,int)set(java.lang.invoke.VarHandle,java.lang.Object,long,int)VarHandleSegmentAsInts(boolean,long,boolean)VarHandleSegmentAsLongs/modules/java.base/java/lang/invoke/VarHandleSegmentAsLongs.classgetAndBitwiseXorConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,long)getAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseAndConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,long)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseOrConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,long)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndAddConvEndianWithCAS(jdk.internal.foreign.AbstractMemorySegmentImpl,long,long)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,long)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,long,long,long)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,long,long)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long,long)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long,long)set(java.lang.invoke.VarHandle,java.lang.Object,long,long)VarHandleSegmentAsLongs(boolean,long,boolean)VarHandleSegmentAsShorts/modules/java.base/java/lang/invoke/VarHandleSegmentAsShorts.classsetOpaque(java.lang.invoke.VarHandle,java.lang.Object,long,short)setRelease(java.lang.invoke.VarHandle,java.lang.Object,long,short)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,long,short)set(java.lang.invoke.VarHandle,java.lang.Object,long,short)VarHandleSegmentAsShorts(boolean,long,boolean)VarHandleSegmentViewBase/modules/java.base/java/lang/invoke/VarHandleSegmentViewBase.classnewUnsupportedAccessModeForAlignmentnewUnsupportedAccessModeForAlignment(long)VarHandleSegmentViewBase(java.lang.invoke.VarForm,boolean,long,boolean)alignmentMask/modules/java.base/java/lang/invoke/VarHandleShorts$Array.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,short)/modules/java.base/java/lang/invoke/VarHandleShorts.classgetAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,short)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,short)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,int,short,short)/modules/java.base/java/lang/invoke/VarHandleShorts$FieldInstanceReadOnly.class/modules/java.base/java/lang/invoke/VarHandleShorts$FieldInstanceReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseXor(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseAnd(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,java.lang.Object,short)getAndBitwiseOr(java.lang.invoke.VarHandle,java.lang.Object,short)getAndAddRelease(java.lang.invoke.VarHandle,java.lang.Object,short)getAndAddAcquire(java.lang.invoke.VarHandle,java.lang.Object,short)getAndAdd(java.lang.invoke.VarHandle,java.lang.Object,short)getAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,short)getAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,short)getAndSet(java.lang.invoke.VarHandle,java.lang.Object,short)weakCompareAndSetRelease(java.lang.invoke.VarHandle,java.lang.Object,short,short)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,java.lang.Object,short,short)weakCompareAndSet(java.lang.invoke.VarHandle,java.lang.Object,short,short)weakCompareAndSetPlain(java.lang.invoke.VarHandle,java.lang.Object,short,short)compareAndExchangeRelease(java.lang.invoke.VarHandle,java.lang.Object,short,short)compareAndExchangeAcquire(java.lang.invoke.VarHandle,java.lang.Object,short,short)compareAndExchange(java.lang.invoke.VarHandle,java.lang.Object,short,short)compareAndSet(java.lang.invoke.VarHandle,java.lang.Object,short,short)setRelease(java.lang.invoke.VarHandle,java.lang.Object,short)setOpaque(java.lang.invoke.VarHandle,java.lang.Object,short)setVolatile(java.lang.invoke.VarHandle,java.lang.Object,short)set(java.lang.invoke.VarHandle,java.lang.Object,short)/modules/java.base/java/lang/invoke/VarHandleShorts$FieldStaticReadOnly.class/modules/java.base/java/lang/invoke/VarHandleShorts$FieldStaticReadWrite.classgetAndBitwiseXorAcquire(java.lang.invoke.VarHandle,short)getAndBitwiseXorRelease(java.lang.invoke.VarHandle,short)getAndBitwiseXor(java.lang.invoke.VarHandle,short)getAndBitwiseAndAcquire(java.lang.invoke.VarHandle,short)getAndBitwiseAndRelease(java.lang.invoke.VarHandle,short)getAndBitwiseAnd(java.lang.invoke.VarHandle,short)getAndBitwiseOrAcquire(java.lang.invoke.VarHandle,short)getAndBitwiseOrRelease(java.lang.invoke.VarHandle,short)getAndBitwiseOr(java.lang.invoke.VarHandle,short)getAndAddRelease(java.lang.invoke.VarHandle,short)getAndAddAcquire(java.lang.invoke.VarHandle,short)getAndAdd(java.lang.invoke.VarHandle,short)getAndSetRelease(java.lang.invoke.VarHandle,short)getAndSetAcquire(java.lang.invoke.VarHandle,short)getAndSet(java.lang.invoke.VarHandle,short)weakCompareAndSetRelease(java.lang.invoke.VarHandle,short,short)weakCompareAndSetAcquire(java.lang.invoke.VarHandle,short,short)weakCompareAndSet(java.lang.invoke.VarHandle,short,short)weakCompareAndSetPlain(java.lang.invoke.VarHandle,short,short)compareAndExchangeRelease(java.lang.invoke.VarHandle,short,short)compareAndExchangeAcquire(java.lang.invoke.VarHandle,short,short)compareAndExchange(java.lang.invoke.VarHandle,short,short)compareAndSet(java.lang.invoke.VarHandle,short,short)setRelease(java.lang.invoke.VarHandle,short)setOpaque(java.lang.invoke.VarHandle,short)setVolatile(java.lang.invoke.VarHandle,short)set(java.lang.invoke.VarHandle,short)VarHandleShortsVarHandleShorts()VolatileCallSite/modules/java.base/java/lang/invoke/VolatileCallSite.classVolatileCallSite(java.lang.invoke.MethodHandle)VolatileCallSite(java.lang.invoke.MethodType)WrongMethodTypeException/modules/java.base/java/lang/invoke/WrongMethodTypeException.classWrongMethodTypeException(java.lang.Throwable)WrongMethodTypeException(java.lang.String,java.lang.Throwable)WrongMethodTypeException(java.lang.String)WrongMethodTypeException()java.lang.moduleConfiguration/modules/java.base/java/lang/module/Configuration.class/modules/java.base/java/lang/moduleStream<Configuration>BaseStream<Configuration,Stream<Configuration>>configurationsconfigurations()Set<ResolvedModule>Collection<ResolvedModule>Iterable<ResolvedModule>readsreads(java.lang.module.ResolvedModule)Set<ModuleDescriptor>Collection<ModuleDescriptor>Iterable<ModuleDescriptor>descriptorsdescriptors()Optional<ResolvedModule>List<Configuration>SequencedCollection<Configuration>Collection<Configuration>Iterable<Configuration>resolveAndBindresolveAndBind(java.lang.module.ModuleFinder,java.util.List,java.lang.module.ModuleFinder,java.util.Collection)resolve(java.lang.module.ModuleFinder,java.util.List,java.lang.module.ModuleFinder,java.util.Collection)resolveAndBind(java.lang.module.ModuleFinder,java.util.Collection,java.io.PrintStream)resolveAndBind(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder,java.util.Collection)resolve(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder,java.util.Collection)Map<String,Set<String>>Configuration(java.lang.module.ModuleFinder,java.util.Map)targetPlatformtargetPlatform()/modules/java.base/java/lang/module/ModuleDescriptor$Builder.classmainClassmainClass(java.lang.String)version(java.lang.String)version(java.lang.module.ModuleDescriptor.Version)packages(java.util.Set)List<String>SequencedCollection<String>providesprovides(java.lang.String,java.util.List)provides(java.lang.module.ModuleDescriptor.Provides)usesuses(java.lang.String)opensopens(java.lang.String)opens(java.lang.String,java.util.Set)Set<Modifier>Collection<Modifier>Iterable<Modifier>opens(java.util.Set,java.lang.String)opens(java.util.Set,java.lang.String,java.util.Set)opens(java.lang.module.ModuleDescriptor.Opens)exportsexports(java.lang.String)exports(java.lang.String,java.util.Set)exports(java.util.Set,java.lang.String)exports(java.util.Set,java.lang.String,java.util.Set)exports(java.lang.module.ModuleDescriptor.Exports)requiresrequires(java.lang.String)requires(java.util.Set,java.lang.String)requires(java.util.Set,java.lang.String,java.lang.String)requires(java.util.Set,java.lang.String,java.lang.module.ModuleDescriptor.Version)requires(java.lang.module.ModuleDescriptor.Requires)Builder(java.lang.String,boolean,java.util.Set)rawVersionStringMap<String,Provides>Map<String,Opens>Map<String,Exports>Map<String,Requires>automaticopenmodifiersstrictModifier/modules/java.base/java/lang/module/ModuleDescriptor$Exports$Modifier.classEnum<Modifier>Comparable<Modifier>compareTo(java.lang.module.ModuleDescriptor.Exports.Modifier)EnumDesc<Modifier>DynamicConstantDesc<Modifier>Optional<EnumDesc<Modifier>>Class<Modifier>Enum<Modifier>(java.lang.String,int)Modifier[]MANDATEDExports/modules/java.base/java/lang/module/ModuleDescriptor$Exports.classComparable<Exports>compareTo(java.lang.module.ModuleDescriptor.Exports)targetstargets()sourcesource()isQualifiedisQualified()modifiers()/modules/java.base/java/lang/module/ModuleDescriptor$Modifier.classcompareTo(java.lang.module.ModuleDescriptor.Modifier)AUTOMATICOPEN/modules/java.base/java/lang/module/ModuleDescriptor$Opens$Modifier.classcompareTo(java.lang.module.ModuleDescriptor.Opens.Modifier)Opens/modules/java.base/java/lang/module/ModuleDescriptor$Opens.classComparable<Opens>compareTo(java.lang.module.ModuleDescriptor.Opens)Provides/modules/java.base/java/lang/module/ModuleDescriptor$Provides.classComparable<Provides>compareTo(java.lang.module.ModuleDescriptor.Provides)providersproviders()serviceservice()/modules/java.base/java/lang/module/ModuleDescriptor$Requires$Modifier.classcompareTo(java.lang.module.ModuleDescriptor.Requires.Modifier)TRANSITIVERequires/modules/java.base/java/lang/module/ModuleDescriptor$Requires.classComparable<Requires>compareTo(java.lang.module.ModuleDescriptor.Requires)rawCompiledVersionrawCompiledVersion()Optional<Version>compiledVersioncompiledVersion()/modules/java.base/java/lang/module/ModuleDescriptor$Version.classcompareTo(java.lang.module.ModuleDescriptor.Version)ModuleDescriptor/modules/java.base/java/lang/module/ModuleDescriptor.classComparable<ModuleDescriptor>compareTo(java.lang.module.ModuleDescriptor)read(java.nio.ByteBuffer)Supplier<Set<String>>read(java.nio.ByteBuffer,java.util.function.Supplier)read(java.io.InputStream)read(java.io.InputStream,java.util.function.Supplier)newAutomaticModulenewAutomaticModule(java.lang.String)newOpenModulenewOpenModule(java.lang.String)newModulenewModule(java.lang.String)newModule(java.lang.String,java.util.Set)mainClass()toNameAndVersiontoNameAndVersion()rawVersionrawVersion()Set<Provides>Collection<Provides>Iterable<Provides>provides()uses()Set<Opens>Collection<Opens>Iterable<Opens>opens()Set<Exports>Collection<Exports>Iterable<Exports>exports()Set<Requires>Collection<Requires>Iterable<Requires>requires()isAutomaticisAutomatic()isOpen()ModuleDescriptor(java.lang.String,java.lang.module.ModuleDescriptor.Version,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.lang.String,int,boolean)ModuleFinder/modules/java.base/java/lang/module/ModuleFinder.classModuleFinder[]composecompose(java.lang.module.ModuleFinder[])Path[]of(java.nio.file.Path[])ofSystemofSystem()Set<ModuleReference>Collection<ModuleReference>Iterable<ModuleReference>findAllfindAll()Optional<ModuleReference>findfind(java.lang.String)ModuleReader/modules/java.base/java/lang/module/ModuleReader.classreleaserelease(java.nio.ByteBuffer)Optional<ByteBuffer>read(java.lang.String)Optional<InputStream>open(java.lang.String)Optional<URI>ModuleReference/modules/java.base/java/lang/module/ModuleReference.classopen()descriptordescriptor()ModuleReference(java.lang.module.ModuleDescriptor,java.net.URI)ResolvedModule/modules/java.base/java/lang/module/ResolvedModule.classreads()referencereference()ResolvedModule(java.lang.module.Configuration,java.lang.module.ModuleReference)Cleanable/modules/java.base/java/lang/ref/Cleaner$Cleanable.classcleanclean()Cleaner/modules/java.base/java/lang/ref/Cleaner.classregisterregister(java.lang.Object,java.lang.Runnable)create(java.util.concurrent.ThreadFactory)create()implFinalReference/modules/java.base/java/lang/ref/FinalReference.classReference<T>Reference<T>(java.lang.Object,java.lang.ref.ReferenceQueue)Reference<T>(java.lang.Object)FinalReference(java.lang.Object,java.lang.ref.ReferenceQueue)Finalizer/modules/java.base/java/lang/ref/Finalizer.classFinalReference<Object>? super ObjectReferenceQueue<? super Object>Reference<Object>(java.lang.Object,java.lang.ref.ReferenceQueue)Reference<Object>(java.lang.Object)FinalReference<Object>(java.lang.Object,java.lang.ref.ReferenceQueue)startFinalizerThreadstartFinalizerThread(java.lang.ThreadGroup)register(java.lang.Object)ReferenceQueue<>ReferenceQueue<Object>getQueuegetQueue()PhantomReferencePhantomReference(java.lang.Object,java.lang.ref.ReferenceQueue)ReferenceQueueReference<? extends T>? super Reference<? extends T>Consumer<? super Reference<? extends T>>remove(long)pollpoll()enqueue(java.lang.ref.Reference)remove0remove0()remove0(long)poll0poll0()headIsNullheadIsNull()enqueue0enqueue0(java.lang.ref.Reference)ReferenceQueue(int)ReferenceQueue()awaitawait(long)await()signalsignal()ENQUEUEDSoftReferenceSoftReference(java.lang.Object,java.lang.ref.ReferenceQueue)SoftReference(java.lang.Object)Location/modules/java.base/java/lang/reflect/AccessFlag$Location.classEnum<Location>Comparable<Location>compareTo(java.lang.reflect.AccessFlag.Location)EnumDesc<Location>DynamicConstantDesc<Location>Optional<EnumDesc<Location>>Class<Location>Enum<Location>(java.lang.String,int)Location[]MODULE_OPENSMODULE_EXPORTSMODULE_REQUIRESMETHOD_PARAMETERINNER_CLASSAccessFlag/modules/java.base/java/lang/reflect/AccessFlag.classEnum<AccessFlag>Comparable<AccessFlag>compareTo(java.lang.reflect.AccessFlag)EnumDesc<AccessFlag>DynamicConstantDesc<AccessFlag>Optional<EnumDesc<AccessFlag>>Class<AccessFlag>Enum<AccessFlag>(java.lang.String,int)maskToAccessFlagsmaskToAccessFlags(int,java.lang.reflect.AccessFlag.Location)Set<Location>Collection<Location>Iterable<Location>locationslocations(java.lang.reflect.ClassFileFormatVersion)locations()sourceModifiersourceModifier()maskmask()AccessFlag[]STRICTABSTRACTINTERFACENATIVETRANSIENTVOLATILESTATIC_PHASESYNCHRONIZEDSUPERFINALAccessibleObject/modules/java.base/java/lang/reflect/AccessibleObject.classgetRootgetRoot()verifyAccessverifyAccess(java.lang.Class,java.lang.Class,java.lang.Class,int)checkAccess(java.lang.Class,java.lang.Class,java.lang.Class,int)AccessibleObject()canAccesscanAccess(java.lang.Object)isAccessibleisAccessible()toShortStringtoShortString()checkCanSetAccessiblecheckCanSetAccessible(java.lang.Class,java.lang.Class)checkCanSetAccessible(java.lang.Class)trySetAccessibletrySetAccessible()setAccessible0setAccessible0(boolean)setAccessiblesetAccessible(boolean)AccessibleObject[]setAccessible(java.lang.reflect.AccessibleObject[],boolean)checkPermission()accessCheckCachereflectionFactoryoverrideAnnotatedElement/modules/java.base/java/lang/reflect/AnnotatedElement.classAnnotatedType/modules/java.base/java/lang/reflect/AnnotatedType.classgetAnnotatedOwnerTypegetAnnotatedOwnerType()ClassFileFormatVersion/modules/java.base/java/lang/reflect/ClassFileFormatVersion.classEnum<ClassFileFormatVersion>Comparable<ClassFileFormatVersion>compareTo(java.lang.reflect.ClassFileFormatVersion)EnumDesc<ClassFileFormatVersion>DynamicConstantDesc<ClassFileFormatVersion>Optional<EnumDesc<ClassFileFormatVersion>>Class<ClassFileFormatVersion>Enum<ClassFileFormatVersion>(java.lang.String,int)fromMajorfromMajor(int)runtimeVersionruntimeVersion()valueOf(java.lang.Runtime.Version)latestlatest()ClassFileFormatVersion[]RELEASE_23RELEASE_22RELEASE_21RELEASE_20RELEASE_19RELEASE_18RELEASE_17RELEASE_16RELEASE_15RELEASE_14RELEASE_13RELEASE_12RELEASE_11RELEASE_10RELEASE_9RELEASE_8RELEASE_7RELEASE_6RELEASE_5RELEASE_4RELEASE_3RELEASE_2RELEASE_1RELEASE_0getAnnotatedReceiverTypegetAnnotatedReceiverType()getAnnotatedReturnTypegetAnnotatedReturnType()handleParameterNumberMismatchhandleParameterNumberMismatch(int,java.lang.Class[])Annotation[][]getParameterAnnotationsgetParameterAnnotations()getRawParameterAnnotationsgetRawParameterAnnotations()getSlotgetSlot()setConstructorAccessorsetConstructorAccessor(jdk.internal.reflect.ConstructorAccessor)getConstructorAccessorgetConstructorAccessor()newInstanceWithCallernewInstanceWithCaller(java.lang.Object[],boolean,java.lang.Class)newInstance(java.lang.Object[])specificToGenericStringHeaderspecificToGenericStringHeader(java.lang.StringBuilder)specificToStringHeaderspecificToStringHeader(java.lang.StringBuilder)getGenericExceptionTypesgetGenericExceptionTypes()getExceptionTypesgetExceptionTypes()getGenericParameterTypesgetGenericParameterTypes()getParameterCountgetParameterCount()getParameterTypesgetParameterTypes()getSharedExceptionTypesgetSharedExceptionTypes()getSharedParameterTypesgetSharedParameterTypes()TypeVariable<Constructor>TypeVariable<Constructor>[]getAnnotationBytesgetAnnotationBytes()hasGenericInformationhasGenericInformation()copy()Constructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])getGenericInfogetGenericInfo()Executable/modules/java.base/java/lang/reflect/Executable.classgetAnnotatedExceptionTypesgetAnnotatedExceptionTypes()getAnnotatedParameterTypesgetAnnotatedParameterTypes()parameterizeparameterize(java.lang.Class)getAnnotatedReturnType0getAnnotatedReturnType0(java.lang.reflect.Type)sharedGetParameterAnnotationssharedGetParameterAnnotations(java.lang.Class[],byte[])getTypeAnnotationBytesgetTypeAnnotationBytes()getTypeAnnotationBytes0getTypeAnnotationBytes0()hasRealParameterDatahasRealParameterData()Parameter[]getParametersgetParameters()getAllGenericParameterTypesgetAllGenericParameterTypes()TypeVariable<?>[]sharedToGenericStringsharedToGenericString(int,boolean)sharedToStringsharedToString(int,boolean,java.lang.Class[],java.lang.Class[])printModifiersIfNonzeroprintModifiersIfNonzero(java.lang.StringBuilder,int,boolean)parseParameterAnnotationsparseParameterAnnotations(byte[])equalParamTypesequalParamTypes(java.lang.Class[],java.lang.Class[])Executable()Field/modules/java.base/java/lang/reflect/Field.classgetAnnotatedTypegetAnnotatedType()isTrustedFinalisTrustedFinal()setDoublesetDouble(java.lang.Object,double)setFloatsetFloat(java.lang.Object,float)setLongsetLong(java.lang.Object,long)setIntsetInt(java.lang.Object,int)setShortsetShort(java.lang.Object,short)setCharsetChar(java.lang.Object,char)setBytesetByte(java.lang.Object,byte)setBooleansetBoolean(java.lang.Object,boolean)set(java.lang.Object,java.lang.Object)getDoublegetDouble(java.lang.Object)getFloatgetFloat(java.lang.Object)getLong(java.lang.Object)getIntgetInt(java.lang.Object)getShortgetShort(java.lang.Object)getChargetChar(java.lang.Object)getBytegetByte(java.lang.Object)getBoolean(java.lang.Object)getGenericTypegetGenericType()isEnumConstantisEnumConstant()Field(java.lang.Class,java.lang.String,java.lang.Class,int,boolean,int,java.lang.String,byte[])GenericDeclaration/modules/java.base/java/lang/reflect/GenericDeclaration.classInvocationTargetException/modules/java.base/java/lang/reflect/InvocationTargetException.classgetTargetExceptiongetTargetException()InvocationTargetException(java.lang.Throwable,java.lang.String)InvocationTargetException(java.lang.Throwable)InvocationTargetException()Member/modules/java.base/java/lang/reflect/Member.classDECLAREDMethod/modules/java.base/java/lang/reflect/Method.classgetDefaultValuegetDefaultValue()setMethodAccessorsetMethodAccessor(jdk.internal.reflect.MethodAccessor)getMethodAccessorgetMethodAccessor()isDefaultisDefault()invoke(java.lang.Object,java.lang.Object[])toShortSignaturetoShortSignature()getGenericReturnTypegetGenericReturnType()getReturnTypegetReturnType()TypeVariable<Method>TypeVariable<Method>[]leafCopyleafCopy()Method(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,int,java.lang.String,byte[],byte[],byte[])Parameter/modules/java.base/java/lang/reflect/Parameter.classisImplicitisImplicit()getParameterizedTypegetParameterizedType()getRealNamegetRealName()getDeclaringExecutablegetDeclaringExecutable()isNamePresentisNamePresent()Parameter(java.lang.String,int,java.lang.reflect.Executable,int)ParameterizedType/modules/java.base/java/lang/reflect/ParameterizedType.classgetOwnerTypegetOwnerType()getRawTypegetRawType()getActualTypeArgumentsgetActualTypeArguments()RecordComponent/modules/java.base/java/lang/reflect/RecordComponent.classgetDeclaringRecordgetDeclaringRecord()getAccessorgetAccessor()getGenericSignaturegetGenericSignature()Type/modules/java.base/java/lang/reflect/Type.classTypeVariableDgetAnnotatedBoundsgetAnnotatedBounds()getGenericDeclarationgetGenericDeclaration()getBoundsgetBounds()WildcardType/modules/java.base/java/lang/reflect/WildcardType.classgetLowerBoundsgetLowerBounds()getUpperBoundsgetUpperBounds()java.mathBigDecimal/modules/java.base/java/math/BigDecimal.class/modules/java.base/java/mathComparable<BigDecimal>compareTo(java.math.BigDecimal)scaledTenPowscaledTenPow(int,int,int)longDigitLengthlongDigitLength(long)ulpulp()byteValueExactbyteValueExact()shortValueExactshortValueExact()intValueExactintValueExact()longValueExactlongValueExact()toBigIntegerExacttoBigIntegerExact()toBigIntegertoBigInteger()toPlainStringtoPlainString()toEngineeringStringtoEngineeringString()max(java.math.BigDecimal)min(java.math.BigDecimal)stripTrailingZerosstripTrailingZeros()scaleByPowerOfTenscaleByPowerOfTen(int)movePointRightmovePointRight(int)movePointLeftmovePointLeft(int)setScalesetScale(int)setScale(int,int)setScale(int,java.math.RoundingMode)roundround(java.math.MathContext)unscaledValueunscaledValue()precisionprecision()scale()signum()plusplus(java.math.MathContext)plus()negatenegate(java.math.MathContext)negate()absabs(java.math.MathContext)abs()powpow(int,java.math.MathContext)pow(int)sqrtsqrt(java.math.MathContext)BigDecimal[]divideAndRemainderdivideAndRemainder(java.math.BigDecimal,java.math.MathContext)divideAndRemainder(java.math.BigDecimal)remainderremainder(java.math.BigDecimal,java.math.MathContext)remainder(java.math.BigDecimal)divideToIntegralValuedivideToIntegralValue(java.math.BigDecimal,java.math.MathContext)divideToIntegralValue(java.math.BigDecimal)dividedivide(java.math.BigDecimal,java.math.MathContext)divide(java.math.BigDecimal)divide(java.math.BigDecimal,java.math.RoundingMode)divide(java.math.BigDecimal,int)divide(java.math.BigDecimal,int,java.math.RoundingMode)divide(java.math.BigDecimal,int,int)multiplymultiply(java.math.BigDecimal,java.math.MathContext)multiply(java.math.BigDecimal)subtractsubtract(java.math.BigDecimal,java.math.MathContext)subtract(java.math.BigDecimal)addadd(java.math.BigDecimal,java.math.MathContext)add(java.math.BigDecimal)zeroValueOfzeroValueOf(int)valueOf(java.math.BigInteger,int,int)valueOf(long,int,int)valueOf(long,int)BigDecimal(long,java.math.MathContext)BigDecimal(long)BigDecimal(int,java.math.MathContext)BigDecimal(int)BigDecimal(java.math.BigInteger,int,java.math.MathContext)BigDecimal(java.math.BigInteger,int)BigDecimal(java.math.BigInteger,java.math.MathContext)BigDecimal(java.math.BigInteger)BigDecimal(double,java.math.MathContext)BigDecimal(double)BigDecimal(java.lang.String,java.math.MathContext)BigDecimal(java.lang.String)BigDecimal(char[],java.math.MathContext)BigDecimal(char[])BigDecimal(char[],int,int,java.math.MathContext)BigDecimal(char[],int,int)BigDecimal(java.math.BigInteger,long,int,int)ROUND_UNNECESSARYROUND_HALF_EVENROUND_HALF_DOWNROUND_HALF_UPROUND_FLOORROUND_CEILINGROUND_DOWNROUND_UPTENTWOONEINFLATEDBigInteger/modules/java.base/java/math/BigInteger.classComparable<BigInteger>compareTo(java.math.BigInteger)toByteArraytoByteArray()max(java.math.BigInteger)min(java.math.BigInteger)compareMagnitudecompareMagnitude(long)compareMagnitude(java.math.BigInteger)isProbablePrimeisProbablePrime(int)bitCount()bitLengthbitLength()getLowestSetBitgetLowestSetBit()flipBitflipBit(int)clearBitclearBit(int)setBitsetBit(int)testBittestBit(int)andNotandNot(java.math.BigInteger)notnot()xorxor(java.math.BigInteger)oror(java.math.BigInteger)andand(java.math.BigInteger)javaIncrementjavaIncrement(int[])shiftRightshiftRight(int)shiftLeftshiftLeft(int)modInversemodInverse(java.math.BigInteger)addOneaddOne(int[],int,int,int)mulAddmulAdd(int[],int[],int,int,int)modPowmodPow(java.math.BigInteger,java.math.BigInteger)modmod(java.math.BigInteger)primitiveLeftShiftprimitiveLeftShift(int[],int,int)primitiveRightShiftprimitiveRightShift(int[],int,int)bitLengthForIntbitLengthForInt(int)gcdgcd(java.math.BigInteger)BigInteger[]sqrtAndRemaindersqrtAndRemainder()sqrt()remainder(java.math.BigInteger)divideAndRemainder(java.math.BigInteger)divide(java.math.BigInteger)multiply(long)parallelMultiplyparallelMultiply(java.math.BigInteger)multiply(java.math.BigInteger)subtract(java.math.BigInteger)add(long)add(java.math.BigInteger)BigInteger(int[],int)primeToCertaintyprimeToCertainty(int,java.util.Random)nextProbablePrimenextProbablePrime()probablePrimeprobablePrime(int,java.util.Random)BigInteger(int,int,java.util.Random)BigInteger(int,java.util.Random)BigInteger(java.lang.String)BigInteger(char[],int,int)BigInteger(java.lang.String,int)BigInteger(int,byte[])BigInteger(int,byte[],int,int)BigInteger(byte[])BigInteger(byte[],int,int)bnExpModThreshTableBURNIKEL_ZIEGLER_OFFSETBURNIKEL_ZIEGLER_THRESHOLDLONG_MASKmagMathContext/modules/java.base/java/math/MathContext.classgetRoundingModegetRoundingMode()getPrecisiongetPrecision()MathContext(java.lang.String)MathContext(int,java.math.RoundingMode)MathContext(int)roundingModeDECIMAL128DECIMAL64DECIMAL32UNLIMITEDRoundingMode/modules/java.base/java/math/RoundingMode.classEnum<RoundingMode>Comparable<RoundingMode>compareTo(java.math.RoundingMode)EnumDesc<RoundingMode>DynamicConstantDesc<RoundingMode>Optional<EnumDesc<RoundingMode>>Class<RoundingMode>Enum<RoundingMode>(java.lang.String,int)RoundingMode[]oldModeUNNECESSARYHALF_EVENHALF_DOWNHALF_UPFLOORCEILINGDOWNUPjava.netContentHandler/modules/java.base/java/net/ContentHandler.class/modules/java.base/java/netgetContentgetContent(java.net.URLConnection,java.lang.Class[])getContent(java.net.URLConnection)ContentHandler()ContentHandlerFactory/modules/java.base/java/net/ContentHandlerFactory.classcreateContentHandlercreateContentHandler(java.lang.String)FileNameMap/modules/java.base/java/net/FileNameMap.classgetContentTypeForgetContentTypeFor(java.lang.String)Inet4Address/modules/java.base/java/net/Inet4Address.classnumericToTextFormatnumericToTextFormat(byte[])getHostAddressgetHostAddress()addressValueaddressValue()getAddressgetAddress()isMCOrgLocalisMCOrgLocal()isMCSiteLocalisMCSiteLocal()isMCLinkLocalisMCLinkLocal()isMCNodeLocalisMCNodeLocal()isMCGlobalisMCGlobal()isSiteLocalAddressisSiteLocalAddress()isLinkLocalAddressisLinkLocalAddress()isLoopbackAddressisLoopbackAddress()isAnyLocalAddressisAnyLocalAddress()isMulticastAddressisMulticastAddress()parseAddressStringparseAddressString(java.lang.String,boolean)ofPosixLiteralofPosixLiteral(java.lang.String)ofLiteralofLiteral(java.lang.String)Inet4Address(java.lang.String,int)Inet4Address(java.lang.String,byte[])Inet4Address()INADDRSZInet4AddressImpl/modules/java.base/java/net/Inet4AddressImpl.classisReachableisReachable(java.net.InetAddress,int,java.net.NetworkInterface,int)loopbackAddressloopbackAddress()anyLocalAddressanyLocalAddress()getHostByAddrgetHostByAddr(byte[])InetAddress[]lookupAllHostAddrlookupAllHostAddr(java.lang.String,java.net.spi.InetAddressResolver.LookupPolicy)getLocalHostNamegetLocalHostName()Inet4AddressImpl()Inet6Address/modules/java.base/java/net/Inet6Address.classisIPv4CompatibleAddressisIPv4CompatibleAddress()getScopedInterfacegetScopedInterface()getScopeIdgetScopeId()addressBytesaddressBytes()isSiteLocalAddress(byte[])isLinkLocalAddress(byte[])getByAddressgetByAddress(java.lang.String,byte[],int)getByAddress(java.lang.String,byte[],java.net.NetworkInterface)Inet6Address(java.lang.String,byte[],java.lang.String)Inet6Address(java.lang.String,byte[],java.net.NetworkInterface)Inet6Address(java.lang.String,byte[])Inet6Address(java.lang.String,byte[],int)Inet6Address()Inet6AddressImpl/modules/java.base/java/net/Inet6AddressImpl.classInet6AddressImpl()InetAddressHolder/modules/java.base/java/net/InetAddress$InetAddressHolder.classgetFamilygetFamily()getOriginalHostNamegetOriginalHostName()getHostNamegetHostName()initinit(java.lang.String,int)InetAddressHolder(java.lang.String,int,int)InetAddressHolder()familyhostNameoriginalHostNameInetAddress/modules/java.base/java/net/InetAddress.classgetLocalHostgetLocalHost()getByAddress(byte[])getAddressesFromNameServicegetAddressesFromNameService(java.lang.String)getAllByName0getAllByName0(java.lang.String,boolean)getLoopbackAddressgetLoopbackAddress()getAllByNamegetAllByName(java.lang.String)getByNamegetByName(java.lang.String)getByAddress(java.lang.String,byte[])getCanonicalHostNamegetCanonicalHostName()getHostName(boolean)isReachable(java.net.NetworkInterface,int,int)isReachable(int)InetAddress()ipv6AddressesFirstipv6AddressesFirst(int)ipv4AddressesFirstipv4AddressesFirst(int)systemAddressesOrdersystemAddressesOrder(int)holderholder()PLATFORM_LOOKUP_POLICYIPv6IPv4InetAddressImpl/modules/java.base/java/net/InetAddressImpl.classInterfaceAddress/modules/java.base/java/net/InterfaceAddress.classgetNetworkPrefixLengthgetNetworkPrefixLength()getBroadcastgetBroadcast()InterfaceAddress()MalformedURLException/modules/java.base/java/net/MalformedURLException.classMalformedURLException(java.lang.String)MalformedURLException()NetworkInterface/modules/java.base/java/net/NetworkInterface.classgetDefaultgetDefault()getMTUgetMTU()getHardwareAddressgetHardwareAddress()supportsMulticastsupportsMulticast()isPointToPointisPointToPoint()isLoopbackisLoopback()isUpisUp()isBoundInetAddressisBoundInetAddress(java.net.InetAddress)Stream<NetworkInterface>BaseStream<NetworkInterface,Stream<NetworkInterface>>networkInterfacesnetworkInterfaces()Enumeration<NetworkInterface>getNetworkInterfacesgetNetworkInterfaces()getByInetAddressgetByInetAddress(java.net.InetAddress)getByIndexgetByIndex(int)getDisplayNamegetDisplayName()getIndexgetIndex()subInterfacessubInterfaces()getSubInterfacesgetSubInterfaces()List<InterfaceAddress>SequencedCollection<InterfaceAddress>Collection<InterfaceAddress>Iterable<InterfaceAddress>getInterfaceAddressesgetInterfaceAddresses()Stream<InetAddress>BaseStream<InetAddress,Stream<InetAddress>>inetAddressesinetAddresses()Enumeration<InetAddress>getInetAddressesgetInetAddresses()NetworkInterface(java.lang.String,int,java.net.InetAddress[])NetworkInterface()/modules/java.base/java/net/Proxy$Type.classEnum<Type>Comparable<Type>compareTo(java.net.Proxy.Type)EnumDesc<Type>DynamicConstantDesc<Type>Optional<EnumDesc<Type>>Class<Type>Enum<Type>(java.lang.String,int)SOCKSHTTPDIRECTProxy/modules/java.base/java/net/Proxy.classProxy(java.net.Proxy.Type,java.net.SocketAddress)NO_PROXYSocketAddress/modules/java.base/java/net/SocketAddress.classSocketAddress()SocketException/modules/java.base/java/net/SocketException.classSocketException(java.lang.Throwable)SocketException(java.lang.String,java.lang.Throwable)SocketException()SocketException(java.lang.String)URI/modules/java.base/java/net/URI.classComparable<URI>compareTo(java.net.URI)toASCIIStringtoASCIIString()getFragmentgetFragment()getRawFragmentgetRawFragment()getQuerygetQuery()getRawQuerygetRawQuery()getRawPathgetRawPath()getPortgetPort()getHostgetHost()getUserInfogetUserInfo()getRawUserInfogetRawUserInfo()getAuthoritygetAuthority()getRawAuthoritygetRawAuthority()getSchemeSpecificPartgetSchemeSpecificPart()getRawSchemeSpecificPartgetRawSchemeSpecificPart()isOpaqueisOpaque()getSchemegetScheme()relativizerelativize(java.net.URI)resolve(java.lang.String)resolve(java.net.URI)normalizenormalize()parseServerAuthorityparseServerAuthority()create(java.lang.String)URI(java.lang.String,java.lang.String)URI(java.lang.String,java.lang.String,java.lang.String)URI(java.lang.String,java.lang.String,java.lang.String,java.lang.String)URI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)URI(java.lang.String)URISyntaxException/modules/java.base/java/net/URISyntaxException.classgetReasongetReason()getInputgetInput()URISyntaxException(java.lang.String,java.lang.String)URISyntaxException(java.lang.String,java.lang.String,int)URL/modules/java.base/java/net/URL.classisBuiltinStreamHandlerisBuiltinStreamHandler(java.net.URLStreamHandler)getURLStreamHandlergetURLStreamHandler(java.lang.String)isOverrideableisOverrideable(java.lang.String)lowerCaseProtocollowerCaseProtocol(java.lang.String)setURLStreamHandlerFactorysetURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)getContent(java.lang.Class[])getContent()openStreamopenStream()openConnectionopenConnection(java.net.Proxy)openConnection()toExternalFormtoExternalForm()sameFilesameFile(java.net.URL)getRefgetRef()getFilegetFile()getProtocolgetProtocol()getDefaultPortgetDefaultPort()set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)of(java.net.URI,java.net.URLStreamHandler)URL(java.net.URL,java.lang.String,java.net.URLStreamHandler)"20"20URL(java.net.URL,java.lang.String)URL(java.lang.String)URL(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)URL(java.lang.String,java.lang.String,java.lang.String)URL(java.lang.String,java.lang.String,int,java.lang.String)handlerBUILTIN_HANDLERS_PREFIXURLConnection/modules/java.base/java/net/URLConnection.classguessContentTypeFromStreamguessContentTypeFromStream(java.io.InputStream)guessContentTypeFromNameguessContentTypeFromName(java.lang.String)setContentHandlerFactorysetContentHandlerFactory(java.net.ContentHandlerFactory)getDefaultRequestPropertygetDefaultRequestProperty(java.lang.String)setDefaultRequestPropertysetDefaultRequestProperty(java.lang.String,java.lang.String)Map<String,List<String>>getRequestPropertiesgetRequestProperties()getRequestPropertygetRequestProperty(java.lang.String)addRequestPropertyaddRequestProperty(java.lang.String,java.lang.String)setRequestPropertysetRequestProperty(java.lang.String,java.lang.String)getDefaultUseCachesgetDefaultUseCaches(java.lang.String)setDefaultUseCachessetDefaultUseCaches(java.lang.String,boolean)setDefaultUseCaches(boolean)getDefaultUseCaches()getIfModifiedSincegetIfModifiedSince()setIfModifiedSincesetIfModifiedSince(long)getUseCachesgetUseCaches()setUseCachessetUseCaches(boolean)getDefaultAllowUserInteractiongetDefaultAllowUserInteraction()setDefaultAllowUserInteractionsetDefaultAllowUserInteraction(boolean)getAllowUserInteractiongetAllowUserInteraction()setAllowUserInteractionsetAllowUserInteraction(boolean)getDoOutputgetDoOutput()setDoOutputsetDoOutput(boolean)getDoInputgetDoInput()setDoInputsetDoInput(boolean)getPermissiongetPermission()getHeaderFieldgetHeaderField(int)getHeaderFieldKeygetHeaderFieldKey(int)getHeaderFieldDategetHeaderFieldDate(java.lang.String,long)getHeaderFieldLonggetHeaderFieldLong(java.lang.String,long)getHeaderFieldIntgetHeaderFieldInt(java.lang.String,int)getHeaderFieldsgetHeaderFields()getHeaderField(java.lang.String)getLastModifiedgetLastModified()getDategetDate()getExpirationgetExpiration()getContentEncodinggetContentEncoding()getContentTypegetContentType()getContentLengthLonggetContentLengthLong()getContentLengthgetContentLength()getURLgetURL()URLConnection(java.net.URL)getReadTimeoutgetReadTimeout()setReadTimeoutsetReadTimeout(int)getConnectTimeoutgetConnectTimeout()setConnectTimeoutsetConnectTimeout(int)connectconnect()setFileNameMapsetFileNameMap(java.net.FileNameMap)getFileNameMapgetFileNameMap()connectedifModifiedSinceuseCachesallowUserInteractiondoOutputdoInputURLStreamHandler/modules/java.base/java/net/URLStreamHandler.classsetURLsetURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)toExternalForm(java.net.URL)hostsEqualhostsEqual(java.net.URL,java.net.URL)getHostAddress(java.net.URL)sameFile(java.net.URL,java.net.URL)hashCode(java.net.URL)equals(java.net.URL,java.net.URL)parseURLparseURL(java.net.URL,java.lang.String,int,int)openConnection(java.net.URL,java.net.Proxy)openConnection(java.net.URL)URLStreamHandler()URLStreamHandlerFactory/modules/java.base/java/net/URLStreamHandlerFactory.classcreateURLStreamHandlercreateURLStreamHandler(java.lang.String)UnknownHostException/modules/java.base/java/net/UnknownHostException.classUnknownHostException()UnknownHostException(java.lang.String)java.net.spiLookupPolicy/modules/java.base/java/net/spi/InetAddressResolver$LookupPolicy.class/modules/java.base/java/net/spiof(int)IPV6_FIRSTIPV4_FIRSTIPV6IPV4InetAddressResolver/modules/java.base/java/net/spi/InetAddressResolver.classlookupByAddresslookupByAddress(byte[])lookupByNamelookupByName(java.lang.String,java.net.spi.InetAddressResolver.LookupPolicy)java.nioBuffer/modules/java.base/java/nio/Buffer.class/modules/java.base/java/niocheckSessioncheckSession()session()discardMarkdiscardMark()markValuemarkValue()checkIndex(int)nextPutIndexnextPutIndex(int)nextPutIndex()nextGetIndexnextGetIndex(int)nextGetIndex()base()duplicateduplicate()sliceslice(int,int)slice()isDirectisDirect()arrayOffsetarrayOffset()arrayarray()hasArrayhasArray()hasRemaininghasRemaining()remainingremaining()rewindrewind()flipflip()mark()limitlimit(int)limit()positionposition(int)position()createCapacityExceptioncreateCapacityException(int)createSameBufferExceptioncreateSameBufferException()Buffer(int,int,int,int,java.lang.foreign.MemorySegment)Buffer(long,int,java.lang.foreign.MemorySegment)segmentSPLITERATOR_CHARACTERISTICSUNSAFEByteBuffer/modules/java.base/java/nio/ByteBuffer.classComparable<ByteBuffer>compareTo(java.nio.ByteBuffer)asDoubleBufferasDoubleBuffer()putDoubleputDouble(int,double)getDouble(int)putDouble(double)getDouble()asFloatBufferasFloatBuffer()putFloatputFloat(int,float)getFloat(int)putFloat(float)getFloat()asLongBufferasLongBuffer()putLongputLong(int,long)getLong(int)putLong(long)getLong()asIntBufferasIntBuffer()putIntputInt(int,int)getInt(int)putInt(int)getInt()asShortBufferasShortBuffer()putShortputShort(int,short)getShort(int)putShort(short)getShort()asCharBufferasCharBuffer()putCharputChar(int,char)getChar(int)putChar(char)getChar()alignedSlicealignedSlice(int)alignmentOffsetalignmentOffset(int,int)order(java.nio.ByteOrder)mismatch(java.nio.ByteBuffer)compactcompact()putArrayputArray(int,byte[],int,int)put(int,byte[])put(int,byte[],int,int)put(byte[])put(byte[],int,int)putBufferputBuffer(int,java.nio.ByteBuffer,int,int)put(int,java.nio.ByteBuffer,int,int)put(java.nio.ByteBuffer)get(int,byte[])get(int,byte[],int,int)get(byte[])get(byte[],int,int)put(int,byte)get(int)put(byte)asReadOnlyBufferasReadOnlyBuffer()wrap(byte[])wrap(byte[],int,int)allocate(int)allocateDirectallocateDirect(int)ByteBuffer(byte[],long,int,java.lang.foreign.MemorySegment)ByteBuffer(int,int,int,int,java.lang.foreign.MemorySegment)ByteBuffer(int,int,int,int,byte[],int,java.lang.foreign.MemorySegment)nativeByteOrderbigEndianoffsethbByteBufferAsCharBufferB/modules/java.base/java/nio/ByteBufferAsCharBufferB.classcharRegionOrdercharRegionOrder()put(int,char)put(char)getUncheckedgetUnchecked(int)byteOffset(long)ByteBufferAsCharBufferB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsCharBufferB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)bbByteBufferAsCharBufferL/modules/java.base/java/nio/ByteBufferAsCharBufferL.classByteBufferAsCharBufferL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsCharBufferL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsCharBufferRB/modules/java.base/java/nio/ByteBufferAsCharBufferRB.classByteBufferAsCharBufferRB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsCharBufferRB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsCharBufferRL/modules/java.base/java/nio/ByteBufferAsCharBufferRL.classByteBufferAsCharBufferRL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsCharBufferRL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferB/modules/java.base/java/nio/ByteBufferAsDoubleBufferB.classput(int,double)put(double)ByteBufferAsDoubleBufferB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferL/modules/java.base/java/nio/ByteBufferAsDoubleBufferL.classByteBufferAsDoubleBufferL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferRB/modules/java.base/java/nio/ByteBufferAsDoubleBufferRB.classByteBufferAsDoubleBufferRB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferRB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferRL/modules/java.base/java/nio/ByteBufferAsDoubleBufferRL.classByteBufferAsDoubleBufferRL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsDoubleBufferRL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferB/modules/java.base/java/nio/ByteBufferAsFloatBufferB.classput(int,float)put(float)ByteBufferAsFloatBufferB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferL/modules/java.base/java/nio/ByteBufferAsFloatBufferL.classByteBufferAsFloatBufferL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferRB/modules/java.base/java/nio/ByteBufferAsFloatBufferRB.classByteBufferAsFloatBufferRB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferRB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferRL/modules/java.base/java/nio/ByteBufferAsFloatBufferRL.classByteBufferAsFloatBufferRL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsFloatBufferRL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferB/modules/java.base/java/nio/ByteBufferAsIntBufferB.classput(int,int)put(int)ByteBufferAsIntBufferB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferL/modules/java.base/java/nio/ByteBufferAsIntBufferL.classByteBufferAsIntBufferL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferRB/modules/java.base/java/nio/ByteBufferAsIntBufferRB.classByteBufferAsIntBufferRB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferRB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferRL/modules/java.base/java/nio/ByteBufferAsIntBufferRL.classByteBufferAsIntBufferRL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsIntBufferRL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferB/modules/java.base/java/nio/ByteBufferAsLongBufferB.classput(int,long)put(long)ByteBufferAsLongBufferB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferL/modules/java.base/java/nio/ByteBufferAsLongBufferL.classByteBufferAsLongBufferL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferRB/modules/java.base/java/nio/ByteBufferAsLongBufferRB.classByteBufferAsLongBufferRB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferRB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferRL/modules/java.base/java/nio/ByteBufferAsLongBufferRL.classByteBufferAsLongBufferRL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsLongBufferRL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferB/modules/java.base/java/nio/ByteBufferAsShortBufferB.classput(int,short)put(short)ByteBufferAsShortBufferB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferL/modules/java.base/java/nio/ByteBufferAsShortBufferL.classByteBufferAsShortBufferL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferRB/modules/java.base/java/nio/ByteBufferAsShortBufferRB.classByteBufferAsShortBufferRB(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferRB(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferRL/modules/java.base/java/nio/ByteBufferAsShortBufferRL.classByteBufferAsShortBufferRL(java.nio.ByteBuffer,int,int,int,int,long,java.lang.foreign.MemorySegment)ByteBufferAsShortBufferRL(java.nio.ByteBuffer,java.lang.foreign.MemorySegment)ByteOrder/modules/java.base/java/nio/ByteOrder.classnativeOrdernativeOrder()LITTLE_ENDIANBIG_ENDIANCharBuffer/modules/java.base/java/nio/CharBuffer.classComparable<CharBuffer>compareTo(java.nio.CharBuffer)mismatch(java.nio.CharBuffer)isAddressableisAddressable()put(java.lang.String)put(java.lang.String,int,int)putArray(int,char[],int,int)put(int,char[])put(int,char[],int,int)put(char[])put(char[],int,int)putBuffer(int,java.nio.CharBuffer,int,int)put(int,java.nio.CharBuffer,int,int)put(java.nio.CharBuffer)get(int,char[])get(int,char[],int,int)get(char[])get(char[],int,int)wrap(java.lang.CharSequence)wrap(java.lang.CharSequence,int,int)wrap(char[])wrap(char[],int,int)CharBuffer(char[],long,int,java.lang.foreign.MemorySegment)CharBuffer(int,int,int,int,java.lang.foreign.MemorySegment)CharBuffer(int,int,int,int,char[],int,java.lang.foreign.MemorySegment)DirectByteBuffer/modules/java.base/java/nio/DirectByteBuffer.classDirectByteBuffer(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.io.FileDescriptor,boolean,java.lang.foreign.MemorySegment)DirectByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean,java.lang.foreign.MemorySegment)DirectByteBuffer(long,int,java.lang.Object,java.io.FileDescriptor,boolean,java.lang.foreign.MemorySegment)DirectByteBuffer(long,int,java.lang.Object,java.lang.foreign.MemorySegment)DirectByteBuffer(int)cleanercleaner()attachmentattachment()UNALIGNEDDirectByteBufferR/modules/java.base/java/nio/DirectByteBufferR.classDirectByteBufferR(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.io.FileDescriptor,boolean,java.lang.foreign.MemorySegment)DirectByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean,java.lang.foreign.MemorySegment)DirectByteBufferR(int)DirectCharBufferRS/modules/java.base/java/nio/DirectCharBufferRS.classDirectCharBufferRS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectCharBufferRU/modules/java.base/java/nio/DirectCharBufferRU.classDirectCharBufferRU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectCharBufferS/modules/java.base/java/nio/DirectCharBufferS.classDirectCharBufferS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectCharBufferU/modules/java.base/java/nio/DirectCharBufferU.classDirectCharBufferU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectDoubleBufferRS/modules/java.base/java/nio/DirectDoubleBufferRS.classDirectDoubleBufferRS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectDoubleBufferRU/modules/java.base/java/nio/DirectDoubleBufferRU.classDirectDoubleBufferRU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectDoubleBufferS/modules/java.base/java/nio/DirectDoubleBufferS.classDirectDoubleBufferS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectDoubleBufferU/modules/java.base/java/nio/DirectDoubleBufferU.classDirectDoubleBufferU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectFloatBufferRS/modules/java.base/java/nio/DirectFloatBufferRS.classDirectFloatBufferRS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectFloatBufferRU/modules/java.base/java/nio/DirectFloatBufferRU.classDirectFloatBufferRU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectFloatBufferS/modules/java.base/java/nio/DirectFloatBufferS.classDirectFloatBufferS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectFloatBufferU/modules/java.base/java/nio/DirectFloatBufferU.classDirectFloatBufferU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectIntBufferRS/modules/java.base/java/nio/DirectIntBufferRS.classDirectIntBufferRS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectIntBufferRU/modules/java.base/java/nio/DirectIntBufferRU.classDirectIntBufferRU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectIntBufferS/modules/java.base/java/nio/DirectIntBufferS.classDirectIntBufferS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectIntBufferU/modules/java.base/java/nio/DirectIntBufferU.classDirectIntBufferU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectLongBufferRS/modules/java.base/java/nio/DirectLongBufferRS.classDirectLongBufferRS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectLongBufferRU/modules/java.base/java/nio/DirectLongBufferRU.classDirectLongBufferRU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectLongBufferS/modules/java.base/java/nio/DirectLongBufferS.classDirectLongBufferS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectLongBufferU/modules/java.base/java/nio/DirectLongBufferU.classDirectLongBufferU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectShortBufferRS/modules/java.base/java/nio/DirectShortBufferRS.classDirectShortBufferRS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectShortBufferRU/modules/java.base/java/nio/DirectShortBufferRU.classDirectShortBufferRU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectShortBufferS/modules/java.base/java/nio/DirectShortBufferS.classDirectShortBufferS(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DirectShortBufferU/modules/java.base/java/nio/DirectShortBufferU.classDirectShortBufferU(sun.nio.ch.DirectBuffer,int,int,int,int,int,java.lang.foreign.MemorySegment)DoubleBuffer/modules/java.base/java/nio/DoubleBuffer.classComparable<DoubleBuffer>compareTo(java.nio.DoubleBuffer)mismatch(java.nio.DoubleBuffer)putArray(int,double[],int,int)put(int,double[])put(int,double[],int,int)put(double[])put(double[],int,int)putBuffer(int,java.nio.DoubleBuffer,int,int)put(int,java.nio.DoubleBuffer,int,int)put(java.nio.DoubleBuffer)get(int,double[])get(int,double[],int,int)get(double[])get(double[],int,int)wrap(double[])wrap(double[],int,int)DoubleBuffer(double[],long,int,java.lang.foreign.MemorySegment)DoubleBuffer(int,int,int,int,java.lang.foreign.MemorySegment)DoubleBuffer(int,int,int,int,double[],int,java.lang.foreign.MemorySegment)FloatBuffer/modules/java.base/java/nio/FloatBuffer.classComparable<FloatBuffer>compareTo(java.nio.FloatBuffer)mismatch(java.nio.FloatBuffer)putArray(int,float[],int,int)put(int,float[])put(int,float[],int,int)put(float[])put(float[],int,int)putBuffer(int,java.nio.FloatBuffer,int,int)put(int,java.nio.FloatBuffer,int,int)put(java.nio.FloatBuffer)get(int,float[])get(int,float[],int,int)get(float[])get(float[],int,int)wrap(float[])wrap(float[],int,int)FloatBuffer(float[],long,int,java.lang.foreign.MemorySegment)FloatBuffer(int,int,int,int,java.lang.foreign.MemorySegment)FloatBuffer(int,int,int,int,float[],int,java.lang.foreign.MemorySegment)HeapByteBuffer/modules/java.base/java/nio/HeapByteBuffer.class_put_put(int,byte)_get_get(int)ixix(int)HeapByteBuffer(byte[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapByteBuffer(byte[],int,int,java.lang.foreign.MemorySegment)HeapByteBuffer(int,int,java.lang.foreign.MemorySegment)HeapByteBufferR/modules/java.base/java/nio/HeapByteBufferR.classHeapByteBufferR(byte[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapByteBufferR(byte[],int,int,java.lang.foreign.MemorySegment)HeapByteBufferR(int,int,java.lang.foreign.MemorySegment)HeapCharBuffer/modules/java.base/java/nio/HeapCharBuffer.classHeapCharBuffer(char[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapCharBuffer(char[],int,int,java.lang.foreign.MemorySegment)HeapCharBuffer(int,int,java.lang.foreign.MemorySegment)HeapCharBufferR/modules/java.base/java/nio/HeapCharBufferR.classHeapCharBufferR(char[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapCharBufferR(char[],int,int,java.lang.foreign.MemorySegment)HeapCharBufferR(int,int,java.lang.foreign.MemorySegment)HeapDoubleBuffer/modules/java.base/java/nio/HeapDoubleBuffer.classHeapDoubleBuffer(double[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapDoubleBuffer(double[],int,int,java.lang.foreign.MemorySegment)HeapDoubleBuffer(int,int,java.lang.foreign.MemorySegment)HeapDoubleBufferR/modules/java.base/java/nio/HeapDoubleBufferR.classHeapDoubleBufferR(double[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapDoubleBufferR(double[],int,int,java.lang.foreign.MemorySegment)HeapDoubleBufferR(int,int,java.lang.foreign.MemorySegment)HeapFloatBuffer/modules/java.base/java/nio/HeapFloatBuffer.classHeapFloatBuffer(float[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapFloatBuffer(float[],int,int,java.lang.foreign.MemorySegment)HeapFloatBuffer(int,int,java.lang.foreign.MemorySegment)HeapFloatBufferR/modules/java.base/java/nio/HeapFloatBufferR.classHeapFloatBufferR(float[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapFloatBufferR(float[],int,int,java.lang.foreign.MemorySegment)HeapFloatBufferR(int,int,java.lang.foreign.MemorySegment)HeapIntBuffer/modules/java.base/java/nio/HeapIntBuffer.classput(int,int[],int,int)put(int,java.nio.IntBuffer,int,int)put(java.nio.IntBuffer)put(int[],int,int)get(int,int[],int,int)get(int[],int,int)HeapIntBuffer(int[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapIntBuffer(int[],int,int,java.lang.foreign.MemorySegment)HeapIntBuffer(int,int,java.lang.foreign.MemorySegment)HeapIntBufferR/modules/java.base/java/nio/HeapIntBufferR.classHeapIntBufferR(int[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapIntBufferR(int[],int,int,java.lang.foreign.MemorySegment)HeapIntBufferR(int,int,java.lang.foreign.MemorySegment)HeapLongBuffer/modules/java.base/java/nio/HeapLongBuffer.classput(int,long[],int,int)put(int,java.nio.LongBuffer,int,int)put(java.nio.LongBuffer)put(long[],int,int)get(int,long[],int,int)get(long[],int,int)HeapLongBuffer(long[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapLongBuffer(long[],int,int,java.lang.foreign.MemorySegment)HeapLongBuffer(int,int,java.lang.foreign.MemorySegment)HeapLongBufferR/modules/java.base/java/nio/HeapLongBufferR.classHeapLongBufferR(long[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapLongBufferR(long[],int,int,java.lang.foreign.MemorySegment)HeapLongBufferR(int,int,java.lang.foreign.MemorySegment)HeapShortBuffer/modules/java.base/java/nio/HeapShortBuffer.classput(int,short[],int,int)put(int,java.nio.ShortBuffer,int,int)put(java.nio.ShortBuffer)put(short[],int,int)get(int,short[],int,int)get(short[],int,int)HeapShortBuffer(short[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapShortBuffer(short[],int,int,java.lang.foreign.MemorySegment)HeapShortBuffer(int,int,java.lang.foreign.MemorySegment)HeapShortBufferR/modules/java.base/java/nio/HeapShortBufferR.classHeapShortBufferR(short[],int,int,int,int,int,java.lang.foreign.MemorySegment)HeapShortBufferR(short[],int,int,java.lang.foreign.MemorySegment)HeapShortBufferR(int,int,java.lang.foreign.MemorySegment)IntBuffer/modules/java.base/java/nio/IntBuffer.classComparable<IntBuffer>compareTo(java.nio.IntBuffer)mismatch(java.nio.IntBuffer)putArray(int,int[],int,int)put(int,int[])put(int[])putBuffer(int,java.nio.IntBuffer,int,int)get(int,int[])get(int[])wrap(int[])wrap(int[],int,int)IntBuffer(int[],long,int,java.lang.foreign.MemorySegment)IntBuffer(int,int,int,int,java.lang.foreign.MemorySegment)IntBuffer(int,int,int,int,int[],int,java.lang.foreign.MemorySegment)LongBuffer/modules/java.base/java/nio/LongBuffer.classComparable<LongBuffer>compareTo(java.nio.LongBuffer)mismatch(java.nio.LongBuffer)putArray(int,long[],int,int)put(int,long[])put(long[])putBuffer(int,java.nio.LongBuffer,int,int)get(int,long[])get(long[])wrap(long[])wrap(long[],int,int)LongBuffer(long[],long,int,java.lang.foreign.MemorySegment)LongBuffer(int,int,int,int,java.lang.foreign.MemorySegment)LongBuffer(int,int,int,int,long[],int,java.lang.foreign.MemorySegment)MappedByteBuffer/modules/java.base/java/nio/MappedByteBuffer.classforce(int,int)fileDescriptorfileDescriptor()isSyncisSync()unmapperunmapper()MappedByteBuffer(int,int,int,int,java.lang.foreign.MemorySegment)MappedByteBuffer(int,int,int,int,boolean,java.lang.foreign.MemorySegment)MappedByteBuffer(int,int,int,int,java.io.FileDescriptor,boolean,java.lang.foreign.MemorySegment)ShortBuffer/modules/java.base/java/nio/ShortBuffer.classComparable<ShortBuffer>compareTo(java.nio.ShortBuffer)mismatch(java.nio.ShortBuffer)putArray(int,short[],int,int)put(int,short[])put(short[])putBuffer(int,java.nio.ShortBuffer,int,int)get(int,short[])get(short[])wrap(short[])wrap(short[],int,int)ShortBuffer(short[],long,int,java.lang.foreign.MemorySegment)ShortBuffer(int,int,int,int,java.lang.foreign.MemorySegment)ShortBuffer(int,int,int,int,short[],int,java.lang.foreign.MemorySegment)StringCharBuffer/modules/java.base/java/nio/StringCharBuffer.classStringCharBuffer(java.lang.CharSequence,int,int)strjava.nio.channelsAsynchronousChannel/modules/java.base/java/nio/channels/AsynchronousChannel.class/modules/java.base/java/nio/channelsAsynchronousCloseException/modules/java.base/java/nio/channels/AsynchronousCloseException.classAsynchronousCloseException()AsynchronousFileChannel/modules/java.base/java/nio/channels/AsynchronousFileChannel.classFuture<Integer>write(java.nio.ByteBuffer,long)CompletionHandler<>/modules/java.base/java/nio/channels/CompletionHandler.classwrite(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)? super ACompletionHandler<Integer,? super A>read(java.nio.ByteBuffer,long)read(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)tryLocktryLock()tryLock(long,long,boolean)Future<FileLock>lock()lock(long,long,boolean)lock(java.lang.Object,java.nio.channels.CompletionHandler)CompletionHandler<FileLock,? super A>lock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)force(boolean)truncatetruncate(long)OpenOption[]open(java.nio.file.Path,java.nio.file.OpenOption[])? extends OpenOptionSet<? extends OpenOption>Collection<? extends OpenOption>Iterable<? extends OpenOption>FileAttribute[]java.nio.file.attributeFileAttribute<?>/modules/java.base/java/nio/file/attribute/FileAttribute.class/modules/java.base/java/nio/file/attribute/modules/java.base/java/nio/fileFileAttribute<?>[]open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])AsynchronousFileChannel()ByteChannel/modules/java.base/java/nio/channels/ByteChannel.classChannel/modules/java.base/java/nio/channels/Channel.classClosedChannelException/modules/java.base/java/nio/channels/ClosedChannelException.classClosedChannelException()CompletionHandlerfailedfailed(java.lang.Throwable,java.lang.Object)completedcompleted(java.lang.Object,java.lang.Object)MapMode/modules/java.base/java/nio/channels/FileChannel$MapMode.classREAD_WRITEREAD_ONLYFileChannel/modules/java.base/java/nio/channels/FileChannel.classmapmap(java.nio.channels.FileChannel.MapMode,long,long,java.lang.foreign.Arena)map(java.nio.channels.FileChannel.MapMode,long,long)transferFromtransferFrom(java.nio.channels.ReadableByteChannel,long,long)transferTo(long,long,java.nio.channels.WritableByteChannel)position(long)ByteBuffer[]write(java.nio.ByteBuffer[])write(java.nio.ByteBuffer[],int,int)write(java.nio.ByteBuffer)read(java.nio.ByteBuffer[])read(java.nio.ByteBuffer[],int,int)open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])FileChannel()FileLock/modules/java.base/java/nio/channels/FileLock.classrelease()isValidisValid()overlapsoverlaps(long,long)isSharedisShared()acquiredByacquiredBy()channelchannel()FileLock(java.nio.channels.AsynchronousFileChannel,long,long,boolean)FileLock(java.nio.channels.FileChannel,long,long,boolean)GatheringByteChannel/modules/java.base/java/nio/channels/GatheringByteChannel.classInterruptibleChannel/modules/java.base/java/nio/channels/InterruptibleChannel.classReadableByteChannel/modules/java.base/java/nio/channels/ReadableByteChannel.classScatteringByteChannel/modules/java.base/java/nio/channels/ScatteringByteChannel.classSeekableByteChannel/modules/java.base/java/nio/channels/SeekableByteChannel.classWritableByteChannel/modules/java.base/java/nio/channels/WritableByteChannel.classjava.nio.channels.spiAbstractInterruptibleChannel/modules/java.base/java/nio/channels/spi/AbstractInterruptibleChannel.class/modules/java.base/java/nio/channels/spiendend(boolean)beginbegin()implCloseChannelimplCloseChannel()AbstractInterruptibleChannel()java.nio.charsetCharacterCodingException/modules/java.base/java/nio/charset/CharacterCodingException.class/modules/java.base/java/nio/charsetCharacterCodingException()Charset/modules/java.base/java/nio/charset/Charset.classComparable<Charset>compareTo(java.nio.charset.Charset)encodeencode(java.lang.String)encode(java.nio.CharBuffer)decode(java.nio.ByteBuffer)canEncodecanEncode()newEncodernewEncoder()newDecodernewDecoder()contains(java.nio.charset.Charset)displayName(java.util.Locale)isRegisteredisRegistered()aliasesaliases()Charset(java.lang.String,java.lang.String[])defaultCharsetdefaultCharset()SortedMap<>/modules/java.base/java/util/SortedMap.classSequencedMap<>/modules/java.base/java/util/SequencedMap.classSortedMap<String,Charset>SequencedMap<String,Charset>Map<String,Charset>availableCharsetsavailableCharsets()forName(java.lang.String,java.nio.charset.Charset)isSupportedisSupported(java.lang.String)CharsetDecoder/modules/java.base/java/nio/charset/CharsetDecoder.classdetectedCharsetdetectedCharset()isCharsetDetectedisCharsetDetected()isAutoDetectingisAutoDetecting()decodeLoopdecodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)implResetimplReset()implFlushimplFlush(java.nio.CharBuffer)flush(java.nio.CharBuffer)decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)maxCharsPerBytemaxCharsPerByte()averageCharsPerByteaverageCharsPerByte()implOnUnmappableCharacterimplOnUnmappableCharacter(java.nio.charset.CodingErrorAction)onUnmappableCharacteronUnmappableCharacter(java.nio.charset.CodingErrorAction)unmappableCharacterActionunmappableCharacterAction()implOnMalformedInputimplOnMalformedInput(java.nio.charset.CodingErrorAction)onMalformedInputonMalformedInput(java.nio.charset.CodingErrorAction)malformedInputActionmalformedInputAction()implReplaceWithimplReplaceWith(java.lang.String)replaceWithreplaceWith(java.lang.String)replacementreplacement()CharsetDecoder(java.nio.charset.Charset,float,float)CharsetEncoder/modules/java.base/java/nio/charset/CharsetEncoder.classcanEncode(java.lang.CharSequence)canEncode(char)encodeLoopencodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)implFlush(java.nio.ByteBuffer)flush(java.nio.ByteBuffer)encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)maxBytesPerCharmaxBytesPerChar()averageBytesPerCharaverageBytesPerChar()isLegalReplacementisLegalReplacement(byte[])implReplaceWith(byte[])replaceWith(byte[])CharsetEncoder(java.nio.charset.Charset,float,float)CharsetEncoder(java.nio.charset.Charset,float,float,byte[])CoderResult/modules/java.base/java/nio/charset/CoderResult.classthrowException()unmappableForLengthunmappableForLength(int)malformedForLengthmalformedForLength(int)isUnmappableisUnmappable()isMalformedisMalformed()isErrorisError()isOverflowisOverflow()isUnderflowisUnderflow()OVERFLOWUNDERFLOWCodingErrorAction/modules/java.base/java/nio/charset/CodingErrorAction.classREPORTREPLACEjava.nio.file/modules/java.base/java/nio/file/AccessMode.classcompareTo(java.nio.file.AccessMode)EXECUTEWRITEREADCopyOption/modules/java.base/java/nio/file/CopyOption.classFilter/modules/java.base/java/nio/file/DirectoryStream$Filter.class/modules/java.base/java/nio/file/DirectoryStream.classaccept(java.lang.Object)DirectoryStreamIterable<T>FileStore/modules/java.base/java/nio/file/FileStore.classgetAttributegetAttribute(java.lang.String)getFileStoreAttributeViewgetFileStoreAttributeView(java.lang.Class)Class<V>supportsFileAttributeViewsupportsFileAttributeView(java.lang.String)? extends FileAttributeViewClass<? extends FileAttributeView>supportsFileAttributeView(java.lang.Class)getBlockSizegetBlockSize()getUnallocatedSpacegetUnallocatedSpace()FileStore()FileSystem/modules/java.base/java/nio/file/FileSystem.classnewWatchServicenewWatchService()getUserPrincipalLookupServicegetUserPrincipalLookupService()getPathMatchergetPathMatcher(java.lang.String)getPath(java.lang.String,java.lang.String[])supportedFileAttributeViewssupportedFileAttributeViews()Iterable<FileStore>getFileStoresgetFileStores()Iterable<Path>getRootDirectoriesgetRootDirectories()getSeparatorgetSeparator()providerprovider()FileSystem()LinkOption/modules/java.base/java/nio/file/LinkOption.classEnum<LinkOption>Comparable<LinkOption>compareTo(java.nio.file.LinkOption)EnumDesc<LinkOption>DynamicConstantDesc<LinkOption>Optional<EnumDesc<LinkOption>>Class<LinkOption>Enum<LinkOption>(java.lang.String,int)LinkOption[]NOFOLLOW_LINKSOpenOption/modules/java.base/java/nio/file/OpenOption.classPath/modules/java.base/java/nio/file/Path.classComparable<Path>compareTo(java.nio.file.Path)Spliterator<Path>? super PathConsumer<? super Path>Iterator<Path>Kind<?>/modules/java.base/java/nio/file/WatchEvent$Kind.classKind<?>[]register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind[])register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind[],java.nio.file.WatchEvent.Modifier[])toFiletoFile()toRealPathtoRealPath(java.nio.file.LinkOption[])toAbsolutePathtoAbsolutePath()toUritoUri()relativize(java.nio.file.Path)resolveSiblingresolveSibling(java.lang.String)resolveSibling(java.nio.file.Path)resolve(java.lang.String,java.lang.String[])resolve(java.nio.file.Path,java.nio.file.Path[])resolve(java.nio.file.Path)endsWith(java.nio.file.Path)startsWith(java.nio.file.Path)subpathsubpath(int,int)getNameCountgetNameCount()getFileSystemgetFileSystem()of(java.net.URI)of(java.lang.String,java.lang.String[])PathMatcher/modules/java.base/java/nio/file/PathMatcher.classmatches(java.nio.file.Path)/modules/java.base/java/nio/file/WatchEvent$Modifier.classWatchEvent/modules/java.base/java/nio/file/WatchEvent.classcontextcontext()count()Kind<>Kind<T>WatchKey/modules/java.base/java/nio/file/WatchKey.classwatchablewatchable()cancelcancel()WatchEvent<?>List<WatchEvent<?>>SequencedCollection<WatchEvent<?>>Collection<WatchEvent<?>>Iterable<WatchEvent<?>>pollEventspollEvents()WatchService/modules/java.base/java/nio/file/WatchService.classtaketake()poll(long,java.util.concurrent.TimeUnit)Watchable/modules/java.base/java/nio/file/Watchable.classAttributeView/modules/java.base/java/nio/file/attribute/AttributeView.classBasicFileAttributes/modules/java.base/java/nio/file/attribute/BasicFileAttributes.classfileKeyfileKey()isOtherisOther()isSymbolicLinkisSymbolicLink()isRegularFileisRegularFile()creationTimecreationTime()lastAccessTimelastAccessTime()lastModifiedTimelastModifiedTime()FileAttributeFileAttributeView/modules/java.base/java/nio/file/attribute/FileAttributeView.classFileStoreAttributeView/modules/java.base/java/nio/file/attribute/FileStoreAttributeView.classFileTime/modules/java.base/java/nio/file/attribute/FileTime.classComparable<FileTime>compareTo(java.nio.file.attribute.FileTime)toInstanttoInstant()toMillistoMillis()toto(java.util.concurrent.TimeUnit)from(java.time.Instant)fromMillisfromMillis(long)from(long,java.util.concurrent.TimeUnit)GroupPrincipal/modules/java.base/java/nio/file/attribute/GroupPrincipal.classUserPrincipal/modules/java.base/java/nio/file/attribute/UserPrincipal.classUserPrincipalLookupService/modules/java.base/java/nio/file/attribute/UserPrincipalLookupService.classlookupPrincipalByGroupNamelookupPrincipalByGroupName(java.lang.String)lookupPrincipalByNamelookupPrincipalByName(java.lang.String)UserPrincipalLookupService()java.nio.file.spiFileSystemProvider/modules/java.base/java/nio/file/spi/FileSystemProvider.class/modules/java.base/java/nio/file/spireadAttributesIfExistsreadAttributesIfExists(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])exists(java.nio.file.Path,java.nio.file.LinkOption[])setAttributesetAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])Map<String,Object>readAttributesreadAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])getFileAttributeViewgetFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])getFileStoregetFileStore(java.nio.file.Path)isHidden(java.nio.file.Path)isSameFileisSameFile(java.nio.file.Path,java.nio.file.Path)CopyOption[]movemove(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])readSymbolicLinkreadSymbolicLink(java.nio.file.Path)deleteIfExistsdeleteIfExists(java.nio.file.Path)delete(java.nio.file.Path)createLinkcreateLink(java.nio.file.Path,java.nio.file.Path)createSymbolicLinkcreateSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])createDirectorycreateDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])Filter<? super Path>DirectoryStream<>DirectoryStream<Path>newDirectoryStreamnewDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter)newByteChannelnewByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])newAsynchronousFileChannelnewAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])newFileChannelnewFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])newOutputStreamnewOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])newInputStreamnewInputStream(java.nio.file.Path,java.nio.file.OpenOption[])Map<String,?>newFileSystemnewFileSystem(java.nio.file.Path,java.util.Map)getPath(java.net.URI)getFileSystem(java.net.URI)newFileSystem(java.net.URI,java.util.Map)List<FileSystemProvider>SequencedCollection<FileSystemProvider>Collection<FileSystemProvider>Iterable<FileSystemProvider>installedProvidersinstalledProviders()FileSystemProvider()java.securityAccessControlContext/modules/java.base/java/security/AccessControlContext.class/modules/java.base/java/securityoptimizeoptimize()isAuthorizedisAuthorized()getCombinergetCombiner()getDomainCombinergetDomainCombiner()getAssignedCombinergetAssignedCombiner()isPrivilegedisPrivileged()ProtectionDomain[]getContextgetContext()AccessControlContext(java.security.ProtectionDomain[],java.security.AccessControlContext)AccessControlContext(java.security.ProtectionDomain[],boolean)Permission[]AccessControlContext(java.security.ProtectionDomain,java.security.DomainCombiner,java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])AccessControlContext(java.security.AccessControlContext,java.security.DomainCombiner,boolean)AccessControlContext(java.security.AccessControlContext,java.security.DomainCombiner)AccessControlContext(java.security.ProtectionDomain[])getDebuggetDebug()AccessControlException/modules/java.base/java/security/AccessControlException.classAccessControlException(java.lang.String,java.security.Permission)AccessControlException(java.lang.String)AsymmetricKey/modules/java.base/java/security/AsymmetricKey.classgetParamsgetParams()BasicPermission/modules/java.base/java/security/BasicPermission.classnewPermissionCollectionnewPermissionCollection()getActionsgetActions()impliesimplies(java.security.Permission)BasicPermission(java.lang.String,java.lang.String)BasicPermission(java.lang.String)CodeSigner/modules/java.base/java/security/CodeSigner.classgetTimestampgetTimestamp()getSignerCertPathgetSignerCertPath()CodeSigner(java.security.cert.CertPath,java.security.Timestamp)CodeSource/modules/java.base/java/security/CodeSource.classmatchCertsmatchCerts(java.security.CodeSource,boolean)implies(java.security.CodeSource)CodeSigner[]getCodeSignersgetCodeSigners()Certificate[]getCertificatesgetCertificates()getLocationNoFragStringgetLocationNoFragString()getLocationgetLocation()CodeSource(java.net.URL,java.security.CodeSigner[])CodeSource(java.net.URL,java.security.cert.Certificate[])DomainCombiner/modules/java.base/java/security/DomainCombiner.classcombinecombine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])GeneralSecurityException/modules/java.base/java/security/GeneralSecurityException.classGeneralSecurityException(java.lang.Throwable)GeneralSecurityException(java.lang.String,java.lang.Throwable)GeneralSecurityException(java.lang.String)GeneralSecurityException()Guard/modules/java.base/java/security/Guard.classcheckGuardcheckGuard(java.lang.Object)InvalidKeyException/modules/java.base/java/security/InvalidKeyException.classInvalidKeyException(java.lang.Throwable)InvalidKeyException(java.lang.String,java.lang.Throwable)InvalidKeyException(java.lang.String)InvalidKeyException()Key/modules/java.base/java/security/Key.classgetEncodedgetEncoded()getFormatgetFormat()getAlgorithmgetAlgorithm()KeyException/modules/java.base/java/security/KeyException.classKeyException(java.lang.Throwable)KeyException(java.lang.String,java.lang.Throwable)KeyException(java.lang.String)KeyException()NoSuchAlgorithmException/modules/java.base/java/security/NoSuchAlgorithmException.classNoSuchAlgorithmException(java.lang.Throwable)NoSuchAlgorithmException(java.lang.String,java.lang.Throwable)NoSuchAlgorithmException(java.lang.String)NoSuchAlgorithmException()NoSuchProviderException/modules/java.base/java/security/NoSuchProviderException.classNoSuchProviderException(java.lang.String)NoSuchProviderException()Permission/modules/java.base/java/security/Permission.classPermission(java.lang.String)PermissionCollection/modules/java.base/java/security/PermissionCollection.classStream<Permission>BaseStream<Permission,Stream<Permission>>elementsAsStreamelementsAsStream()Enumeration<Permission>elements()add(java.security.Permission)PermissionCollection()Principal/modules/java.base/java/security/Principal.classimplies(javax.security.auth.Subject)PrivilegedAction/modules/java.base/java/security/PrivilegedAction.classPrivilegedActionException/modules/java.base/java/security/PrivilegedActionException.classPrivilegedActionException(java.lang.Exception)PrivilegedExceptionAction/modules/java.base/java/security/PrivilegedExceptionAction.class/modules/java.base/java/security/ProtectionDomain$Key.classKey()ProtectionDomain/modules/java.base/java/security/ProtectionDomain.classimpliesWithAltFilePermimpliesWithAltFilePerm(java.security.Permission)staticPermissionsOnlystaticPermissionsOnly()getPermissionsgetPermissions()Principal[]getPrincipalsgetPrincipals()getCodeSourcegetCodeSource()ProtectionDomain(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])ProtectionDomain(java.security.CodeSource,java.security.PermissionCollection)Service/modules/java.base/java/security/Provider$Service.classsupportsParametersupportsParameter(java.lang.Object)newInstance(java.lang.Object)getProvidergetProvider()Service(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)removeAttributeremoveAttribute(java.lang.String,java.lang.String)addAttributeaddAttribute(java.lang.String,java.lang.String)Provider/modules/java.base/java/security/Provider.classremoveServiceremoveService(java.security.Provider.Service)getDefaultSecureRandomServicegetDefaultSecureRandomService()putServiceputService(java.security.Provider.Service)Set<Service>Collection<Service>Iterable<Service>getServicesgetServices()getServicegetService(java.lang.String,java.lang.String)Enumeration<Object>keyskeys()BiConsumer<? super Object,? super Object>? extends ObjectBiFunction<? super Object,? super Object,? extends Object>Function<? super Object,? extends Object>Collection<Object>Iterable<Object>Set<Object>Entry<Object,Object>Set<Entry<Object,Object>>Collection<Entry<Object,Object>>Iterable<Entry<Object,Object>>load(java.io.InputStream)getInfogetInfo()getVersionStrgetVersionStr()getVersiongetVersion()isConfiguredisConfigured()configureconfigure(java.lang.String)Provider(java.lang.String,java.lang.String,java.lang.String)Provider(java.lang.String,double,java.lang.String)PublicKey/modules/java.base/java/security/PublicKey.classSignatureException/modules/java.base/java/security/SignatureException.classSignatureException(java.lang.Throwable)SignatureException(java.lang.String,java.lang.Throwable)SignatureException(java.lang.String)SignatureException()Timestamp/modules/java.base/java/security/Timestamp.classTimestamp(java.util.Date,java.security.cert.CertPath)java.security.certCertPath/modules/java.base/java/security/cert/CertPath.class/modules/java.base/java/security/certwriteReplacewriteReplace()? extends CertificateList<? extends Certificate>SequencedCollection<? extends Certificate>Collection<? extends Certificate>Iterable<? extends Certificate>getEncoded(java.lang.String)Iterator<String>getEncodingsgetEncodings()CertPath(java.lang.String)Certificate/modules/java.base/java/security/cert/Certificate.classgetPublicKeygetPublicKey()verifyverify(java.security.PublicKey,java.security.Provider)verify(java.security.PublicKey,java.lang.String)verify(java.security.PublicKey)Certificate(java.lang.String)CertificateEncodingException/modules/java.base/java/security/cert/CertificateEncodingException.classCertificateEncodingException(java.lang.Throwable)CertificateEncodingException(java.lang.String,java.lang.Throwable)CertificateEncodingException(java.lang.String)CertificateEncodingException()CertificateException/modules/java.base/java/security/cert/CertificateException.classCertificateException(java.lang.Throwable)CertificateException(java.lang.String,java.lang.Throwable)CertificateException(java.lang.String)CertificateException()java.security.specAlgorithmParameterSpec/modules/java.base/java/security/spec/AlgorithmParameterSpec.class/modules/java.base/java/security/specjava.sql/modules/java.sql/java/sql/Array.class/modules/java.sql/java/sql/modules/java.sql/java/modules/java.sqlfreefree()Map<String,Class<?>>getResultSetgetResultSet(long,int,java.util.Map)getResultSet(long,int)getResultSet(java.util.Map)getResultSet()getArraygetArray(long,int,java.util.Map)getArray(long,int)getArray(java.util.Map)getArray()getBaseTypegetBaseType()getBaseTypeNamegetBaseTypeName()Blob/modules/java.sql/java/sql/Blob.classgetBinaryStreamgetBinaryStream(long,long)setBinaryStreamsetBinaryStream(long)setBytessetBytes(long,byte[],int,int)setBytes(long,byte[])position(java.sql.Blob,long)position(byte[],long)getBinaryStream()getBytes(long,int)CallableStatement/modules/java.sql/java/sql/CallableStatement.classregisterOutParameterregisterOutParameter(java.lang.String,java.sql.SQLType,java.lang.String)registerOutParameter(java.lang.String,java.sql.SQLType,int)registerOutParameter(java.lang.String,java.sql.SQLType)registerOutParameter(int,java.sql.SQLType,java.lang.String)registerOutParameter(int,java.sql.SQLType,int)registerOutParameter(int,java.sql.SQLType)setObjectsetObject(java.lang.String,java.lang.Object,java.sql.SQLType)setObject(java.lang.String,java.lang.Object,java.sql.SQLType,int)getObjectgetObject(java.lang.String,java.lang.Class)getObject(int,java.lang.Class)setNClobsetNClob(java.lang.String,java.io.Reader)setBlobsetBlob(java.lang.String,java.io.InputStream)setClobsetClob(java.lang.String,java.io.Reader)setNCharacterStreamsetNCharacterStream(java.lang.String,java.io.Reader)setCharacterStreamsetCharacterStream(java.lang.String,java.io.Reader)setBinaryStream(java.lang.String,java.io.InputStream)setAsciiStreamsetAsciiStream(java.lang.String,java.io.InputStream)setCharacterStream(java.lang.String,java.io.Reader,long)setBinaryStream(java.lang.String,java.io.InputStream,long)setAsciiStream(java.lang.String,java.io.InputStream,long)setClob(java.lang.String,java.sql.Clob)setBlob(java.lang.String,java.sql.Blob)getCharacterStreamgetCharacterStream(java.lang.String)getCharacterStream(int)getNCharacterStreamgetNCharacterStream(java.lang.String)getNCharacterStream(int)getNStringgetNString(java.lang.String)getNString(int)getSQLXMLgetSQLXML(java.lang.String)getSQLXML(int)setSQLXMLsetSQLXML(java.lang.String,java.sql.SQLXML)getNClobgetNClob(java.lang.String)getNClob(int)setNClob(java.lang.String,java.io.Reader,long)setBlob(java.lang.String,java.io.InputStream,long)setClob(java.lang.String,java.io.Reader,long)setNClob(java.lang.String,java.sql.NClob)setNCharacterStream(java.lang.String,java.io.Reader,long)setNStringsetNString(java.lang.String,java.lang.String)setRowIdsetRowId(java.lang.String,java.sql.RowId)getRowIdgetRowId(java.lang.String)getRowId(int)getURL(java.lang.String)getTimestamp(java.lang.String,java.util.Calendar)getTimegetTime(java.lang.String,java.util.Calendar)getDate(java.lang.String,java.util.Calendar)getArray(java.lang.String)getClobgetClob(java.lang.String)getBlobgetBlob(java.lang.String)getRef(java.lang.String)getObject(java.lang.String,java.util.Map)getBigDecimalgetBigDecimal(java.lang.String)getObject(java.lang.String)getTimestamp(java.lang.String)getTime(java.lang.String)getDate(java.lang.String)getDouble(java.lang.String)getFloat(java.lang.String)getInt(java.lang.String)getShort(java.lang.String)getByte(java.lang.String)getString(java.lang.String)setNullsetNull(java.lang.String,int,java.lang.String)setTimestampsetTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)setTimesetTime(java.lang.String,java.sql.Time,java.util.Calendar)setDatesetDate(java.lang.String,java.sql.Date,java.util.Calendar)setCharacterStream(java.lang.String,java.io.Reader,int)setObject(java.lang.String,java.lang.Object)setObject(java.lang.String,java.lang.Object,int)setObject(java.lang.String,java.lang.Object,int,int)setBinaryStream(java.lang.String,java.io.InputStream,int)setAsciiStream(java.lang.String,java.io.InputStream,int)setTimestamp(java.lang.String,java.sql.Timestamp)setTime(java.lang.String,java.sql.Time)setDate(java.lang.String,java.sql.Date)setBytes(java.lang.String,byte[])setString(java.lang.String,java.lang.String)setBigDecimalsetBigDecimal(java.lang.String,java.math.BigDecimal)setDouble(java.lang.String,double)setFloat(java.lang.String,float)setLong(java.lang.String,long)setInt(java.lang.String,int)setShort(java.lang.String,short)setByte(java.lang.String,byte)setBoolean(java.lang.String,boolean)setNull(java.lang.String,int)setURL(java.lang.String,java.net.URL)getURL(int)registerOutParameter(java.lang.String,int,java.lang.String)registerOutParameter(java.lang.String,int,int)registerOutParameter(java.lang.String,int)registerOutParameter(int,int,java.lang.String)getTimestamp(int,java.util.Calendar)getTime(int,java.util.Calendar)getDate(int,java.util.Calendar)getArray(int)getClob(int)getBlob(int)getRef(int)getObject(int,java.util.Map)getBigDecimal(int)getObject(int)getTimestamp(int)getTime(int)getDate(int)getBytes(int)getBigDecimal(int,int)getByte(int)getBoolean(int)getString(int)wasNullwasNull()registerOutParameter(int,int,int)registerOutParameter(int,int)ClientInfoStatus/modules/java.sql/java/sql/ClientInfoStatus.classEnum<ClientInfoStatus>Comparable<ClientInfoStatus>compareTo(java.sql.ClientInfoStatus)EnumDesc<ClientInfoStatus>DynamicConstantDesc<ClientInfoStatus>Optional<EnumDesc<ClientInfoStatus>>Class<ClientInfoStatus>Enum<ClientInfoStatus>(java.lang.String,int)ClientInfoStatus[]REASON_VALUE_TRUNCATEDREASON_VALUE_INVALIDREASON_UNKNOWN_PROPERTYREASON_UNKNOWNClob/modules/java.sql/java/sql/Clob.classgetCharacterStream(long,long)setCharacterStream(long)setAsciiStream(long)setString(long,java.lang.String,int,int)position(java.sql.Clob,long)position(java.lang.String,long)getAsciiStreamgetAsciiStream()getCharacterStream()getSubStringgetSubString(long,int)Connection/modules/java.sql/java/sql/Connection.classsetShardingKeysetShardingKey(java.sql.ShardingKey)setShardingKey(java.sql.ShardingKey,java.sql.ShardingKey)setShardingKeyIfValidsetShardingKeyIfValid(java.sql.ShardingKey,int)setShardingKeyIfValid(java.sql.ShardingKey,java.sql.ShardingKey,int)endRequestendRequest()beginRequestbeginRequest()getNetworkTimeoutgetNetworkTimeout()setNetworkTimeoutsetNetworkTimeout(java.util.concurrent.Executor,int)abortabort(java.util.concurrent.Executor)getSchemagetSchema()setSchemasetSchema(java.lang.String)createStructcreateStruct(java.lang.String,java.lang.Object[])createArrayOfcreateArrayOf(java.lang.String,java.lang.Object[])getClientInfogetClientInfo()getClientInfo(java.lang.String)setClientInfosetClientInfo(java.util.Properties)setClientInfo(java.lang.String,java.lang.String)isValid(int)createSQLXMLcreateSQLXML()createNClobcreateNClob()createBlobcreateBlob()createClobcreateClob()prepareStatementprepareStatement(java.lang.String,java.lang.String[])prepareStatement(java.lang.String,int[])prepareStatement(java.lang.String,int)prepareCallprepareCall(java.lang.String,int,int,int)prepareStatement(java.lang.String,int,int,int)createStatementcreateStatement(int,int,int)releaseSavepointreleaseSavepoint(java.sql.Savepoint)rollbackrollback(java.sql.Savepoint)setSavepointsetSavepoint(java.lang.String)setSavepoint()getHoldabilitygetHoldability()setHoldabilitysetHoldability(int)setTypeMapsetTypeMap(java.util.Map)getTypeMapgetTypeMap()prepareCall(java.lang.String,int,int)prepareStatement(java.lang.String,int,int)createStatement(int,int)clearWarningsclearWarnings()getWarningsgetWarnings()getTransactionIsolationgetTransactionIsolation()setTransactionIsolationsetTransactionIsolation(int)getCataloggetCatalog()setCatalogsetCatalog(java.lang.String)setReadOnly(boolean)getMetaDatagetMetaData()isClosedisClosed()rollback()commitcommit()getAutoCommitgetAutoCommit()setAutoCommitsetAutoCommit(boolean)nativeSQLnativeSQL(java.lang.String)prepareCall(java.lang.String)prepareStatement(java.lang.String)createStatement()TRANSACTION_SERIALIZABLETRANSACTION_REPEATABLE_READTRANSACTION_READ_COMMITTEDTRANSACTION_READ_UNCOMMITTEDTRANSACTION_NONEDatabaseMetaData/modules/java.sql/java/sql/DatabaseMetaData.classsupportsShardingsupportsSharding()supportsRefCursorssupportsRefCursors()getMaxLogicalLobSizegetMaxLogicalLobSize()generatedKeyAlwaysReturnedgeneratedKeyAlwaysReturned()getPseudoColumnsgetPseudoColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)getFunctionColumnsgetFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)getFunctionsgetFunctions(java.lang.String,java.lang.String,java.lang.String)getClientInfoPropertiesgetClientInfoProperties()autoCommitFailureClosesAllResultSetsautoCommitFailureClosesAllResultSets()supportsStoredFunctionsUsingCallSyntaxsupportsStoredFunctionsUsingCallSyntax()getSchemasgetSchemas(java.lang.String,java.lang.String)getRowIdLifetimegetRowIdLifetime()supportsStatementPoolingsupportsStatementPooling()locatorsUpdateCopylocatorsUpdateCopy()getSQLStateTypegetSQLStateType()getJDBCMinorVersiongetJDBCMinorVersion()getJDBCMajorVersiongetJDBCMajorVersion()getDatabaseMinorVersiongetDatabaseMinorVersion()getDatabaseMajorVersiongetDatabaseMajorVersion()getResultSetHoldabilitygetResultSetHoldability()supportsResultSetHoldabilitysupportsResultSetHoldability(int)getAttributesgetAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)getSuperTablesgetSuperTables(java.lang.String,java.lang.String,java.lang.String)getSuperTypesgetSuperTypes(java.lang.String,java.lang.String,java.lang.String)supportsGetGeneratedKeyssupportsGetGeneratedKeys()supportsMultipleOpenResultssupportsMultipleOpenResults()supportsNamedParameterssupportsNamedParameters()supportsSavepointssupportsSavepoints()getConnectiongetConnection()getUDTsgetUDTs(java.lang.String,java.lang.String,java.lang.String,int[])supportsBatchUpdatessupportsBatchUpdates()insertsAreDetectedinsertsAreDetected(int)deletesAreDetecteddeletesAreDetected(int)updatesAreDetectedupdatesAreDetected(int)othersInsertsAreVisibleothersInsertsAreVisible(int)othersDeletesAreVisibleothersDeletesAreVisible(int)othersUpdatesAreVisibleothersUpdatesAreVisible(int)ownInsertsAreVisibleownInsertsAreVisible(int)ownDeletesAreVisibleownDeletesAreVisible(int)ownUpdatesAreVisibleownUpdatesAreVisible(int)supportsResultSetConcurrencysupportsResultSetConcurrency(int,int)supportsResultSetTypesupportsResultSetType(int)getIndexInfogetIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)getTypeInfogetTypeInfo()getCrossReferencegetCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)getExportedKeysgetExportedKeys(java.lang.String,java.lang.String,java.lang.String)getImportedKeysgetImportedKeys(java.lang.String,java.lang.String,java.lang.String)getPrimaryKeysgetPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)getVersionColumnsgetVersionColumns(java.lang.String,java.lang.String,java.lang.String)getBestRowIdentifiergetBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)getTablePrivilegesgetTablePrivileges(java.lang.String,java.lang.String,java.lang.String)getColumnPrivilegesgetColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)getColumnsgetColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)getTableTypesgetTableTypes()getCatalogsgetCatalogs()getSchemas()getTablesgetTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])getProcedureColumnsgetProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)getProceduresgetProcedures(java.lang.String,java.lang.String,java.lang.String)dataDefinitionIgnoredInTransactionsdataDefinitionIgnoredInTransactions()dataDefinitionCausesTransactionCommitdataDefinitionCausesTransactionCommit()supportsDataManipulationTransactionsOnlysupportsDataManipulationTransactionsOnly()supportsDataDefinitionAndDataManipulationTransactionssupportsDataDefinitionAndDataManipulationTransactions()supportsTransactionIsolationLevelsupportsTransactionIsolationLevel(int)supportsTransactionssupportsTransactions()getDefaultTransactionIsolationgetDefaultTransactionIsolation()getMaxUserNameLengthgetMaxUserNameLength()getMaxTablesInSelectgetMaxTablesInSelect()getMaxTableNameLengthgetMaxTableNameLength()getMaxStatementsgetMaxStatements()getMaxStatementLengthgetMaxStatementLength()doesMaxRowSizeIncludeBlobsdoesMaxRowSizeIncludeBlobs()getMaxRowSizegetMaxRowSize()getMaxCatalogNameLengthgetMaxCatalogNameLength()getMaxProcedureNameLengthgetMaxProcedureNameLength()getMaxSchemaNameLengthgetMaxSchemaNameLength()getMaxIndexLengthgetMaxIndexLength()getMaxCursorNameLengthgetMaxCursorNameLength()getMaxConnectionsgetMaxConnections()getMaxColumnsInTablegetMaxColumnsInTable()getMaxColumnsInSelectgetMaxColumnsInSelect()getMaxColumnsInOrderBygetMaxColumnsInOrderBy()getMaxColumnsInIndexgetMaxColumnsInIndex()getMaxColumnsInGroupBygetMaxColumnsInGroupBy()getMaxColumnNameLengthgetMaxColumnNameLength()getMaxCharLiteralLengthgetMaxCharLiteralLength()getMaxBinaryLiteralLengthgetMaxBinaryLiteralLength()supportsOpenStatementsAcrossRollbacksupportsOpenStatementsAcrossRollback()supportsOpenStatementsAcrossCommitsupportsOpenStatementsAcrossCommit()supportsOpenCursorsAcrossRollbacksupportsOpenCursorsAcrossRollback()supportsOpenCursorsAcrossCommitsupportsOpenCursorsAcrossCommit()supportsUnionAllsupportsUnionAll()supportsUnionsupportsUnion()supportsCorrelatedSubqueriessupportsCorrelatedSubqueries()supportsSubqueriesInQuantifiedssupportsSubqueriesInQuantifieds()supportsSubqueriesInInssupportsSubqueriesInIns()supportsSubqueriesInExistssupportsSubqueriesInExists()supportsSubqueriesInComparisonssupportsSubqueriesInComparisons()supportsStoredProceduressupportsStoredProcedures()supportsSelectForUpdatesupportsSelectForUpdate()supportsPositionedUpdatesupportsPositionedUpdate()supportsPositionedDeletesupportsPositionedDelete()supportsCatalogsInPrivilegeDefinitionssupportsCatalogsInPrivilegeDefinitions()supportsCatalogsInIndexDefinitionssupportsCatalogsInIndexDefinitions()supportsCatalogsInTableDefinitionssupportsCatalogsInTableDefinitions()supportsCatalogsInProcedureCallssupportsCatalogsInProcedureCalls()supportsCatalogsInDataManipulationsupportsCatalogsInDataManipulation()supportsSchemasInPrivilegeDefinitionssupportsSchemasInPrivilegeDefinitions()supportsSchemasInIndexDefinitionssupportsSchemasInIndexDefinitions()supportsSchemasInTableDefinitionssupportsSchemasInTableDefinitions()supportsSchemasInProcedureCallssupportsSchemasInProcedureCalls()supportsSchemasInDataManipulationsupportsSchemasInDataManipulation()getCatalogSeparatorgetCatalogSeparator()isCatalogAtStartisCatalogAtStart()getCatalogTermgetCatalogTerm()getProcedureTermgetProcedureTerm()getSchemaTermgetSchemaTerm()supportsLimitedOuterJoinssupportsLimitedOuterJoins()supportsFullOuterJoinssupportsFullOuterJoins()supportsOuterJoinssupportsOuterJoins()supportsIntegrityEnhancementFacilitysupportsIntegrityEnhancementFacility()supportsANSI92FullSQLsupportsANSI92FullSQL()supportsANSI92IntermediateSQLsupportsANSI92IntermediateSQL()supportsANSI92EntryLevelSQLsupportsANSI92EntryLevelSQL()supportsExtendedSQLGrammarsupportsExtendedSQLGrammar()supportsCoreSQLGrammarsupportsCoreSQLGrammar()supportsMinimumSQLGrammarsupportsMinimumSQLGrammar()supportsNonNullableColumnssupportsNonNullableColumns()supportsMultipleTransactionssupportsMultipleTransactions()supportsMultipleResultSetssupportsMultipleResultSets()supportsLikeEscapeClausesupportsLikeEscapeClause()supportsGroupByBeyondSelectsupportsGroupByBeyondSelect()supportsGroupByUnrelatedsupportsGroupByUnrelated()supportsGroupBysupportsGroupBy()supportsOrderByUnrelatedsupportsOrderByUnrelated()supportsExpressionsInOrderBysupportsExpressionsInOrderBy()supportsDifferentTableCorrelationNamessupportsDifferentTableCorrelationNames()supportsTableCorrelationNamessupportsTableCorrelationNames()supportsConvertsupportsConvert(int,int)supportsConvert()nullPlusNonNullIsNullnullPlusNonNullIsNull()supportsColumnAliasingsupportsColumnAliasing()supportsAlterTableWithDropColumnsupportsAlterTableWithDropColumn()supportsAlterTableWithAddColumnsupportsAlterTableWithAddColumn()getExtraNameCharactersgetExtraNameCharacters()getSearchStringEscapegetSearchStringEscape()getTimeDateFunctionsgetTimeDateFunctions()getSystemFunctionsgetSystemFunctions()getStringFunctionsgetStringFunctions()getNumericFunctionsgetNumericFunctions()getSQLKeywordsgetSQLKeywords()getIdentifierQuoteStringgetIdentifierQuoteString()storesMixedCaseQuotedIdentifiersstoresMixedCaseQuotedIdentifiers()storesLowerCaseQuotedIdentifiersstoresLowerCaseQuotedIdentifiers()storesUpperCaseQuotedIdentifiersstoresUpperCaseQuotedIdentifiers()supportsMixedCaseQuotedIdentifierssupportsMixedCaseQuotedIdentifiers()storesMixedCaseIdentifiersstoresMixedCaseIdentifiers()storesLowerCaseIdentifiersstoresLowerCaseIdentifiers()storesUpperCaseIdentifiersstoresUpperCaseIdentifiers()supportsMixedCaseIdentifierssupportsMixedCaseIdentifiers()usesLocalFilePerTableusesLocalFilePerTable()usesLocalFilesusesLocalFiles()getDriverMinorVersiongetDriverMinorVersion()getDriverMajorVersiongetDriverMajorVersion()getDriverVersiongetDriverVersion()getDriverNamegetDriverName()getDatabaseProductVersiongetDatabaseProductVersion()getDatabaseProductNamegetDatabaseProductName()nullsAreSortedAtEndnullsAreSortedAtEnd()nullsAreSortedAtStartnullsAreSortedAtStart()nullsAreSortedLownullsAreSortedLow()nullsAreSortedHighnullsAreSortedHigh()getUserNamegetUserName()allTablesAreSelectableallTablesAreSelectable()allProceduresAreCallableallProceduresAreCallable()functionReturnsTablefunctionNoTablefunctionResultUnknownfunctionNullableUnknownfunctionNullablefunctionNoNullsfunctionColumnResultfunctionReturnfunctionColumnOutfunctionColumnInOutfunctionColumnInfunctionColumnUnknownsqlStateSQL99sqlStateSQLsqlStateXOpenattributeNullableUnknownattributeNullableattributeNoNullstableIndexOthertableIndexHashedtableIndexClusteredtableIndexStatistictypeSearchabletypePredBasictypePredChartypePredNonetypeNullableUnknowntypeNullabletypeNoNullsimportedKeyNotDeferrableimportedKeyInitiallyImmediateimportedKeyInitiallyDeferredimportedKeySetDefaultimportedKeyNoActionimportedKeySetNullimportedKeyRestrictimportedKeyCascadeversionColumnPseudoversionColumnNotPseudoversionColumnUnknownbestRowPseudobestRowNotPseudobestRowUnknownbestRowSessionbestRowTransactionbestRowTemporarycolumnNullableUnknowncolumnNullablecolumnNoNullsprocedureNullableUnknownprocedureNullableprocedureNoNullsprocedureColumnResultprocedureColumnReturnprocedureColumnOutprocedureColumnInOutprocedureColumnInprocedureColumnUnknownprocedureReturnsResultprocedureNoResultprocedureResultUnknownDate/modules/java.sql/java/sql/Date.classtoLocalDatetoLocalDate()valueOf(java.time.LocalDate)setSecondssetSeconds(int)setMinutessetMinutes(int)setHourssetHours(int)getSecondsgetSeconds()getMinutesgetMinutes()getHoursgetHours()formatDecimalIntformatDecimalInt(int,char[],int,int)setTime(long)Date(long)Date(int,int,int)Driver/modules/java.sql/java/sql/Driver.classgetParentLoggergetParentLogger()jdbcCompliantjdbcCompliant()getMinorVersiongetMinorVersion()getMajorVersiongetMajorVersion()DriverPropertyInfo[]getPropertyInfogetPropertyInfo(java.lang.String,java.util.Properties)acceptsURLacceptsURL(java.lang.String)connect(java.lang.String,java.util.Properties)DriverAction/modules/java.sql/java/sql/DriverAction.classderegisterderegister()DriverManager/modules/java.sql/java/sql/DriverManager.classgetLogStreamgetLogStream()setLogStreamsetLogStream(java.io.PrintStream)getLoginTimeoutgetLoginTimeout()setLoginTimeoutsetLoginTimeout(int)Stream<Driver>BaseStream<Driver,Stream<Driver>>driversdrivers()Enumeration<Driver>getDriversgetDrivers()deregisterDriverderegisterDriver(java.sql.Driver)registerDriverregisterDriver(java.sql.Driver,java.sql.DriverAction)registerDriver(java.sql.Driver)getDrivergetDriver(java.lang.String)getConnection(java.lang.String)getConnection(java.lang.String,java.lang.String,java.lang.String)getConnection(java.lang.String,java.util.Properties)setLogWritersetLogWriter(java.io.PrintWriter)getLogWritergetLogWriter()DEREGISTER_DRIVER_PERMISSIONSET_LOG_PERMISSIONDriverPropertyInfo/modules/java.sql/java/sql/DriverPropertyInfo.classDriverPropertyInfo(java.lang.String,java.lang.String)choicesrequireddescriptionNClob/modules/java.sql/java/sql/NClob.classParameterMetaData/modules/java.sql/java/sql/ParameterMetaData.classgetParameterModegetParameterMode(int)getParameterClassNamegetParameterClassName(int)getParameterTypeNamegetParameterTypeName(int)getParameterTypegetParameterType(int)getScalegetScale(int)getPrecision(int)isSignedisSigned(int)isNullableisNullable(int)parameterModeOutparameterModeInOutparameterModeInparameterModeUnknownparameterNullableUnknownparameterNullableparameterNoNullsPreparedStatement/modules/java.sql/java/sql/PreparedStatement.classexecuteLargeUpdateexecuteLargeUpdate()setObject(int,java.lang.Object,java.sql.SQLType)setObject(int,java.lang.Object,java.sql.SQLType,int)setNClob(int,java.io.Reader)setBlob(int,java.io.InputStream)setClob(int,java.io.Reader)setNCharacterStream(int,java.io.Reader)setCharacterStream(int,java.io.Reader)setBinaryStream(int,java.io.InputStream)setAsciiStream(int,java.io.InputStream)setCharacterStream(int,java.io.Reader,long)setBinaryStream(int,java.io.InputStream,long)setAsciiStream(int,java.io.InputStream,long)setObject(int,java.lang.Object,int,int)setSQLXML(int,java.sql.SQLXML)setNClob(int,java.io.Reader,long)setBlob(int,java.io.InputStream,long)setClob(int,java.io.Reader,long)setNClob(int,java.sql.NClob)setNCharacterStream(int,java.io.Reader,long)setNString(int,java.lang.String)setRowId(int,java.sql.RowId)getParameterMetaDatagetParameterMetaData()setURL(int,java.net.URL)setNull(int,int,java.lang.String)setTimestamp(int,java.sql.Timestamp,java.util.Calendar)setTime(int,java.sql.Time,java.util.Calendar)setDate(int,java.sql.Date,java.util.Calendar)setArraysetArray(int,java.sql.Array)setClob(int,java.sql.Clob)setBlob(int,java.sql.Blob)setRefsetRef(int,java.sql.Ref)setCharacterStream(int,java.io.Reader,int)addBatchaddBatch()executeexecute()setObject(int,java.lang.Object)setObject(int,java.lang.Object,int)clearParametersclearParameters()setBinaryStream(int,java.io.InputStream,int)setUnicodeStreamsetUnicodeStream(int,java.io.InputStream,int)setAsciiStream(int,java.io.InputStream,int)setTimestamp(int,java.sql.Timestamp)setTime(int,java.sql.Time)setDate(int,java.sql.Date)setBytes(int,byte[])setString(int,java.lang.String)setBigDecimal(int,java.math.BigDecimal)setDouble(int,double)setFloat(int,float)setLong(int,long)setInt(int,int)setShort(int,short)setByte(int,byte)setBoolean(int,boolean)setNull(int,int)executeUpdateexecuteUpdate()executeQueryexecuteQuery()Ref/modules/java.sql/java/sql/Ref.classsetObject(java.lang.Object)getObject()getObject(java.util.Map)ResultSet/modules/java.sql/java/sql/ResultSet.classupdateObjectupdateObject(java.lang.String,java.lang.Object,java.sql.SQLType)updateObject(int,java.lang.Object,java.sql.SQLType)updateObject(java.lang.String,java.lang.Object,java.sql.SQLType,int)updateObject(int,java.lang.Object,java.sql.SQLType,int)updateNClobupdateNClob(java.lang.String,java.io.Reader)updateNClob(int,java.io.Reader)updateClobupdateClob(java.lang.String,java.io.Reader)updateClob(int,java.io.Reader)updateBlobupdateBlob(java.lang.String,java.io.InputStream)updateBlob(int,java.io.InputStream)updateCharacterStreamupdateCharacterStream(java.lang.String,java.io.Reader)updateBinaryStreamupdateBinaryStream(java.lang.String,java.io.InputStream)updateAsciiStreamupdateAsciiStream(java.lang.String,java.io.InputStream)updateCharacterStream(int,java.io.Reader)updateBinaryStream(int,java.io.InputStream)updateAsciiStream(int,java.io.InputStream)updateNCharacterStreamupdateNCharacterStream(java.lang.String,java.io.Reader)updateNCharacterStream(int,java.io.Reader)updateNClob(java.lang.String,java.io.Reader,long)updateNClob(int,java.io.Reader,long)updateClob(java.lang.String,java.io.Reader,long)updateClob(int,java.io.Reader,long)updateBlob(java.lang.String,java.io.InputStream,long)updateBlob(int,java.io.InputStream,long)updateCharacterStream(java.lang.String,java.io.Reader,long)updateBinaryStream(java.lang.String,java.io.InputStream,long)updateAsciiStream(java.lang.String,java.io.InputStream,long)updateCharacterStream(int,java.io.Reader,long)updateBinaryStream(int,java.io.InputStream,long)updateAsciiStream(int,java.io.InputStream,long)updateNCharacterStream(java.lang.String,java.io.Reader,long)updateNCharacterStream(int,java.io.Reader,long)updateSQLXMLupdateSQLXML(java.lang.String,java.sql.SQLXML)updateSQLXML(int,java.sql.SQLXML)updateNClob(java.lang.String,java.sql.NClob)updateNClob(int,java.sql.NClob)updateNStringupdateNString(java.lang.String,java.lang.String)updateNString(int,java.lang.String)updateRowIdupdateRowId(java.lang.String,java.sql.RowId)updateRowId(int,java.sql.RowId)updateArrayupdateArray(java.lang.String,java.sql.Array)updateArray(int,java.sql.Array)updateClob(java.lang.String,java.sql.Clob)updateClob(int,java.sql.Clob)updateBlob(java.lang.String,java.sql.Blob)updateBlob(int,java.sql.Blob)updateRefupdateRef(java.lang.String,java.sql.Ref)updateRef(int,java.sql.Ref)getStatementgetStatement()moveToCurrentRowmoveToCurrentRow()moveToInsertRowmoveToInsertRow()cancelRowUpdatescancelRowUpdates()refreshRowrefreshRow()deleteRowdeleteRow()updateRowupdateRow()insertRowinsertRow()updateObject(java.lang.String,java.lang.Object)updateObject(java.lang.String,java.lang.Object,int)updateCharacterStream(java.lang.String,java.io.Reader,int)updateBinaryStream(java.lang.String,java.io.InputStream,int)updateAsciiStream(java.lang.String,java.io.InputStream,int)updateTimestampupdateTimestamp(java.lang.String,java.sql.Timestamp)updateTimeupdateTime(java.lang.String,java.sql.Time)updateDateupdateDate(java.lang.String,java.sql.Date)updateBytesupdateBytes(java.lang.String,byte[])updateStringupdateString(java.lang.String,java.lang.String)updateBigDecimalupdateBigDecimal(java.lang.String,java.math.BigDecimal)updateDoubleupdateDouble(java.lang.String,double)updateFloatupdateFloat(java.lang.String,float)updateLongupdateLong(java.lang.String,long)updateIntupdateInt(java.lang.String,int)updateShortupdateShort(java.lang.String,short)updateByteupdateByte(java.lang.String,byte)updateBooleanupdateBoolean(java.lang.String,boolean)updateNullupdateNull(java.lang.String)updateObject(int,java.lang.Object)updateObject(int,java.lang.Object,int)updateCharacterStream(int,java.io.Reader,int)updateBinaryStream(int,java.io.InputStream,int)updateAsciiStream(int,java.io.InputStream,int)updateTimestamp(int,java.sql.Timestamp)updateTime(int,java.sql.Time)updateDate(int,java.sql.Date)updateBytes(int,byte[])updateString(int,java.lang.String)updateBigDecimal(int,java.math.BigDecimal)updateDouble(int,double)updateFloat(int,float)updateLong(int,long)updateInt(int,int)updateShort(int,short)updateByte(int,byte)updateBoolean(int,boolean)updateNull(int)rowDeletedrowDeleted()rowInsertedrowInserted()rowUpdatedrowUpdated()getConcurrencygetConcurrency()getFetchSizegetFetchSize()setFetchSizesetFetchSize(int)getFetchDirectiongetFetchDirection()setFetchDirectionsetFetchDirection(int)previousprevious()relativerelative(int)absoluteabsolute(int)getRowgetRow()lastlast()firstfirst()afterLastafterLast()beforeFirstbeforeFirst()isLastisLast()isFirstisFirst()isAfterLastisAfterLast()isBeforeFirstisBeforeFirst()findColumnfindColumn(java.lang.String)getCursorNamegetCursorName()getBinaryStream(java.lang.String)getUnicodeStreamgetUnicodeStream(java.lang.String)getAsciiStream(java.lang.String)getBigDecimal(java.lang.String,int)getBinaryStream(int)getUnicodeStream(int)getAsciiStream(int)next()CLOSE_CURSORS_AT_COMMITHOLD_CURSORS_OVER_COMMITCONCUR_UPDATABLECONCUR_READ_ONLYTYPE_SCROLL_SENSITIVETYPE_SCROLL_INSENSITIVETYPE_FORWARD_ONLYFETCH_UNKNOWNFETCH_REVERSEFETCH_FORWARDResultSetMetaData/modules/java.sql/java/sql/ResultSetMetaData.classgetColumnClassNamegetColumnClassName(int)isDefinitelyWritableisDefinitelyWritable(int)isWritableisWritable(int)isReadOnly(int)getColumnTypeNamegetColumnTypeName(int)getColumnTypegetColumnType(int)getCatalogNamegetCatalogName(int)getTableNamegetTableName(int)getSchemaNamegetSchemaName(int)getColumnNamegetColumnName(int)getColumnLabelgetColumnLabel(int)getColumnDisplaySizegetColumnDisplaySize(int)isCurrencyisCurrency(int)isSearchableisSearchable(int)isCaseSensitiveisCaseSensitive(int)isAutoIncrementisAutoIncrement(int)getColumnCountgetColumnCount()RowId/modules/java.sql/java/sql/RowId.classRowIdLifetime/modules/java.sql/java/sql/RowIdLifetime.classEnum<RowIdLifetime>Comparable<RowIdLifetime>compareTo(java.sql.RowIdLifetime)EnumDesc<RowIdLifetime>DynamicConstantDesc<RowIdLifetime>Optional<EnumDesc<RowIdLifetime>>Class<RowIdLifetime>Enum<RowIdLifetime>(java.lang.String,int)RowIdLifetime[]ROWID_VALID_FOREVERROWID_VALID_TRANSACTIONROWID_VALID_SESSIONROWID_VALID_OTHERROWID_UNSUPPORTEDSQLClientInfoException/modules/java.sql/java/sql/SQLClientInfoException.classMap<String,ClientInfoStatus>getFailedPropertiesgetFailedProperties()SQLClientInfoException(java.lang.String,java.lang.String,int,java.util.Map,java.lang.Throwable)SQLClientInfoException(java.lang.String,java.lang.String,int,java.util.Map)SQLClientInfoException(java.lang.String,java.lang.String,java.util.Map,java.lang.Throwable)SQLClientInfoException(java.lang.String,java.lang.String,java.util.Map)SQLClientInfoException(java.lang.String,java.util.Map,java.lang.Throwable)SQLClientInfoException(java.lang.String,java.util.Map)SQLClientInfoException(java.util.Map,java.lang.Throwable)SQLClientInfoException(java.util.Map)SQLClientInfoException()SQLException/modules/java.sql/java/sql/SQLException.classIterable<Throwable>Spliterator<Throwable>? super ThrowableConsumer<? super Throwable>Iterator<Throwable>setNextExceptionsetNextException(java.sql.SQLException)getNextExceptiongetNextException()getErrorCodegetErrorCode()getSQLStategetSQLState()SQLException(java.lang.String,java.lang.String,int,java.lang.Throwable)SQLException(java.lang.String,java.lang.String,java.lang.Throwable)SQLException(java.lang.String,java.lang.Throwable)SQLException(java.lang.Throwable)SQLException()SQLException(java.lang.String)SQLException(java.lang.String,java.lang.String)SQLException(java.lang.String,java.lang.String,int)SQLFeatureNotSupportedException/modules/java.sql/java/sql/SQLFeatureNotSupportedException.classSQLFeatureNotSupportedException(java.lang.String,java.lang.String,int,java.lang.Throwable)SQLFeatureNotSupportedException(java.lang.String,java.lang.String,java.lang.Throwable)SQLFeatureNotSupportedException(java.lang.String,java.lang.Throwable)SQLFeatureNotSupportedException(java.lang.Throwable)SQLFeatureNotSupportedException(java.lang.String,java.lang.String,int)SQLFeatureNotSupportedException(java.lang.String,java.lang.String)SQLFeatureNotSupportedException(java.lang.String)SQLFeatureNotSupportedException()SQLNonTransientException/modules/java.sql/java/sql/SQLNonTransientException.classSQLNonTransientException(java.lang.String,java.lang.String,int,java.lang.Throwable)SQLNonTransientException(java.lang.String,java.lang.String,java.lang.Throwable)SQLNonTransientException(java.lang.String,java.lang.Throwable)SQLNonTransientException(java.lang.Throwable)SQLNonTransientException(java.lang.String,java.lang.String,int)SQLNonTransientException(java.lang.String,java.lang.String)SQLNonTransientException(java.lang.String)SQLNonTransientException()SQLPermission/modules/java.sql/java/sql/SQLPermission.classSQLPermission(java.lang.String,java.lang.String)SQLPermission(java.lang.String)SQLType/modules/java.sql/java/sql/SQLType.classgetVendorTypeNumbergetVendorTypeNumber()getVendorgetVendor()SQLWarning/modules/java.sql/java/sql/SQLWarning.classsetNextWarningsetNextWarning(java.sql.SQLWarning)getNextWarninggetNextWarning()SQLWarning(java.lang.String,java.lang.String,int,java.lang.Throwable)SQLWarning(java.lang.String,java.lang.String,java.lang.Throwable)SQLWarning(java.lang.String,java.lang.Throwable)SQLWarning(java.lang.Throwable)SQLWarning()SQLWarning(java.lang.String)SQLWarning(java.lang.String,java.lang.String)SQLWarning(java.lang.String,java.lang.String,int)SQLXML/modules/java.sql/java/sql/SQLXML.classsetResultsetResult(java.lang.Class)getSourcegetSource(java.lang.Class)setString(java.lang.String)getString()setCharacterStream()setBinaryStream()Savepoint/modules/java.sql/java/sql/Savepoint.classgetSavepointNamegetSavepointName()getSavepointIdgetSavepointId()ShardingKey/modules/java.sql/java/sql/ShardingKey.classStatement/modules/java.sql/java/sql/Statement.classenquoteNCharLiteralenquoteNCharLiteral(java.lang.String)isSimpleIdentifierisSimpleIdentifier(java.lang.String)enquoteIdentifierenquoteIdentifier(java.lang.String,boolean)enquoteLiteralenquoteLiteral(java.lang.String)executeLargeUpdate(java.lang.String,java.lang.String[])executeLargeUpdate(java.lang.String,int[])executeLargeUpdate(java.lang.String,int)executeLargeUpdate(java.lang.String)executeLargeBatchexecuteLargeBatch()getLargeMaxRowsgetLargeMaxRows()setLargeMaxRowssetLargeMaxRows(long)getLargeUpdateCountgetLargeUpdateCount()isCloseOnCompletionisCloseOnCompletion()closeOnCompletioncloseOnCompletion()isPoolableisPoolable()setPoolablesetPoolable(boolean)execute(java.lang.String,java.lang.String[])execute(java.lang.String,int[])execute(java.lang.String,int)executeUpdate(java.lang.String,java.lang.String[])executeUpdate(java.lang.String,int[])executeUpdate(java.lang.String,int)getGeneratedKeysgetGeneratedKeys()getMoreResultsgetMoreResults(int)executeBatchexecuteBatch()clearBatchclearBatch()addBatch(java.lang.String)getResultSetTypegetResultSetType()getResultSetConcurrencygetResultSetConcurrency()getMoreResults()getUpdateCountgetUpdateCount()execute(java.lang.String)setCursorNamesetCursorName(java.lang.String)setQueryTimeoutsetQueryTimeout(int)getQueryTimeoutgetQueryTimeout()setEscapeProcessingsetEscapeProcessing(boolean)setMaxRowssetMaxRows(int)getMaxRowsgetMaxRows()setMaxFieldSizesetMaxFieldSize(int)getMaxFieldSizegetMaxFieldSize()executeUpdate(java.lang.String)executeQuery(java.lang.String)NO_GENERATED_KEYSRETURN_GENERATED_KEYSEXECUTE_FAILEDSUCCESS_NO_INFOCLOSE_ALL_RESULTSKEEP_CURRENT_RESULTCLOSE_CURRENT_RESULTStruct/modules/java.sql/java/sql/Struct.classgetAttributes(java.util.Map)getAttributes()getSQLTypeNamegetSQLTypeName()Time/modules/java.sql/java/sql/Time.classtoLocalTimetoLocalTime()valueOf(java.time.LocalTime)setDate(int)setMonthsetMonth(int)setYearsetYear(int)getDaygetDay()getMonthgetMonth()getYeargetYear()Time(long)Time(int,int,int)/modules/java.sql/java/sql/Timestamp.classtoLocalDateTimetoLocalDateTime()valueOf(java.time.LocalDateTime)compareTo(java.util.Date)compareTo(java.sql.Timestamp)afterafter(java.sql.Timestamp)beforebefore(java.sql.Timestamp)equals(java.sql.Timestamp)setNanossetNanos(int)getNanosgetNanos()getTime()Timestamp(long)Timestamp(int,int,int,int,int,int,int)Wrapper/modules/java.sql/java/sql/Wrapper.classisWrapperForisWrapperFor(java.lang.Class)unwrap(java.lang.Class)java.textAttribute/modules/java.base/java/text/AttributedCharacterIterator$Attribute.class/modules/java.base/java/textreadResolvereadResolve()Attribute(java.lang.String)INPUT_METHOD_SEGMENTREADINGLANGUAGEAttributedCharacterIterator/modules/java.base/java/text/AttributedCharacterIterator.classSet<Attribute>Collection<Attribute>Iterable<Attribute>getAllAttributeKeysgetAllAttributeKeys()getAttribute(java.text.AttributedCharacterIterator.Attribute)Map<Attribute,Object>? extends AttributeSet<? extends Attribute>Collection<? extends Attribute>Iterable<? extends Attribute>getRunLimitgetRunLimit(java.util.Set)getRunLimit(java.text.AttributedCharacterIterator.Attribute)getRunLimit()getRunStartgetRunStart(java.util.Set)getRunStart(java.text.AttributedCharacterIterator.Attribute)getRunStart()CharacterIterator/modules/java.base/java/text/CharacterIterator.classgetEndIndexgetEndIndex()getBeginIndexgetBeginIndex()setIndexsetIndex(int)DONEFieldPosition/modules/java.base/java/text/FieldPosition.classgetFieldDelegategetFieldDelegate()setEndIndexsetEndIndex(int)setBeginIndexsetBeginIndex(int)getFieldAttributegetFieldAttribute()FieldPosition(java.text.Format.Field,int)FieldPosition(java.text.Format.Field)FieldPosition(int)beginIndexendIndexfield/modules/java.base/java/text/Format$Field.classField(java.lang.String)FieldDelegate/modules/java.base/java/text/Format$FieldDelegate.classformatted(int,java.text.Format.Field,java.lang.Object,int,int,java.lang.StringBuffer)formatted(java.text.Format.Field,java.lang.Object,int,int,java.lang.StringBuffer)Format/modules/java.base/java/text/Format.classcreateAttributedCharacterIteratorcreateAttributedCharacterIterator(java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator.Attribute,java.lang.Object)createAttributedCharacterIterator(java.lang.String,java.text.AttributedCharacterIterator.Attribute,java.lang.Object)AttributedCharacterIterator[]createAttributedCharacterIterator(java.text.AttributedCharacterIterator[])createAttributedCharacterIterator(java.lang.String)parseObjectparseObject(java.lang.String)parseObject(java.lang.String,java.text.ParsePosition)formatToCharacterIteratorformatToCharacterIterator(java.lang.Object)format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)format(java.lang.Object)Format()ParseException/modules/java.base/java/text/ParseException.classgetErrorOffsetgetErrorOffset()ParseException(java.lang.String,int)ParsePosition/modules/java.base/java/text/ParsePosition.classgetErrorIndexgetErrorIndex()setErrorIndexsetErrorIndex(int)ParsePosition(int)errorIndexjava.timeClock/modules/java.base/java/time/Clock.class/modules/java.base/java/timecurrentInstantcurrentInstant()instantinstant()millismillis()withZonewithZone(java.time.ZoneId)getZonegetZone()Clock()offset(java.time.Clock,java.time.Duration)fixedfixed(java.time.Instant,java.time.ZoneId)ticktick(java.time.Clock,java.time.Duration)tickMinutestickMinutes(java.time.ZoneId)tickSecondstickSeconds(java.time.ZoneId)tickMillistickMillis(java.time.ZoneId)systemsystem(java.time.ZoneId)systemDefaultZonesystemDefaultZone()systemUTCsystemUTC()DayOfWeek/modules/java.base/java/time/DayOfWeek.classEnum<DayOfWeek>Comparable<DayOfWeek>compareTo(java.time.DayOfWeek)EnumDesc<DayOfWeek>DynamicConstantDesc<DayOfWeek>Optional<EnumDesc<DayOfWeek>>Class<DayOfWeek>Enum<DayOfWeek>(java.lang.String,int)adjustIntoadjustInto(java.time.temporal.Temporal)java.time.temporalTemporalQuery<>/modules/java.base/java/time/temporal/TemporalQuery.class/modules/java.base/java/time/temporalquery(java.time.temporal.TemporalQuery)TemporalQuery<R>minusminus(long)plus(long)getLong(java.time.temporal.TemporalField)get(java.time.temporal.TemporalField)rangerange(java.time.temporal.TemporalField)isSupported(java.time.temporal.TemporalField)getDisplayName(java.time.format.TextStyle,java.util.Locale)from(java.time.temporal.TemporalAccessor)DayOfWeek[]SUNDAYSATURDAYFRIDAYTHURSDAYWEDNESDAYTUESDAYMONDAYDuration/modules/java.base/java/time/Duration.classComparable<Duration>compareTo(java.time.Duration)readExternalreadExternal(java.io.DataInput)writeExternalwriteExternal(java.io.DataOutput)truncatedTotruncatedTo(java.time.temporal.TemporalUnit)toNanosParttoNanosPart()toMillisParttoMillisPart()toSecondsParttoSecondsPart()toMinutesParttoMinutesPart()toHoursParttoHoursPart()toDaysParttoDaysPart()toNanostoNanos()toSecondstoSeconds()toMinutestoMinutes()toHourstoHours()toDaystoDays()subtractFromsubtractFrom(java.time.temporal.Temporal)addToaddTo(java.time.temporal.Temporal)negatednegated()dividedBydividedBy(java.time.Duration)dividedBy(long)multipliedBymultipliedBy(long)minusNanosminusNanos(long)minusMillisminusMillis(long)minusSecondsminusSeconds(long)minusMinutesminusMinutes(long)minusHoursminusHours(long)minusDaysminusDays(long)minus(long,java.time.temporal.TemporalUnit)minus(java.time.Duration)plusNanosplusNanos(long)plusMillisplusMillis(long)plusSecondsplusSeconds(long)plusMinutesplusMinutes(long)plusHoursplusHours(long)plusDaysplusDays(long)plus(long,java.time.temporal.TemporalUnit)plus(java.time.Duration)withNanoswithNanos(int)withSecondswithSeconds(long)getNanogetNano()isNegativeisNegative()isZeroisZero()isPositiveisPositive()List<TemporalUnit>SequencedCollection<TemporalUnit>Collection<TemporalUnit>Iterable<TemporalUnit>getUnitsgetUnits()get(java.time.temporal.TemporalUnit)betweenbetween(java.time.temporal.Temporal,java.time.temporal.Temporal)parse(java.lang.CharSequence)from(java.time.temporal.TemporalAmount)of(long,java.time.temporal.TemporalUnit)ofNanosofNanos(long)ofMillisofMillis(long)ofSecondsofSeconds(long,long)ofSeconds(long)ofMinutesofMinutes(long)ofHoursofHours(long)ofDaysofDays(long)Instant/modules/java.base/java/time/Instant.classComparable<Instant>compareTo(java.time.Instant)isBeforeisBefore(java.time.Instant)isAfterisAfter(java.time.Instant)toEpochMillitoEpochMilli()atZoneatZone(java.time.ZoneId)atOffsetatOffset(java.time.ZoneOffset)untiluntil(java.time.Instant)until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)minus(java.time.temporal.TemporalAmount)plus(java.time.temporal.TemporalAmount)withwith(java.time.temporal.TemporalField,long)with(java.time.temporal.TemporalAdjuster)getEpochSecondgetEpochSecond()isSupported(java.time.temporal.TemporalUnit)ofEpochMilliofEpochMilli(long)ofEpochSecondofEpochSecond(long,long)ofEpochSecond(long)nownow(java.time.Clock)now()MAXMINEPOCHInstantSource/modules/java.base/java/time/InstantSource.classoffset(java.time.InstantSource,java.time.Duration)fixed(java.time.Instant)tick(java.time.InstantSource,java.time.Duration)system()LocalDate/modules/java.base/java/time/LocalDate.classisEqualisEqual(java.time.chrono.ChronoLocalDate)isBefore(java.time.chrono.ChronoLocalDate)isAfter(java.time.chrono.ChronoLocalDate)compareTo0compareTo0(java.time.LocalDate)compareTo(java.time.chrono.ChronoLocalDate)toEpochSecondtoEpochSecond(java.time.LocalTime,java.time.ZoneOffset)toEpochDaytoEpochDay()atStartOfDayatStartOfDay(java.time.ZoneId)atStartOfDay()atTimeatTime(java.time.OffsetTime)atTime(int,int,int,int)atTime(int,int,int)atTime(int,int)atTime(java.time.LocalTime)format(java.time.format.DateTimeFormatter)Stream<LocalDate>BaseStream<LocalDate,Stream<LocalDate>>datesUntildatesUntil(java.time.LocalDate,java.time.Period)datesUntil(java.time.LocalDate)until(java.time.chrono.ChronoLocalDate)daysUntildaysUntil(java.time.LocalDate)minusWeeksminusWeeks(long)minusMonthsminusMonths(long)minusYearsminusYears(long)plusWeeksplusWeeks(long)plusMonthsplusMonths(long)plusYearsplusYears(long)withDayOfYearwithDayOfYear(int)withDayOfMonthwithDayOfMonth(int)withMonthwithMonth(int)withYearwithYear(int)lengthOfYearlengthOfYear()lengthOfMonthlengthOfMonth()isLeapYearisLeapYear()getDayOfWeekgetDayOfWeek()getDayOfYeargetDayOfYear()getDayOfMonthgetDayOfMonth()getMonthValuegetMonthValue()getEragetEra()getChronologygetChronology()parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)ofEpochDayofEpochDay(long)ofInstantofInstant(java.time.Instant,java.time.ZoneId)ofYearDayofYearDay(int,int)of(int,int,int)of(int,java.time.Month,int)now(java.time.ZoneId)DAYS_0000_TO_1970LocalDateTime/modules/java.base/java/time/LocalDateTime.classjava.time.chronoChronoLocalDateTime<LocalDate>/modules/java.base/java/time/chrono/ChronoLocalDateTime.class/modules/java.base/java/time/chronoChronoLocalDateTime<?>Comparable<ChronoLocalDateTime<?>>compareTo(java.time.chrono.ChronoLocalDateTime)isEqual(java.time.chrono.ChronoLocalDateTime)isBefore(java.time.chrono.ChronoLocalDateTime)isAfter(java.time.chrono.ChronoLocalDateTime)toEpochSecond(java.time.ZoneOffset)toInstant(java.time.ZoneOffset)ChronoZonedDateTime<>/modules/java.base/java/time/chrono/ChronoZonedDateTime.classChronoZonedDateTime<D>ChronoZonedDateTime<?>Comparable<ChronoZonedDateTime<?>>ChronoZonedDateTime<LocalDate>ChronoLocalDateTime<>Comparator<>Comparator<ChronoLocalDateTime<?>>timeLineOrdertimeLineOrder()withNanowithNano(int)withSecondwithSecond(int)withMinutewithMinute(int)withHourwithHour(int)getSecondgetSecond()getMinutegetMinute()getHourgetHour()ofEpochSecond(long,int,java.time.ZoneOffset)of(java.time.LocalDate,java.time.LocalTime)of(int,int,int,int,int,int,int)of(int,int,int,int,int,int)of(int,int,int,int,int)of(int,java.time.Month,int,int,int,int,int)of(int,java.time.Month,int,int,int,int)of(int,java.time.Month,int,int,int)LocalTime/modules/java.base/java/time/LocalTime.classComparable<LocalTime>compareTo(java.time.LocalTime)isBefore(java.time.LocalTime)isAfter(java.time.LocalTime)toEpochSecond(java.time.LocalDate,java.time.ZoneOffset)toNanoOfDaytoNanoOfDay()toSecondOfDaytoSecondOfDay()atDateatDate(java.time.LocalDate)ofNanoOfDayofNanoOfDay(long)ofSecondOfDayofSecondOfDay(long)of(int,int,int,int)of(int,int)NANOS_PER_DAYNANOS_PER_HOURNANOS_PER_MINUTENANOS_PER_SECONDNANOS_PER_MILLIMICROS_PER_DAYMICROS_PER_SECONDMILLIS_PER_DAYMILLIS_PER_SECONDSECONDS_PER_DAYSECONDS_PER_HOURSECONDS_PER_MINUTEMINUTES_PER_DAYMINUTES_PER_HOURHOURS_PER_DAYNOONMIDNIGHTMonth/modules/java.base/java/time/Month.classEnum<Month>Comparable<Month>compareTo(java.time.Month)EnumDesc<Month>DynamicConstantDesc<Month>Optional<EnumDesc<Month>>Class<Month>Enum<Month>(java.lang.String,int)firstMonthOfQuarterfirstMonthOfQuarter()firstDayOfYearfirstDayOfYear(boolean)maxLengthmaxLength()minLengthminLength()length(boolean)Month[]DECEMBERNOVEMBEROCTOBERSEPTEMBERAUGUSTJULYJUNEMAYAPRILMARCHFEBRUARYJANUARYOffsetDateTime/modules/java.base/java/time/OffsetDateTime.classComparable<OffsetDateTime>compareTo(java.time.OffsetDateTime)readExternal(java.io.ObjectInput)writeExternal(java.io.ObjectOutput)isEqual(java.time.OffsetDateTime)isBefore(java.time.OffsetDateTime)isAfter(java.time.OffsetDateTime)toEpochSecond()toZonedDateTimetoZonedDateTime()toOffsetTimetoOffsetTime()atZoneSimilarLocalatZoneSimilarLocal(java.time.ZoneId)atZoneSameInstantatZoneSameInstant(java.time.ZoneId)withOffsetSameInstantwithOffsetSameInstant(java.time.ZoneOffset)withOffsetSameLocalwithOffsetSameLocal(java.time.ZoneOffset)of(int,int,int,int,int,int,int,java.time.ZoneOffset)of(java.time.LocalDateTime,java.time.ZoneOffset)of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)Comparator<OffsetDateTime>OffsetTime/modules/java.base/java/time/OffsetTime.classComparable<OffsetTime>compareTo(java.time.OffsetTime)isEqual(java.time.OffsetTime)isBefore(java.time.OffsetTime)isAfter(java.time.OffsetTime)toEpochSecond(java.time.LocalDate)of(int,int,int,int,java.time.ZoneOffset)of(java.time.LocalTime,java.time.ZoneOffset)Period/modules/java.base/java/time/Period.classtoTotalMonthstoTotalMonths()normalizednormalized()multipliedBy(int)withDayswithDays(int)withMonthswithMonths(int)withYearswithYears(int)getDaysgetDays()getMonthsgetMonths()getYearsgetYears()between(java.time.LocalDate,java.time.LocalDate)ofDays(int)ofWeeksofWeeks(int)ofMonthsofMonths(int)ofYearsofYears(int)ZoneId/modules/java.base/java/time/ZoneId.classwrite(java.io.DataOutput)getOffset(long)getRulesgetRules()ZoneId()of(java.lang.String,boolean)ofOffsetofOffset(java.lang.String,java.time.ZoneOffset)of(java.lang.String,java.util.Map)getAvailableZoneIdsgetAvailableZoneIds()systemDefaultsystemDefault()SHORT_IDSZoneOffset/modules/java.base/java/time/ZoneOffset.classComparable<ZoneOffset>compareTo(java.time.ZoneOffset)getTotalSecondsgetTotalSeconds()ofTotalSecondsofTotalSeconds(int)ofHoursMinutesSecondsofHoursMinutesSeconds(int,int,int)ofHoursMinutesofHoursMinutes(int,int)ofHours(int)UTCZoneRegion/modules/java.base/java/time/ZoneRegion.classZoneRegion(java.lang.String,java.time.zone.ZoneRules)ofIdofId(java.lang.String,boolean)ZonedDateTime/modules/java.base/java/time/ZonedDateTime.classcompareTo(java.time.chrono.ChronoZonedDateTime)isEqual(java.time.chrono.ChronoZonedDateTime)isAfter(java.time.chrono.ChronoZonedDateTime)isBefore(java.time.chrono.ChronoZonedDateTime)withZoneSameInstantwithZoneSameInstant(java.time.ZoneId)withZoneSameLocalwithZoneSameLocal(java.time.ZoneId)withLaterOffsetAtOverlapwithLaterOffsetAtOverlap()withEarlierOffsetAtOverlapwithEarlierOffsetAtOverlap()ChronoLocalDateTime<D>Comparator<ChronoZonedDateTime<?>>toOffsetDateTimetoOffsetDateTime()withFixedOffsetZonewithFixedOffsetZone()ofStrictofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)ofLocalofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)of(int,int,int,int,int,int,int,java.time.ZoneId)of(java.time.LocalDateTime,java.time.ZoneId)of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)AbstractChronology/modules/java.base/java/time/chrono/AbstractChronology.classcompareTo(java.time.chrono.Chronology)Map<TemporalField,Long>addFieldValueaddFieldValue(java.util.Map,java.time.temporal.ChronoField,long)resolveAlignedresolveAligned(java.time.chrono.ChronoLocalDate,long,long,long)resolveYADresolveYAD(java.util.Map,java.time.format.ResolverStyle)resolveYAAresolveYAA(java.util.Map,java.time.format.ResolverStyle)resolveYMADresolveYMAD(java.util.Map,java.time.format.ResolverStyle)resolveYMAAresolveYMAA(java.util.Map,java.time.format.ResolverStyle)resolveYDresolveYD(java.util.Map,java.time.format.ResolverStyle)resolveYMDresolveYMD(java.util.Map,java.time.format.ResolverStyle)resolveYearOfEraresolveYearOfEra(java.util.Map,java.time.format.ResolverStyle)resolveProlepticMonthresolveProlepticMonth(java.util.Map,java.time.format.ResolverStyle)resolveDateresolveDate(java.util.Map,java.time.format.ResolverStyle)AbstractChronology()Set<Chronology>Collection<Chronology>Iterable<Chronology>getAvailableChronologiesgetAvailableChronologies()ofLocaleofLocale(java.util.Locale)registerChronoregisterChrono(java.time.chrono.Chronology,java.lang.String)registerChrono(java.time.chrono.Chronology)ChronoLocalDate/modules/java.base/java/time/chrono/ChronoLocalDate.classComparable<ChronoLocalDate>Comparator<ChronoLocalDate>ChronoLocalDateTimeChronoPeriod/modules/java.base/java/time/chrono/ChronoPeriod.classbetween(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)ChronoZonedDateTimeChronology/modules/java.base/java/time/chrono/Chronology.classComparable<Chronology>isIsoBasedisIsoBased()epochSecondepochSecond(java.time.chrono.Era,int,int,int,int,int,int,java.time.ZoneOffset)epochSecond(int,int,int,int,int,int,java.time.ZoneOffset)periodperiod(int,int,int)range(java.time.temporal.ChronoField)List<Era>SequencedCollection<Era>Collection<Era>Iterable<Era>eraseras()eraOferaOf(int)prolepticYearprolepticYear(java.time.chrono.Era,int)isLeapYear(long)? extends ChronoLocalDateChronoZonedDateTime<? extends ChronoLocalDate>zonedDateTimezonedDateTime(java.time.Instant,java.time.ZoneId)zonedDateTime(java.time.temporal.TemporalAccessor)ChronoLocalDateTime<? extends ChronoLocalDate>localDateTimelocalDateTime(java.time.temporal.TemporalAccessor)datedate(java.time.temporal.TemporalAccessor)dateNowdateNow(java.time.Clock)dateNow(java.time.ZoneId)dateNow()dateEpochDaydateEpochDay(long)dateYearDaydateYearDay(int,int)dateYearDay(java.time.chrono.Era,int,int)date(int,int,int)date(java.time.chrono.Era,int,int,int)getCalendarTypegetCalendarType()Era/modules/java.base/java/time/chrono/Era.classIsoChronology/modules/java.base/java/time/chrono/IsoChronology.classIsoEra/modules/java.base/java/time/chrono/IsoEra.classEnum<IsoEra>Comparable<IsoEra>compareTo(java.time.chrono.IsoEra)EnumDesc<IsoEra>DynamicConstantDesc<IsoEra>Optional<EnumDesc<IsoEra>>Class<IsoEra>Enum<IsoEra>(java.lang.String,int)IsoEra[]CEBCEjava.time.formatDateTimeFormatter/modules/java.base/java/time/format/DateTimeFormatter.class/modules/java.base/java/time/formatTemporalQuery<?>toFormattoFormat(java.time.temporal.TemporalQuery)toFormat()toPrinterParsertoPrinterParser(boolean)parseUnresolvedparseUnresolved(java.lang.CharSequence,java.text.ParsePosition)TemporalQuery[]TemporalQuery<?>[]parseBestparseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery[])parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)TemporalQuery<T>parse(java.lang.CharSequence,java.text.ParsePosition)formatToformatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)format(java.time.temporal.TemporalAccessor)Set<TemporalField>Collection<TemporalField>Iterable<TemporalField>withResolverFieldswithResolverFields(java.util.Set)TemporalField[]withResolverFields(java.time.temporal.TemporalField[])getResolverFieldsgetResolverFields()withResolverStylewithResolverStyle(java.time.format.ResolverStyle)getResolverStylegetResolverStyle()withChronologywithChronology(java.time.chrono.Chronology)withDecimalStylewithDecimalStyle(java.time.format.DecimalStyle)getDecimalStylegetDecimalStyle()localizedBylocalizedBy(java.util.Locale)withLocalewithLocale(java.util.Locale)getLocalegetLocale()DateTimeFormatter(java.time.format.DateTimeFormatterBuilder.CompositePrinterParser,java.util.Locale,java.time.format.DecimalStyle,java.time.format.ResolverStyle,java.util.Set,java.time.chrono.Chronology,java.time.ZoneId)TemporalQuery<Boolean>parsedLeapSecondparsedLeapSecond()TemporalQuery<Period>parsedExcessDaysparsedExcessDays()ofLocalizedPatternofLocalizedPattern(java.lang.String)ofLocalizedDateTimeofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)ofLocalizedDateTime(java.time.format.FormatStyle)ofLocalizedTimeofLocalizedTime(java.time.format.FormatStyle)ofLocalizedDateofLocalizedDate(java.time.format.FormatStyle)ofPatternofPattern(java.lang.String,java.util.Locale)ofPattern(java.lang.String)RFC_1123_DATE_TIMEBASIC_ISO_DATEISO_INSTANTISO_WEEK_DATEISO_ORDINAL_DATEISO_DATE_TIMEISO_ZONED_DATE_TIMEISO_OFFSET_DATE_TIMEISO_LOCAL_DATE_TIMEISO_TIMEISO_OFFSET_TIMEISO_LOCAL_TIMEISO_DATEISO_OFFSET_DATEISO_LOCAL_DATECompositePrinterParser/modules/java.base/java/time/format/DateTimeFormatterBuilder$CompositePrinterParser.classparse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)withOptionalwithOptional(boolean)DateTimePrinterParser/modules/java.base/java/time/format/DateTimeFormatterBuilder$DateTimePrinterParser.classDayPeriod/modules/java.base/java/time/format/DateTimeFormatterBuilder$DayPeriod.classofLocale(java.util.Locale,long)Map<DayPeriod,Long>getDayPeriodMapgetDayPeriodMap(java.util.Locale)mapToIndexmapToIndex(java.lang.String)includesincludes(long)midmid()DateTimeFormatterBuilder/modules/java.base/java/time/format/DateTimeFormatterBuilder.classtoFormattertoFormatter(java.time.format.ResolverStyle,java.time.chrono.Chronology)toFormatter(java.util.Locale)toFormatter()optionalEndoptionalEnd()optionalStartoptionalStart()padNextpadNext(int,char)padNext(int)appendPatternappendPattern(java.lang.String)appendOptionalappendOptional(java.time.format.DateTimeFormatter)append(java.time.format.DateTimeFormatter)appendDayPeriodTextappendDayPeriodText(java.time.format.TextStyle)appendLiteralappendLiteral(java.lang.String)appendLiteral(char)appendLocalizedappendLocalized(java.lang.String)appendLocalized(java.time.format.FormatStyle,java.time.format.FormatStyle)appendChronologyTextappendChronologyText(java.time.format.TextStyle)appendChronologyIdappendChronologyId()Set<ZoneId>Collection<ZoneId>Iterable<ZoneId>appendGenericZoneTextappendGenericZoneText(java.time.format.TextStyle,java.util.Set)appendGenericZoneText(java.time.format.TextStyle)appendZoneTextappendZoneText(java.time.format.TextStyle,java.util.Set)appendZoneText(java.time.format.TextStyle)appendZoneOrOffsetIdappendZoneOrOffsetId()appendZoneRegionIdappendZoneRegionId()appendZoneIdappendZoneId()appendLocalizedOffsetappendLocalizedOffset(java.time.format.TextStyle)appendOffsetappendOffset(java.lang.String,java.lang.String)appendOffsetIdappendOffsetId()appendInstantappendInstant(int)appendInstant()Map<Long,String>appendTextappendText(java.time.temporal.TemporalField,java.util.Map)appendText(java.time.temporal.TemporalField,java.time.format.TextStyle)appendText(java.time.temporal.TemporalField)appendFractionappendFraction(java.time.temporal.TemporalField,int,int,boolean)appendValueReducedappendValueReduced(java.time.temporal.TemporalField,int,int,java.time.chrono.ChronoLocalDate)appendValueReduced(java.time.temporal.TemporalField,int,int,int)appendValueappendValue(java.time.temporal.TemporalField,int,int,java.time.format.SignStyle)appendValue(java.time.temporal.TemporalField,int)appendValue(java.time.temporal.TemporalField)parseDefaultingparseDefaulting(java.time.temporal.TemporalField,long)parseLenientparseLenient()parseStrictparseStrict()parseCaseInsensitiveparseCaseInsensitive()parseCaseSensitiveparseCaseSensitive()DateTimeFormatterBuilder()getLocalizedDateTimePatterngetLocalizedDateTimePattern(java.lang.String,java.time.chrono.Chronology,java.util.Locale)getLocalizedDateTimePattern(java.time.format.FormatStyle,java.time.format.FormatStyle,java.time.chrono.Chronology,java.util.Locale)DateTimeParseContext/modules/java.base/java/time/format/DateTimeParseContext.classsetParsedDayPeriodsetParsedDayPeriod(java.time.format.DateTimeFormatterBuilder.DayPeriod)setParsedLeapSecondsetParsedLeapSecond()setParsedZoneNameTypesetParsedZoneNameType(int)setParsedsetParsed(java.time.ZoneId)Consumer<Chronology>addChronoChangedListeneraddChronoChangedListener(java.util.function.Consumer)setParsed(java.time.chrono.Chronology)setParsedFieldsetParsedField(java.time.temporal.TemporalField,long,int,int)getParsedgetParsed(java.time.temporal.TemporalField)toResolvedtoResolved(java.time.format.ResolverStyle,java.util.Set)toUnresolvedtoUnresolved()endOptionalendOptional(boolean)startOptionalstartOptional()setStrictsetStrict(boolean)isStrictisStrict()charEqualsIgnoreCasecharEqualsIgnoreCase(char,char)charEqualscharEquals(char,char)subSequenceEqualssubSequenceEquals(java.lang.CharSequence,int,java.lang.CharSequence,int,int)setCaseSensitivesetCaseSensitive(boolean)isCaseSensitive()getEffectiveChronologygetEffectiveChronology()DateTimeParseContext(java.time.format.DateTimeFormatter)DateTimePrintContext/modules/java.base/java/time/format/DateTimePrintContext.classgetValue(java.time.temporal.TemporalField)getValue(java.time.temporal.TemporalQuery)endOptional()getTemporalgetTemporal()DateTimePrintContext(java.time.temporal.TemporalAccessor,java.time.format.DateTimeFormatter)DecimalStyle/modules/java.base/java/time/format/DecimalStyle.classconvertNumberToI18NconvertNumberToI18N(java.lang.String)convertToDigitconvertToDigit(char)withDecimalSeparatorwithDecimalSeparator(char)getDecimalSeparatorgetDecimalSeparator()withNegativeSignwithNegativeSign(char)getNegativeSigngetNegativeSign()withPositiveSignwithPositiveSign(char)getPositiveSigngetPositiveSign()withZeroDigitwithZeroDigit(char)getZeroDigitgetZeroDigit()of(java.util.Locale)ofDefaultLocaleofDefaultLocale()Set<Locale>Collection<Locale>Iterable<Locale>getAvailableLocalesgetAvailableLocales()STANDARDFormatStyle/modules/java.base/java/time/format/FormatStyle.classEnum<FormatStyle>Comparable<FormatStyle>compareTo(java.time.format.FormatStyle)EnumDesc<FormatStyle>DynamicConstantDesc<FormatStyle>Optional<EnumDesc<FormatStyle>>Class<FormatStyle>Enum<FormatStyle>(java.lang.String,int)FormatStyle[]SHORTMEDIUMLONGFULLParsed/modules/java.base/java/time/format/Parsed.classresolve(java.time.format.ResolverStyle,java.util.Set)Parsed()dayPeriodexcessDaysleapSecondchronozoneNameTypezonefieldValuesResolverStyle/modules/java.base/java/time/format/ResolverStyle.classEnum<ResolverStyle>Comparable<ResolverStyle>compareTo(java.time.format.ResolverStyle)EnumDesc<ResolverStyle>DynamicConstantDesc<ResolverStyle>Optional<EnumDesc<ResolverStyle>>Class<ResolverStyle>Enum<ResolverStyle>(java.lang.String,int)ResolverStyle[]LENIENTSMARTSignStyle/modules/java.base/java/time/format/SignStyle.classEnum<SignStyle>Comparable<SignStyle>compareTo(java.time.format.SignStyle)EnumDesc<SignStyle>DynamicConstantDesc<SignStyle>Optional<EnumDesc<SignStyle>>Class<SignStyle>Enum<SignStyle>(java.lang.String,int)parse(boolean,boolean,boolean)SignStyle[]EXCEEDS_PADNOT_NEGATIVENEVERALWAYSNORMALTextStyle/modules/java.base/java/time/format/TextStyle.classEnum<TextStyle>Comparable<TextStyle>compareTo(java.time.format.TextStyle)EnumDesc<TextStyle>DynamicConstantDesc<TextStyle>Optional<EnumDesc<TextStyle>>Class<TextStyle>Enum<TextStyle>(java.lang.String,int)zoneNameStyleIndexzoneNameStyleIndex()toCalendarStyletoCalendarStyle()asNormalasNormal()asStandaloneasStandalone()isStandaloneisStandalone()TextStyle[]NARROW_STANDALONENARROWSHORT_STANDALONEFULL_STANDALONEChronoField/modules/java.base/java/time/temporal/ChronoField.classEnum<ChronoField>Comparable<ChronoField>compareTo(java.time.temporal.ChronoField)EnumDesc<ChronoField>DynamicConstantDesc<ChronoField>Optional<EnumDesc<ChronoField>>Class<ChronoField>Enum<ChronoField>(java.lang.String,int)adjustInto(java.time.temporal.Temporal,long)getFromgetFrom(java.time.temporal.TemporalAccessor)rangeRefinedByrangeRefinedBy(java.time.temporal.TemporalAccessor)isSupportedByisSupportedBy(java.time.temporal.TemporalAccessor)checkValidIntValuecheckValidIntValue(long)checkValidValuecheckValidValue(long)isTimeBasedisTimeBased()isDateBasedisDateBased()range()getRangeUnitgetRangeUnit()getBaseUnitgetBaseUnit()getDisplayName(java.util.Locale)ChronoField[]OFFSET_SECONDSINSTANT_SECONDSERAYEARYEAR_OF_ERAPROLEPTIC_MONTHMONTH_OF_YEARALIGNED_WEEK_OF_YEARALIGNED_WEEK_OF_MONTHEPOCH_DAYDAY_OF_YEARDAY_OF_MONTHALIGNED_DAY_OF_WEEK_IN_YEARALIGNED_DAY_OF_WEEK_IN_MONTHDAY_OF_WEEKAMPM_OF_DAYCLOCK_HOUR_OF_DAYHOUR_OF_DAYCLOCK_HOUR_OF_AMPMHOUR_OF_AMPMMINUTE_OF_DAYMINUTE_OF_HOURSECOND_OF_DAYSECOND_OF_MINUTEMILLI_OF_DAYMILLI_OF_SECONDMICRO_OF_DAYMICRO_OF_SECONDNANO_OF_DAYNANO_OF_SECONDChronoUnit/modules/java.base/java/time/temporal/ChronoUnit.classEnum<ChronoUnit>Comparable<ChronoUnit>compareTo(java.time.temporal.ChronoUnit)EnumDesc<ChronoUnit>DynamicConstantDesc<ChronoUnit>Optional<EnumDesc<ChronoUnit>>Class<ChronoUnit>Enum<ChronoUnit>(java.lang.String,int)addTo(java.time.temporal.Temporal,long)isSupportedBy(java.time.temporal.Temporal)isDurationEstimatedisDurationEstimated()getDurationgetDuration()ChronoUnit[]FOREVERERASMILLENNIACENTURIESDECADESYEARSMONTHSWEEKSDAYSHALF_DAYSHOURSMINUTESSECONDSMILLISMICROSNANOSTemporal/modules/java.base/java/time/temporal/Temporal.classTemporalAccessor/modules/java.base/java/time/temporal/TemporalAccessor.classTemporalAdjuster/modules/java.base/java/time/temporal/TemporalAdjuster.classTemporalAmount/modules/java.base/java/time/temporal/TemporalAmount.classTemporalField/modules/java.base/java/time/temporal/TemporalField.classresolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)TemporalQueryqueryFromqueryFrom(java.time.temporal.TemporalAccessor)TemporalUnit/modules/java.base/java/time/temporal/TemporalUnit.classValueRange/modules/java.base/java/time/temporal/ValueRange.classcheckValidIntValue(long,java.time.temporal.TemporalField)checkValidValue(long,java.time.temporal.TemporalField)isValidIntValueisValidIntValue(long)isValidValueisValidValue(long)isIntValueisIntValue()getMaximumgetMaximum()getSmallestMaximumgetSmallestMaximum()getLargestMinimumgetLargestMinimum()getMinimumgetMinimum()isFixedisFixed()of(long,long,long,long)of(long,long,long)of(long,long)java.time.zoneZoneOffsetTransition/modules/java.base/java/time/zone/ZoneOffsetTransition.class/modules/java.base/java/time/zoneComparable<ZoneOffsetTransition>compareTo(java.time.zone.ZoneOffsetTransition)List<ZoneOffset>SequencedCollection<ZoneOffset>Collection<ZoneOffset>Iterable<ZoneOffset>getValidOffsetsgetValidOffsets()isValidOffsetisValidOffset(java.time.ZoneOffset)isOverlapisOverlap()isGapisGap()getOffsetAftergetOffsetAfter()getOffsetBeforegetOffsetBefore()getDateTimeAftergetDateTimeAfter()getDateTimeBeforegetDateTimeBefore()getInstantgetInstant()ZoneOffsetTransition(long,java.time.ZoneOffset,java.time.ZoneOffset)ZoneOffsetTransition(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)TimeDefinition/modules/java.base/java/time/zone/ZoneOffsetTransitionRule$TimeDefinition.classEnum<TimeDefinition>Comparable<TimeDefinition>compareTo(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition)EnumDesc<TimeDefinition>DynamicConstantDesc<TimeDefinition>Optional<EnumDesc<TimeDefinition>>Class<TimeDefinition>Enum<TimeDefinition>(java.lang.String,int)createDateTimecreateDateTime(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)TimeDefinition[]WALLZoneOffsetTransitionRule/modules/java.base/java/time/zone/ZoneOffsetTransitionRule.classcreateTransitioncreateTransition(int)getStandardOffsetgetStandardOffset()getTimeDefinitiongetTimeDefinition()isMidnightEndOfDayisMidnightEndOfDay()getLocalTimegetLocalTime()getDayOfMonthIndicatorgetDayOfMonthIndicator()ZoneOffsetTransitionRule(java.time.Month,int,java.time.DayOfWeek,java.time.LocalTime,boolean,java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,java.time.ZoneOffset,java.time.ZoneOffset,java.time.ZoneOffset)of(java.time.Month,int,java.time.DayOfWeek,java.time.LocalTime,boolean,java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,java.time.ZoneOffset,java.time.ZoneOffset,java.time.ZoneOffset)ZoneRules/modules/java.base/java/time/zone/ZoneRules.classList<ZoneOffsetTransitionRule>SequencedCollection<ZoneOffsetTransitionRule>Collection<ZoneOffsetTransitionRule>Iterable<ZoneOffsetTransitionRule>getTransitionRulesgetTransitionRules()List<ZoneOffsetTransition>SequencedCollection<ZoneOffsetTransition>Collection<ZoneOffsetTransition>Iterable<ZoneOffsetTransition>getTransitionsgetTransitions()previousTransitionpreviousTransition(java.time.Instant)nextTransitionnextTransition(java.time.Instant)isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)isDaylightSavingsisDaylightSavings(java.time.Instant)getDaylightSavingsgetDaylightSavings(java.time.Instant)getStandardOffset(java.time.Instant)getTransitiongetTransition(java.time.LocalDateTime)getValidOffsets(java.time.LocalDateTime)getOffset(java.time.LocalDateTime)getOffset(java.time.Instant)isFixedOffsetisFixedOffset()ZoneRules(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List,java.util.List,java.util.List)of(java.time.ZoneOffset)of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List,java.util.List,java.util.List)AbstractCollectionCollection<E>Iterable<E>Spliterator<E>? super EConsumer<? super E>Iterator<E>Stream<E>BaseStream<E,Stream<E>>parallelStreamparallelStream()streamstream()retainAllretainAll(java.util.Collection)Predicate<? super E>removeIfremoveIf(java.util.function.Predicate)removeAllremoveAll(java.util.Collection)? extends ECollection<? extends E>Iterable<? extends E>addAlladdAll(java.util.Collection)containsAll(java.util.Collection)add(java.lang.Object)IntFunction<>/modules/java.base/java/util/function/IntFunction.classtoArray(java.util.function.IntFunction)IntFunction<T[]>toArray(java.lang.Object[])toArray()contains(java.lang.Object)AbstractCollection()AbstractSetAbstractCollection<E>AbstractCollection<E>()Set<E>copyOf(java.util.Collection)of(java.lang.Object[])E[]of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object,java.lang.Object,java.lang.Object)of(java.lang.Object)AbstractSet()Calendar/modules/java.base/java/util/Calendar.classComparable<Calendar>compareTo(java.util.Calendar)getFieldNamegetFieldName(int)getActualMaximumgetActualMaximum(int)getActualMinimumgetActualMinimum(int)getLeastMaximumgetLeastMaximum(int)getGreatestMinimumgetGreatestMinimum(int)getMaximum(int)getMinimum(int)getWeeksInWeekYeargetWeeksInWeekYear()setWeekDatesetWeekDate(int,int,int)getWeekYeargetWeekYear()isWeekDateSupportedisWeekDateSupported()getMinimalDaysInFirstWeekgetMinimalDaysInFirstWeek()setMinimalDaysInFirstWeeksetMinimalDaysInFirstWeek(int)getFirstDayOfWeekgetFirstDayOfWeek()setFirstDayOfWeeksetFirstDayOfWeek(int)isLenientisLenient()setLenientsetLenient(boolean)setZoneSharedsetZoneShared(boolean)getTimeZonegetTimeZone()setTimeZonesetTimeZone(java.util.TimeZone)rollroll(int,int)roll(int,boolean)add(int,int)after(java.lang.Object)before(java.lang.Object)getAvailableCalendarTypesgetAvailableCalendarTypes()getBaseStylegetBaseStyle(int)selectFieldsselectFields()isFieldSetisFieldSet(int,int)setUnnormalizedsetUnnormalized()isFullyNormalizedisFullyNormalized()isPartiallyNormalizedisPartiallyNormalized()setFieldsNormalizedsetFieldsNormalized(int)setFieldsComputedsetFieldsComputed(int)getSetStateFieldsgetSetStateFields()isExternallySetisExternallySet(int)completecomplete()checkDisplayNameParamscheckDisplayNameParams(int,int,int,int,java.util.Locale,int)Map<String,Integer>getDisplayNamesgetDisplayNames(int,int,java.util.Locale)getDisplayName(int,int,java.util.Locale)isSetisSet(int)clear(int)set(int,int,int,int,int,int)set(int,int,int,int,int)set(int,int,int)set(int,int)internalSetinternalSet(int,int)internalGetinternalGet(int)setTimeInMillissetTimeInMillis(long)getTimeInMillisgetTimeInMillis()setTime(java.util.Date)computeFieldscomputeFields()computeTimecomputeTime()Locale[]getInstance(java.util.TimeZone,java.util.Locale)getInstance(java.util.Locale)getInstance(java.util.TimeZone)Calendar(java.util.TimeZone,java.util.Locale)Calendar()DST_OFFSET_MASKZONE_OFFSET_MASKMILLISECOND_MASKSECOND_MASKMINUTE_MASKHOUR_OF_DAY_MASKHOUR_MASKAM_PM_MASKDAY_OF_WEEK_IN_MONTH_MASKDAY_OF_WEEK_MASKDAY_OF_YEAR_MASKDAY_OF_MONTH_MASKWEEK_OF_MONTH_MASKWEEK_OF_YEAR_MASKMONTH_MASKYEAR_MASKERA_MASKcurrentSerialVersionALL_FIELDSareAllFieldsSetareFieldsSetisTimeSettimefieldsLONG_STANDALONELONG_FORMATSHORT_FORMATNARROW_FORMATSTANDALONE_MASKALL_STYLESPMAMUNDECIMBERFIELD_COUNTDST_OFFSETZONE_OFFSETMILLISECONDSECONDMINUTEHOURAM_PMDAY_OF_WEEK_IN_MONTHDATEWEEK_OF_MONTHWEEK_OF_YEARMONTHCollectionComparatorToDoubleFunction<>/modules/java.base/java/util/function/ToDoubleFunction.classComparator<T>comparingDoublecomparingDouble(java.util.function.ToDoubleFunction)ToDoubleFunction<? super T>ToLongFunction<>/modules/java.base/java/util/function/ToLongFunction.classcomparingLongcomparingLong(java.util.function.ToLongFunction)ToLongFunction<? super T>ToIntFunction<>/modules/java.base/java/util/function/ToIntFunction.classcomparingIntcomparingInt(java.util.function.ToIntFunction)ToIntFunction<? super T>? super UComparable<? super U>comparingcomparing(java.util.function.Function)Function<? super T,? extends U>comparing(java.util.function.Function,java.util.Comparator)Comparator<? super U>nullsLastnullsLast(java.util.Comparator)Comparator<? super T>nullsFirstnullsFirst(java.util.Comparator)Comparable<? super T>naturalOrdernaturalOrder()reverseOrderreverseOrder()thenComparingDoublethenComparingDouble(java.util.function.ToDoubleFunction)thenComparingLongthenComparingLong(java.util.function.ToLongFunction)thenComparingIntthenComparingInt(java.util.function.ToIntFunction)thenComparingthenComparing(java.util.function.Function)thenComparing(java.util.function.Function,java.util.Comparator)thenComparing(java.util.Comparator)reversedreversed()compare(java.lang.Object,java.lang.Object)/modules/java.base/java/util/Date.classComparable<Date>getTimezoneOffsetgetTimezoneOffset()toGMTStringtoGMTString()toLocaleStringtoLocaleString()getMillisOfgetMillisOf(java.util.Date)after(java.util.Date)before(java.util.Date)UTC(int,int,int,int,int,int)Date(java.lang.String)Date(int,int,int,int,int,int)Date(int,int,int,int,int)Date()Dictionary/modules/java.base/java/util/Dictionary.classEnumeration<V>Enumeration<K>Dictionary()DoubleSummaryStatistics/modules/java.base/java/util/DoubleSummaryStatistics.classgetAveragegetAverage()getMaxgetMax()getMingetMin()getSumgetSum()getCountgetCount()combine(java.util.DoubleSummaryStatistics)accept(double)DoubleSummaryStatistics(long,double,double,double)DoubleSummaryStatistics()EnumSetAbstractSet<E>add(java.lang.Enum)AbstractSet<E>()typeChecktypeCheck(java.lang.Enum)complementcomplement()EnumSet<>AbstractSet<>AbstractCollection<>addRangeaddRange(java.lang.Enum,java.lang.Enum)EnumSet<E>range(java.lang.Enum,java.lang.Enum)Enum[]Enum<>[]of(java.lang.Enum,java.lang.Enum[])Enum<E>[]of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)of(java.lang.Enum,java.lang.Enum,java.lang.Enum)of(java.lang.Enum,java.lang.Enum)of(java.lang.Enum)complementOfcomplementOf(java.util.EnumSet)copyOf(java.util.EnumSet)addAll()allOfallOf(java.lang.Class)noneOfnoneOf(java.lang.Class)Enum<?>Comparable<?>Enum<?>[]EnumSet(java.lang.Class,java.lang.Enum[])universeelementTypeEnumerationasIteratorasIterator()nextElementnextElement()hasMoreElementshasMoreElements()Node/modules/java.base/java/util/HashMap$Node.classcopyOf(java.util.Map.Entry)Comparator<Entry<K,V>>comparingByValuecomparingByValue(java.util.Comparator)Comparator<? super V>comparingByKeycomparingByKey(java.util.Comparator)Comparator<? super K>Comparable<? super V>comparingByValue()Comparable<? super K>comparingByKey()setValuesetValue(java.lang.Object)Node(int,java.lang.Object,java.lang.Object,java.util.HashMap.Node)TreeNode/modules/java.base/java/util/HashMap$TreeNode.class/modules/java.base/java/util/LinkedHashMap$Entry.classNode<K,V>Node<K,V>(int,java.lang.Object,java.lang.Object,java.util.HashMap.Node)Entry(int,java.lang.Object,java.lang.Object,java.util.HashMap.Node)Entry<K,V>(int,java.lang.Object,java.lang.Object,java.util.HashMap.Node)TreeNode<>Node<>checkInvariantscheckInvariants(java.util.HashMap.TreeNode)TreeNode<K,V>balanceDeletionbalanceDeletion(java.util.HashMap.TreeNode,java.util.HashMap.TreeNode)balanceInsertionbalanceInsertion(java.util.HashMap.TreeNode,java.util.HashMap.TreeNode)rotateRight(java.util.HashMap.TreeNode,java.util.HashMap.TreeNode)rotateLeft(java.util.HashMap.TreeNode,java.util.HashMap.TreeNode)HashMap<K,V>/modules/java.base/java/util/HashMap.classNode[]Node<K,V>[]split(java.util.HashMap,java.util.HashMap.Node[],int,int)removeTreeNoderemoveTreeNode(java.util.HashMap,java.util.HashMap.Node[],boolean)putTreeValputTreeVal(java.util.HashMap,java.util.HashMap.Node[],int,java.lang.Object,java.lang.Object)untreeifyuntreeify(java.util.HashMap)treeifytreeify(java.util.HashMap.Node[])tieBreakOrdertieBreakOrder(java.lang.Object,java.lang.Object)getTreeNodegetTreeNode(int,java.lang.Object)find(int,java.lang.Object,java.lang.Class)Node<>[]moveRootToFrontmoveRootToFront(java.util.HashMap.Node[],java.util.HashMap.TreeNode)rootroot()TreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap.Node)redrightleftHashMapAbstractMap<K,V>()HashMap<>newHashMapnewHashMap(int)calculateHashMapCapacitycalculateHashMapCapacity(int)internalWriteEntriesinternalWriteEntries(java.io.ObjectOutputStream)afterNodeRemovalafterNodeRemoval(java.util.HashMap.Node)afterNodeInsertionafterNodeInsertion(boolean)afterNodeAccessafterNodeAccess(java.util.HashMap.Node)reinitializereinitialize()replacementTreeNodereplacementTreeNode(java.util.HashMap.Node,java.util.HashMap.Node)newTreeNodenewTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap.Node)replacementNodereplacementNode(java.util.HashMap.Node,java.util.HashMap.Node)newNodenewNode(int,java.lang.Object,java.lang.Object,java.util.HashMap.Node)loadFactorloadFactor()valuesToArrayvaluesToArray(java.lang.Object[])keysToArraykeysToArray(java.lang.Object[])prepareArrayprepareArray(java.lang.Object[])removeNoderemoveNode(int,java.lang.Object,java.lang.Object,boolean,boolean)treeifyBintreeifyBin(java.util.HashMap.Node[],int)resize()putValputVal(int,java.lang.Object,java.lang.Object,boolean,boolean)getNodegetNode(java.lang.Object)putMapEntriesputMapEntries(java.util.Map,boolean)HashMap(java.util.Map)HashMap()HashMap(int)HashMap(int,float)tableSizeFortableSizeFor(int)compareComparablescompareComparables(java.lang.Class,java.lang.Object,java.lang.Object)comparableClassForcomparableClassFor(java.lang.Object)thresholdMIN_TREEIFY_CAPACITYUNTREEIFY_THRESHOLDTREEIFY_THRESHOLDDEFAULT_LOAD_FACTORMAXIMUM_CAPACITYDEFAULT_INITIAL_CAPACITYHashtable/modules/java.base/java/util/Hashtable.classDictionary<K,V>Dictionary<K,V>()readHashtablereadHashtable(java.io.ObjectInputStream)defaultWriteHashtabledefaultWriteHashtable(java.io.ObjectOutputStream,int,float)writeHashtablewriteHashtable(java.io.ObjectOutputStream)Hashtable<>Dictionary<>Hashtable<?,?>Dictionary<?,?>cloneHashtablecloneHashtable()rehashrehash()Hashtable(java.lang.Void)Hashtable(java.util.Map)Hashtable()Hashtable(int)Hashtable(int,float)IntSummaryStatistics/modules/java.base/java/util/IntSummaryStatistics.classcombine(java.util.IntSummaryStatistics)accept(int)IntSummaryStatistics(long,int,int,long)IntSummaryStatistics()InvalidPropertiesFormatException/modules/java.base/java/util/InvalidPropertiesFormatException.classInvalidPropertiesFormatException(java.lang.String)InvalidPropertiesFormatException(java.lang.Throwable)IteratorforEachRemainingforEachRemaining(java.util.function.Consumer)hasNexthasNext()JumboEnumSet/modules/java.base/java/util/JumboEnumSet.classEnumSet<E>(java.lang.Class,java.lang.Enum[])JumboEnumSet(java.lang.Class,java.lang.Enum[])LinkedHashMap/modules/java.base/java/util/LinkedHashMap.classHashMap<K,V>(java.util.Map)HashMap<K,V>()HashMap<K,V>(int)HashMap<K,V>(int,float)SequencedMap<K,V>SequencedSet<>/modules/java.base/java/util/SequencedSet.classSequencedSet<Entry<K,V>>SequencedCollection<Entry<K,V>>sequencedEntrySetsequencedEntrySet()SequencedCollection<V>sequencedValuessequencedValues()SequencedSet<K>SequencedCollection<K>sequencedKeySetsequencedKeySet()putLastputLast(java.lang.Object,java.lang.Object)putFirstputFirst(java.lang.Object,java.lang.Object)pollLastEntrypollLastEntry()pollFirstEntrypollFirstEntry()lastEntrylastEntry()firstEntryfirstEntry()LinkedHashMap<>LinkedHashMap<K,V>newLinkedHashMapnewLinkedHashMap(int)valuesToArray(java.lang.Object[],boolean)keysToArray(java.lang.Object[],boolean)K1V1Node<K1,V1>Entry<K1,V1>nseensee(java.util.HashMap.Node)removeEldestEntryremoveEldestEntry(java.util.Map.Entry)LinkedHashMap(int,float,boolean)LinkedHashMap(java.util.Map)LinkedHashMap()LinkedHashMap(int)LinkedHashMap(int,float)putModePUT_LASTPUT_FIRSTPUT_NORMaccessOrdertailheadListSequencedCollection<E>removeLastremoveLast()removeFirstremoveFirst()getLastgetLast()getFirstgetFirst()addLastaddLast(java.lang.Object)addFirstaddFirst(java.lang.Object)List<E>subListsubList(int,int)ListIterator<>/modules/java.base/java/util/ListIterator.classListIterator<E>listIteratorlistIterator(int)listIterator()lastIndexOf(java.lang.Object)indexOf(java.lang.Object)remove(int)add(int,java.lang.Object)set(int,java.lang.Object)Comparator<? super E>sortsort(java.util.Comparator)UnaryOperator<E>/modules/java.base/java/util/function/UnaryOperator.classFunction<E,E>replaceAll(java.util.function.UnaryOperator)addAll(int,java.util.Collection)ListIteratorpreviousIndexpreviousIndex()nextIndexnextIndex()hasPrevioushasPrevious()Category/modules/java.base/java/util/Locale$Category.classEnum<Category>Comparable<Category>compareTo(java.util.Locale.Category)EnumDesc<Category>DynamicConstantDesc<Category>Optional<EnumDesc<Category>>Class<Category>Enum<Category>(java.lang.String,int)Category[]extensionsKeyvariantKeycountryKeyscriptKeylanguageKeyDISPLAYFilteringMode/modules/java.base/java/util/Locale$FilteringMode.classEnum<FilteringMode>Comparable<FilteringMode>compareTo(java.util.Locale.FilteringMode)EnumDesc<FilteringMode>DynamicConstantDesc<FilteringMode>Optional<EnumDesc<FilteringMode>>Class<FilteringMode>Enum<FilteringMode>(java.lang.String,int)FilteringMode[]REJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIsoCountryCode/modules/java.base/java/util/Locale$IsoCountryCode.classEnum<IsoCountryCode>Comparable<IsoCountryCode>compareTo(java.util.Locale.IsoCountryCode)EnumDesc<IsoCountryCode>DynamicConstantDesc<IsoCountryCode>Optional<EnumDesc<IsoCountryCode>>Class<IsoCountryCode>Enum<IsoCountryCode>(java.lang.String,int)/modules/java.base/java/util/Locale$IsoCountryCode$1.classcreateCountryCodeSetcreateCountryCodeSet()/modules/java.base/java/util/Locale$IsoCountryCode$2.class/modules/java.base/java/util/Locale$IsoCountryCode$3.classretrieveISOCountryCodesretrieveISOCountryCodes(java.util.Locale.IsoCountryCode)IsoCountryCode[]PART3PART1_ALPHA3PART1_ALPHA2LanguageRange/modules/java.base/java/util/Locale$LanguageRange.classList<LanguageRange>SequencedCollection<LanguageRange>Collection<LanguageRange>Iterable<LanguageRange>mapEquivalentsmapEquivalents(java.util.List,java.util.Map)parse(java.lang.String,java.util.Map)getWeightgetWeight()getRangegetRange()LanguageRange(java.lang.String,double)LanguageRange(java.lang.String)MIN_WEIGHTMAX_WEIGHTLocale/modules/java.base/java/util/Locale.classlookupTaglookupTag(java.util.List,java.util.Collection)lookup(java.util.List,java.util.Collection)filterTagsfilterTags(java.util.List,java.util.Collection)filterTags(java.util.List,java.util.Collection,java.util.Locale.FilteringMode)List<Locale>SequencedCollection<Locale>filterfilter(java.util.List,java.util.Collection)filter(java.util.List,java.util.Collection,java.util.Locale.FilteringMode)getDisplayVariantgetDisplayVariant(java.util.Locale)getDisplayVariant()getDisplayCountrygetDisplayCountry(java.util.Locale)getDisplayCountry()getDisplayScriptgetDisplayScript(java.util.Locale)getDisplayScript()getDisplayLanguagegetDisplayLanguage(java.util.Locale)getDisplayLanguage()getISO3CountrygetISO3Country()getISO3LanguagegetISO3Language()forLanguageTagforLanguageTag(java.lang.String)caseFoldLanguageTagcaseFoldLanguageTag(java.lang.String)toLanguageTagtoLanguageTag()getLocaleExtensionsgetLocaleExtensions()getBaseLocalegetBaseLocale()getUnicodeLocaleKeysgetUnicodeLocaleKeys()getUnicodeLocaleTypegetUnicodeLocaleType(java.lang.String)getUnicodeLocaleAttributesgetUnicodeLocaleAttributes()Set<Character>Collection<Character>Iterable<Character>getExtensionKeysgetExtensionKeys()getExtensiongetExtension(char)stripExtensionsstripExtensions()hasExtensionshasExtensions()getVariantgetVariant()getCountrygetCountry()getScriptgetScript()getLanguagegetLanguage()getISOLanguagesgetISOLanguages()getISOCountriesgetISOCountries(java.util.Locale.IsoCountryCode)getISOCountries()Stream<Locale>BaseStream<Locale,Stream<Locale>>availableLocalesavailableLocales()setDefaultsetDefault(java.util.Locale.Category,java.util.Locale)setDefault(java.util.Locale)getDefault(java.util.Locale.Category)getInstance(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)getInstance(java.lang.String,java.lang.String,java.lang.String)of(java.lang.String,java.lang.String,java.lang.String)Locale(java.lang.String)Locale(java.lang.String,java.lang.String)Locale(java.lang.String,java.lang.String,java.lang.String)UNICODE_LOCALE_EXTENSIONPRIVATE_USE_EXTENSIONTAIWANPRCCHINAROOTCANADA_FRENCHCANADAUSUKKOREAJAPANITALYGERMANYFRANCETRADITIONAL_CHINESESIMPLIFIED_CHINESECHINESEKOREANJAPANESEITALIANGERMANFRENCHENGLISHLongSummaryStatistics/modules/java.base/java/util/LongSummaryStatistics.classcombine(java.util.LongSummaryStatistics)accept(long)LongSummaryStatistics(long,long,long,long)LongSummaryStatistics()MapMissingResourceException/modules/java.base/java/util/MissingResourceException.classMissingResourceException(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)MissingResourceException(java.lang.String,java.lang.String,java.lang.String)OptionalorElseThrow()Supplier<? extends T>orElseGetorElseGet(java.util.function.Supplier)Stream<T>BaseStream<T,Stream<T>>Optional<? extends T>? extends Optional<? extends T>Supplier<? extends Optional<? extends T>>or(java.util.function.Supplier)Optional<U>flatMapflatMap(java.util.function.Function)Optional<? extends U>? extends Optional<? extends U>Function<? super T,? extends Optional<? extends U>>map(java.util.function.Function)Predicate<? super T>filter(java.util.function.Predicate)ifPresentOrElseifPresentOrElse(java.util.function.Consumer,java.lang.Runnable)ifPresentifPresent(java.util.function.Consumer)isPresentisPresent()Optional<T>ofNullableofNullable(java.lang.Object)OptionalDouble/modules/java.base/java/util/OptionalDouble.classorElseGet(java.util.function.DoubleSupplier)orElse(double)ifPresentOrElse(java.util.function.DoubleConsumer,java.lang.Runnable)ifPresent(java.util.function.DoubleConsumer)getAsDoublegetAsDouble()of(double)OptionalInt/modules/java.base/java/util/OptionalInt.classorElseGet(java.util.function.IntSupplier)orElse(int)ifPresentOrElse(java.util.function.IntConsumer,java.lang.Runnable)ifPresent(java.util.function.IntConsumer)getAsIntgetAsInt()OptionalLong/modules/java.base/java/util/OptionalLong.classorElseGet(java.util.function.LongSupplier)orElse(long)ifPresentOrElse(java.util.function.LongConsumer,java.lang.Runnable)ifPresent(java.util.function.LongConsumer)getAsLonggetAsLong()/modules/java.base/java/util/PrimitiveIterator$OfDouble.classPrimitiveIterator<Double,DoubleConsumer>/modules/java.base/java/util/PrimitiveIterator.classIterator<Double>? super DoubleConsumer<? super Double>forEachRemaining(java.lang.Object)forEachRemaining(java.util.function.DoubleConsumer)nextDoublenextDouble()/modules/java.base/java/util/PrimitiveIterator$OfInt.classPrimitiveIterator<Integer,IntConsumer>Iterator<Integer>? super IntegerConsumer<? super Integer>forEachRemaining(java.util.function.IntConsumer)nextIntnextInt()/modules/java.base/java/util/PrimitiveIterator$OfLong.classPrimitiveIterator<Long,LongConsumer>Iterator<Long>? super LongConsumer<? super Long>forEachRemaining(java.util.function.LongConsumer)nextLongnextLong()PrimitiveIteratorT_CONSProperties/modules/java.base/java/util/Properties.classHashtable<Object,Object>Dictionary<Object,Object>Map<Object,Object>Dictionary<Object,Object>()Map<? extends Object,? extends Object>Hashtable<Object,Object>(java.lang.Void)Hashtable<Object,Object>(java.util.Map)Hashtable<Object,Object>()Hashtable<Object,Object>(int)Hashtable<Object,Object>(int,float)BiFunction<? super Object,? super Object,?>Function<? super Object,?>list(java.io.PrintWriter)list(java.io.PrintStream)stringPropertyNamesstringPropertyNames()Enumeration<?>propertyNamespropertyNames()storeToXMLstoreToXML(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)storeToXML(java.io.OutputStream,java.lang.String)loadFromXMLloadFromXML(java.io.InputStream)storestore(java.io.OutputStream,java.lang.String)store(java.io.Writer,java.lang.String)savesave(java.io.OutputStream,java.lang.String)load(java.io.Reader)Properties(java.util.Properties)Properties(int)Properties()defaultsRandom/modules/java.base/java/util/Random.classdoublesdoubles(double,double)doubles(long,double,double)doubles()doubles(long)longslongs(long,long)longs(long,long,long)longs()longs(long)intsints(int,int)ints(long,int,int)ints()ints(long)nextGaussiannextGaussian()nextFloatnextFloat()nextBooleannextBoolean()nextInt(int)nextBytesnextBytes(byte[])next(int)setSeedsetSeed(long)from(java.util.random.RandomGenerator)Random(long)Random()RegularEnumSet/modules/java.base/java/util/RegularEnumSet.classRegularEnumSet(java.lang.Class,java.lang.Enum[])Control/modules/java.base/java/util/ResourceBundle$Control.classtoResourceNametoResourceName(java.lang.String,java.lang.String)toBundleNametoBundleName(java.lang.String,java.util.Locale)needsReloadneedsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)getTimeToLivegetTimeToLive(java.lang.String,java.util.Locale)newBundlenewBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)getFallbackLocalegetFallbackLocale(java.lang.String,java.util.Locale)getCandidateLocalesgetCandidateLocales(java.lang.String,java.util.Locale)getFormatsgetFormats(java.lang.String)getNoFallbackControlgetNoFallbackControl(java.util.List)getControlgetControl(java.util.List)Control()TTL_NO_EXPIRATION_CONTROLTTL_DONT_CACHEFORMAT_PROPERTIESFORMAT_CLASSFORMAT_DEFAULTResourceBundle/modules/java.base/java/util/ResourceBundle.classhandleKeySethandleKeySet()containsKey(java.lang.String)Enumeration<String>getKeysgetKeys()handleGetObjecthandleGetObject(java.lang.String)clearCacheclearCache(java.lang.ClassLoader)clearCache()getBundlegetBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle.Control)getBundle(java.lang.String,java.util.Locale,java.lang.Module)getBundle(java.lang.String,java.lang.Module)getBundle(java.lang.String,java.util.Locale)getBundle(java.lang.String,java.util.ResourceBundle.Control)getBundle(java.lang.String)setParentsetParent(java.util.ResourceBundle)getStringArraygetStringArray(java.lang.String)ResourceBundle()getBaseBundleNamegetBaseBundleName()Scanner/modules/java.base/java/util/Scanner.classConsumer<? super String>Stream<MatchResult>BaseStream<MatchResult,Stream<MatchResult>>findAll(java.lang.String)findAll(java.util.regex.Pattern)tokenstokens()nextBigDecimalnextBigDecimal()hasNextBigDecimalhasNextBigDecimal()nextBigIntegernextBigInteger(int)nextBigInteger()hasNextBigIntegerhasNextBigInteger(int)hasNextBigInteger()hasNextDoublehasNextDouble()hasNextFloathasNextFloat()nextLong(int)hasNextLonghasNextLong(int)hasNextLong()hasNextInthasNextInt(int)hasNextInt()nextShortnextShort(int)nextShort()hasNextShorthasNextShort(int)hasNextShort()nextBytenextByte(int)nextByte()hasNextBytehasNextByte(int)hasNextByte()hasNextBooleanhasNextBoolean()skip(java.lang.String)skip(java.util.regex.Pattern)findWithinHorizonfindWithinHorizon(java.util.regex.Pattern,int)findWithinHorizon(java.lang.String,int)findInLinefindInLine(java.util.regex.Pattern)findInLine(java.lang.String)nextLinenextLine()hasNextLinehasNextLine()next(java.util.regex.Pattern)hasNext(java.util.regex.Pattern)next(java.lang.String)hasNext(java.lang.String)match()useRadixuseRadix(int)radixradix()useLocaleuseLocale(java.util.Locale)localelocale()useDelimiteruseDelimiter(java.lang.String)useDelimiter(java.util.regex.Pattern)delimiterdelimiter()ioExceptionioException()Scanner(java.nio.channels.ReadableByteChannel,java.nio.charset.Charset)Scanner(java.nio.channels.ReadableByteChannel,java.lang.String)Scanner(java.nio.channels.ReadableByteChannel)Scanner(java.lang.String)Scanner(java.nio.file.Path,java.nio.charset.Charset)Scanner(java.nio.file.Path,java.lang.String)Scanner(java.nio.file.Path)Scanner(java.io.File,java.nio.charset.Charset)Scanner(java.io.File,java.lang.String)Scanner(java.io.File)Scanner(java.io.InputStream,java.nio.charset.Charset)Scanner(java.io.InputStream,java.lang.String)Scanner(java.io.InputStream)Scanner(java.lang.Readable)SequencedCollectionSequencedMapSequencedSetSetSortedMaplastKeylastKey()firstKeyfirstKey()tailMaptailMap(java.lang.Object)headMapheadMap(java.lang.Object)subMapsubMap(java.lang.Object,java.lang.Object)comparatorcomparator()/modules/java.base/java/util/Spliterator$OfDouble.classOfPrimitive<Double,DoubleConsumer,OfDouble>/modules/java.base/java/util/Spliterator$OfPrimitive.classSpliterator<Double>getComparatorgetComparator()Comparator<? super Double>hasCharacteristicshasCharacteristics(int)getExactSizeIfKnowngetExactSizeIfKnown()estimateSizeestimateSize()trySplittrySplit()tryAdvancetryAdvance(java.util.function.Consumer)SUBSIZEDCONCURRENTIMMUTABLENONNULLSIZEDSORTEDDISTINCTORDEREDtryAdvance(java.lang.Object)tryAdvance(java.util.function.DoubleConsumer)OfPrimitive<>/modules/java.base/java/util/Spliterator$OfInt.classOfPrimitive<Integer,IntConsumer,OfInt>Spliterator<Integer>Comparator<? super Integer>tryAdvance(java.util.function.IntConsumer)/modules/java.base/java/util/Spliterator$OfLong.classOfPrimitive<Long,LongConsumer,OfLong>Spliterator<Long>Comparator<? super Long>tryAdvance(java.util.function.LongConsumer)OfPrimitiveT_SPLITRSpliteratorTimeZone/modules/java.base/java/util/TimeZone.classhasSameRuleshasSameRules(java.util.TimeZone)setDefault(java.util.TimeZone)getDefaultRefgetDefaultRef()getAvailableIDsgetAvailableIDs()getAvailableIDs(int)toZoneIdtoZoneId()getTimeZone(java.time.ZoneId)getTimeZone(java.lang.String)inDaylightTimeinDaylightTime(java.util.Date)observesDaylightTimeobservesDaylightTime()useDaylightTimeuseDaylightTime()getDSTSavingsgetDSTSavings()getDisplayName(boolean,int,java.util.Locale)getDisplayName(boolean,int)setIDsetID(java.lang.String)getIDgetID()getRawOffsetgetRawOffset()setRawOffsetsetRawOffset(int)getOffsetsgetOffsets(long,int[])getOffset(int,int,int,int,int,int)TimeZone()GMT_IDNO_TIMEZONEWeakReference<Object>(java.lang.Object,java.lang.ref.ReferenceQueue)WeakReference<Object>(java.lang.Object)Entry(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap.Entry)AbstractExecutorService/modules/java.base/java/util/concurrent/AbstractExecutorService.classFuture<T>List<Future<T>>SequencedCollection<Future<T>>Collection<Future<T>>Iterable<Future<T>>invokeAllinvokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)Callable<T>/modules/java.base/java/util/concurrent/Callable.class? extends Callable<T>Collection<? extends Callable<T>>Iterable<? extends Callable<T>>invokeAll(java.util.Collection)invokeAnyinvokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)invokeAny(java.util.Collection)Callable<>submitsubmit(java.util.concurrent.Callable)submit(java.lang.Runnable,java.lang.Object)Future<?>submit(java.lang.Runnable)RunnableFuture<>/modules/java.base/java/util/concurrent/RunnableFuture.classRunnableFuture<T>newTaskFornewTaskFor(java.util.concurrent.Callable)newTaskFor(java.lang.Runnable,java.lang.Object)AbstractExecutorService()CallableAltResult/modules/java.base/java/util/concurrent/CompletableFuture$AltResult.classAltResult(java.lang.Throwable)exAsynchronousCompletionTask/modules/java.base/java/util/concurrent/CompletableFuture$AsynchronousCompletionTask.classBiAccept/modules/java.base/java/util/concurrent/CompletableFuture$BiAccept.classBiCompletion<T,U,Void>/modules/java.base/java/util/concurrent/CompletableFuture$BiCompletion.classUniCompletion<T,Void>/modules/java.base/java/util/concurrent/CompletableFuture$UniCompletion.classclaimclaim()CompletableFuture<V>Future<V>CompletionStage<V>CompletableFuture<T>CompletionStage<T>UniCompletionUniCompletion(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)CompletableFuture<Void>Future<Void>CompletionStage<Void>UniCompletion<T,Void>(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)srcdepexecutorCompletableFuture<U>Future<U>CompletionStage<U>BiCompletionBiCompletion(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)BiCompletion<T,U,Void>(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)sndtryFiretryFire(int)BiConsumer<? super T,? super U>BiAccept(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.function.BiConsumer)fnBiApply/modules/java.base/java/util/concurrent/CompletableFuture$BiApply.classBiCompletion<T,U,V>UniCompletion<T,V>UniCompletion<T,V>(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)BiCompletion<T,U,V>(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)BiFunction<? super T,? super U,? extends V>BiApply(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.function.BiFunction)BiRun/modules/java.base/java/util/concurrent/CompletableFuture$BiRun.classBiRun(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.lang.Runnable)Completion/modules/java.base/java/util/concurrent/CompletableFuture$Completion.classForkJoinTask<Void>/modules/java.base/java/util/concurrent/ForkJoinTask.classstatestate()exceptionNowexceptionNow()resultNowresultNow()get(long,java.util.concurrent.TimeUnit)isDoneisDone()isCancelledisCancelled()cancel(boolean)ForkJoinTask<>ForkJoinTask<?>adaptInterruptibleadaptInterruptible(java.lang.Runnable)ForkJoinTask<T>adaptInterruptible(java.lang.Runnable,java.lang.Object)adaptInterruptible(java.util.concurrent.Callable)Callable<? extends T>adaptadapt(java.util.concurrent.Callable)adapt(java.lang.Runnable,java.lang.Object)adapt(java.lang.Runnable)compareAndSetForkJoinTaskTagcompareAndSetForkJoinTaskTag(short,short)setForkJoinTaskTagsetForkJoinTaskTag(short)getForkJoinTaskTaggetForkJoinTaskTag()pollSubmissionpollSubmission()pollTaskpollTask()pollNextLocalTaskpollNextLocalTask()peekNextLocalTaskpeekNextLocalTask()exec()setRawResultsetRawResult(java.lang.Object)setRawResult(java.lang.Void)getRawResultgetRawResult()getSurplusQueuedTaskCountgetSurplusQueuedTaskCount()getQueuedTaskCountgetQueuedTaskCount()tryUnforktryUnfork()inForkJoinPoolinForkJoinPool()getPoolgetPool()helpQuiescehelpQuiesce()quietlyJoinPoolInvokeAllTaskquietlyJoinPoolInvokeAllTask(long)quietlyJoinUninterruptiblyquietlyJoinUninterruptibly(long,java.util.concurrent.TimeUnit)quietlyJoinquietlyJoin(long,java.util.concurrent.TimeUnit)quietlyInvokequietlyInvoke()quietlyJoin()quietlyCompletequietlyComplete()complete(java.lang.Object)complete(java.lang.Void)completeExceptionallycompleteExceptionally(java.lang.Throwable)isCompletedNormallyisCompletedNormally()isCompletedAbnormallyisCompletedAbnormally()Collection<T>ForkJoinTask[]ForkJoinTask<?>[]invokeAll(java.util.concurrent.ForkJoinTask[])invokeAll(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinTask)invoke()forkfork()ForkJoinTaskForkJoinTask()ForkJoinTask<Void>()getForkJoinTaskStatusMarkerBitgetForkJoinTaskStatusMarkerBit()setForkJoinTaskStatusMarkerBitsetForkJoinTaskStatusMarkerBit()uncheckedThrowuncheckedThrow(java.lang.Throwable)rethrowrethrow(java.lang.Throwable)doExecdoExec()trySetExceptiontrySetException(java.lang.Throwable)onAuxExceptionSetonAuxExceptionSet(java.lang.Throwable)trySetThrowntrySetThrown(java.lang.Throwable)trySetCancelledtrySetCancelled()statusUNCOMPENSATESMASKMARKERHAVE_EXCEPTIONTHROWNABNORMALCompletableFuture<?>CompletionStage<?>Completion()UniExceptionally/modules/java.base/java/util/concurrent/CompletableFuture$UniExceptionally.classUniCompletion<T,T>UniCompletion<T,T>(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)Function<? super Throwable,? extends T>UniExceptionally(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.function.Function)UniHandle/modules/java.base/java/util/concurrent/CompletableFuture$UniHandle.classBiFunction<? super T,Throwable,? extends V>UniHandle(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.function.BiFunction)UniWhenComplete/modules/java.base/java/util/concurrent/CompletableFuture$UniWhenComplete.classBiConsumer<? super T,? super Throwable>UniWhenComplete(java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,java.util.function.BiConsumer)CompletableFuturetoCompletableFuturetoCompletableFuture()? extends CompletionStageFunction<Throwable,? extends CompletionStage>exceptionallyComposeAsyncexceptionallyComposeAsync(java.util.function.Function,java.util.concurrent.Executor)? extends CompletionStage<T>Function<Throwable,? extends CompletionStage<T>>exceptionallyComposeAsync(java.util.function.Function)exceptionallyComposeexceptionallyCompose(java.util.function.Function)Function<Throwable,? extends T>exceptionallyAsyncexceptionallyAsync(java.util.function.Function,java.util.concurrent.Executor)exceptionallyAsync(java.util.function.Function)exceptionallyexceptionally(java.util.function.Function)whenCompleteAsyncwhenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)whenCompleteAsync(java.util.function.BiConsumer)whenCompletewhenComplete(java.util.function.BiConsumer)BiFunction<>handleAsynchandleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)BiFunction<? super T,Throwable,? extends U>handleAsync(java.util.function.BiFunction)handlehandle(java.util.function.BiFunction)thenComposeAsyncthenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)? extends CompletionStage<U>Function<? super T,? extends CompletionStage<U>>thenComposeAsync(java.util.function.Function)thenComposethenCompose(java.util.function.Function)runAfterEitherAsyncrunAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)runAfterEitherrunAfterEither(java.util.concurrent.CompletionStage,java.lang.Runnable)CompletionStage<? extends T>acceptEitherAsyncacceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer)acceptEitheracceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)applyToEitherAsyncapplyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)Function<? super T,U>applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function)applyToEitherapplyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)runAfterBothAsyncrunAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)runAfterBothrunAfterBoth(java.util.concurrent.CompletionStage,java.lang.Runnable)BiConsumer<>thenAcceptBothAsyncthenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)CompletionStage<? extends U>thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)thenAcceptBoththenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)thenCombineAsyncthenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction)thenCombinethenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)thenRunAsyncthenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)thenRunAsync(java.lang.Runnable)thenRunthenRun(java.lang.Runnable)thenAcceptAsyncthenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)thenAcceptAsync(java.util.function.Consumer)thenAcceptthenAccept(java.util.function.Consumer)thenApplyAsyncthenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)thenApplyAsync(java.util.function.Function)thenApplythenApply(java.util.function.Function)failedStagefailedStage(java.lang.Throwable)failedFuturefailedFuture(java.lang.Throwable)completedStagecompletedStage(java.lang.Object)delayedExecutordelayedExecutor(long,java.util.concurrent.TimeUnit)delayedExecutor(long,java.util.concurrent.TimeUnit,java.util.concurrent.Executor)completeOnTimeoutcompleteOnTimeout(java.lang.Object,long,java.util.concurrent.TimeUnit)orTimeoutorTimeout(long,java.util.concurrent.TimeUnit)completeAsynccompleteAsync(java.util.function.Supplier)completeAsync(java.util.function.Supplier,java.util.concurrent.Executor)minimalCompletionStageminimalCompletionStage()defaultExecutordefaultExecutor()newIncompleteFuturenewIncompleteFuture()getNumberOfDependentsgetNumberOfDependents()obtrudeExceptionobtrudeException(java.lang.Throwable)obtrudeValueobtrudeValue(java.lang.Object)isCompletedExceptionallyisCompletedExceptionally()CompletableFuture[]CompletableFuture<?>[]CompletableFuture<Object>Future<Object>CompletionStage<Object>anyOfanyOf(java.util.concurrent.CompletableFuture[])allOf(java.util.concurrent.CompletableFuture[])getNowgetNow(java.lang.Object)completedFuturecompletedFuture(java.lang.Object)runAsyncrunAsync(java.lang.Runnable,java.util.concurrent.Executor)runAsync(java.lang.Runnable)supplyAsyncsupplyAsync(java.util.function.Supplier,java.util.concurrent.Executor)Supplier<U>supplyAsync(java.util.function.Supplier)CompletableFuture(java.lang.Object)CompletableFuture()asyncRunStageasyncRunStage(java.util.concurrent.Executor,java.lang.Runnable)asyncSupplyStageasyncSupplyStage(java.util.concurrent.Executor,java.util.function.Supplier)BiCompletion<?,?,?>UniCompletion<?,?>orpushorpush(java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture.BiCompletion)andTreeandTree(java.util.concurrent.CompletableFuture[],int,int)BiRun<?,?>BiCompletion<?,?,Void>UniCompletion<?,Void>biRunbiRun(java.lang.Object,java.lang.Object,java.lang.Runnable,java.util.concurrent.CompletableFuture.BiRun)BiAccept<>BiCompletion<>UniCompletion<>biAcceptbiAccept(java.lang.Object,java.lang.Object,java.util.function.BiConsumer,java.util.concurrent.CompletableFuture.BiAccept)? super R? super SBiConsumer<? super R,? super S>BiAccept<R,S>BiCompletion<R,S,Void>UniCompletion<R,Void>BiApply<>biApplybiApply(java.lang.Object,java.lang.Object,java.util.function.BiFunction,java.util.concurrent.CompletableFuture.BiApply)BiFunction<? super R,? super S,? extends T>BiApply<R,S,T>BiCompletion<R,S,T>UniCompletion<R,T>postFirepostFire(java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture,int)bipushbipush(java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture.BiCompletion)UniExceptionally<T>uniExceptionallyuniExceptionally(java.lang.Object,java.util.function.Function,java.util.concurrent.CompletableFuture.UniExceptionally)UniHandle<>uniHandleuniHandle(java.lang.Object,java.util.function.BiFunction,java.util.concurrent.CompletableFuture.UniHandle)BiFunction<? super S,Throwable,? extends T>UniHandle<S,T>UniCompletion<S,T>UniWhenComplete<T>uniWhenCompleteuniWhenComplete(java.lang.Object,java.util.function.BiConsumer,java.util.concurrent.CompletableFuture.UniWhenComplete)postFire(java.util.concurrent.CompletableFuture,int)unipushunipush(java.util.concurrent.CompletableFuture.Completion)cleanStackcleanStack()postCompletepostComplete()screenExecutorscreenExecutor(java.util.concurrent.Executor)completeRelaycompleteRelay(java.lang.Object)encodeRelayencodeRelay(java.lang.Object)encodeOutcomeencodeOutcome(java.lang.Object,java.lang.Throwable)completeThrowablecompleteThrowable(java.lang.Throwable,java.lang.Object)encodeThrowableencodeThrowable(java.lang.Throwable,java.lang.Object)completeThrowable(java.lang.Throwable)encodeThrowable(java.lang.Throwable)wrapInExecutionExceptionwrapInExecutionException(java.lang.Throwable)wrapInCompletionExceptionwrapInCompletionException(java.lang.Throwable)completeValuecompleteValue(java.lang.Object)encodeValueencodeValue(java.lang.Object)completeNullcompleteNull()pushStackpushStack(java.util.concurrent.CompletableFuture.Completion)tryPushStacktryPushStack(java.util.concurrent.CompletableFuture.Completion)internalCompleteinternalComplete(java.lang.Object)NESTEDASYNCSYNCNILstackCompletionException/modules/java.base/java/util/concurrent/CompletionException.classCompletionException(java.lang.Throwable)CompletionException(java.lang.String,java.lang.Throwable)CompletionException(java.lang.String)CompletionException()CompletionStageCollectionView/modules/java.base/java/util/concurrent/ConcurrentHashMap$CollectionView.classConcurrentHashMap<K,V>ConcurrentMap<K,V>getMap()CollectionView(java.util.concurrent.ConcurrentHashMap)EntrySetView/modules/java.base/java/util/concurrent/ConcurrentHashMap$EntrySetView.classCollectionView<K,V,Entry<K,V>>Spliterator<Entry<K,V>>? super Entry<K,V>Consumer<? super Entry<K,V>>Iterator<Entry<K,V>>Stream<Entry<K,V>>BaseStream<Entry<K,V>,Stream<Entry<K,V>>>Predicate<? super Entry<K,V>>? extends Entry<K,V>Collection<? extends Entry<K,V>>Iterable<? extends Entry<K,V>>add(java.util.Map.Entry)CollectionView<K,V,Entry<K,V>>(java.util.concurrent.ConcurrentHashMap)EntrySetView(java.util.concurrent.ConcurrentHashMap)KeySetView/modules/java.base/java/util/concurrent/ConcurrentHashMap$KeySetView.classCollectionView<K,V,K>Spliterator<K>Consumer<? super K>Iterator<K>Stream<K>BaseStream<K,Stream<K>>Predicate<? super K>Collection<? extends K>Iterable<? extends K>CollectionView<K,V,K>(java.util.concurrent.ConcurrentHashMap)getMappedValuegetMappedValue()KeySetView(java.util.concurrent.ConcurrentHashMap,java.lang.Object)/modules/java.base/java/util/concurrent/ConcurrentHashMap$Node.classfind(int,java.lang.Object)Node(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap.Node)Node(int,java.lang.Object,java.lang.Object)valValuesView/modules/java.base/java/util/concurrent/ConcurrentHashMap$ValuesView.classCollectionView<K,V,V>Spliterator<V>Consumer<? super V>Iterator<V>Stream<V>BaseStream<V,Stream<V>>Predicate<? super V>Collection<? extends V>Iterable<? extends V>CollectionView<K,V,V>(java.util.concurrent.ConcurrentHashMap)ValuesView(java.util.concurrent.ConcurrentHashMap)ConcurrentHashMapToIntFunction<Entry<K,V>>reduceEntriesToIntreduceEntriesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)ToLongFunction<Entry<K,V>>reduceEntriesToLongreduceEntriesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)ToDoubleFunction<Entry<K,V>>reduceEntriesToDoublereduceEntriesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)reduceEntriesreduceEntries(long,java.util.function.Function,java.util.function.BiFunction)Function<Entry<K,V>,? extends U>BiFunction<? super U,? super U,? extends U>BiFunction<Entry<K,V>,Entry<K,V>,? extends Entry<K,V>>reduceEntries(long,java.util.function.BiFunction)searchEntriessearchEntries(long,java.util.function.Function)Consumer<>forEachEntryforEachEntry(long,java.util.function.Function,java.util.function.Consumer)Consumer<? super U>forEachEntry(long,java.util.function.Consumer)ToIntFunction<? super V>reduceValuesToIntreduceValuesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)ToLongFunction<? super V>reduceValuesToLongreduceValuesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)ToDoubleFunction<? super V>reduceValuesToDoublereduceValuesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)reduceValuesreduceValues(long,java.util.function.Function,java.util.function.BiFunction)Function<? super V,? extends U>reduceValues(long,java.util.function.BiFunction)searchValuessearchValues(long,java.util.function.Function)forEachValueforEachValue(long,java.util.function.Function,java.util.function.Consumer)forEachValue(long,java.util.function.Consumer)ToIntFunction<? super K>reduceKeysToIntreduceKeysToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)ToLongFunction<? super K>reduceKeysToLongreduceKeysToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)ToDoubleFunction<? super K>reduceKeysToDoublereduceKeysToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)reduceKeysreduceKeys(long,java.util.function.Function,java.util.function.BiFunction)Function<? super K,? extends U>BiFunction<? super K,? super K,? extends K>reduceKeys(long,java.util.function.BiFunction)searchKeyssearchKeys(long,java.util.function.Function)forEachKeyforEachKey(long,java.util.function.Function,java.util.function.Consumer)forEachKey(long,java.util.function.Consumer)ToIntBiFunction<? super K,? super V>/modules/java.base/java/util/function/ToIntBiFunction.classreduceToIntreduceToInt(long,java.util.function.ToIntBiFunction,int,java.util.function.IntBinaryOperator)ToLongBiFunction<? super K,? super V>/modules/java.base/java/util/function/ToLongBiFunction.classreduceToLongreduceToLong(long,java.util.function.ToLongBiFunction,long,java.util.function.LongBinaryOperator)ToDoubleBiFunction<? super K,? super V>/modules/java.base/java/util/function/ToDoubleBiFunction.classreduceToDoublereduceToDouble(long,java.util.function.ToDoubleBiFunction,double,java.util.function.DoubleBinaryOperator)reducereduce(long,java.util.function.BiFunction,java.util.function.BiFunction)BiFunction<? super K,? super V,? extends U>searchsearch(long,java.util.function.BiFunction)forEach(long,java.util.function.BiFunction,java.util.function.Consumer)forEach(long,java.util.function.BiConsumer)batchForbatchFor(long)untreeify(java.util.concurrent.ConcurrentHashMap.Node)sumCountsumCount()helpTransferhelpTransfer(java.util.concurrent.ConcurrentHashMap.Node[],java.util.concurrent.ConcurrentHashMap.Node)resizeStampresizeStamp(int)KeySetView<>CollectionView<>KeySetView<K,V>keySet(java.lang.Object)KeySetView<K,Boolean>CollectionView<K,Boolean,K>newKeySetnewKeySet(int)newKeySet()mappingCountmappingCount()removeValueIfremoveValueIf(java.util.function.Predicate)removeEntryIfremoveEntryIf(java.util.function.Predicate)replaceNodereplaceNode(java.lang.Object,java.lang.Object,java.lang.Object)putVal(java.lang.Object,java.lang.Object,boolean)ConcurrentHashMap(int,float,int)ConcurrentHashMap(int,float)ConcurrentHashMap(java.util.Map)ConcurrentHashMap(int)ConcurrentHashMap()setTabAtsetTabAt(java.util.concurrent.ConcurrentHashMap.Node[],int,java.util.concurrent.ConcurrentHashMap.Node)casTabAtcasTabAt(java.util.concurrent.ConcurrentHashMap.Node[],int,java.util.concurrent.ConcurrentHashMap.Node,java.util.concurrent.ConcurrentHashMap.Node)tabAttabAt(java.util.concurrent.ConcurrentHashMap.Node[],int)spreadspread(int)NCPUHASH_BITSRESERVEDTREEBINMOVEDMAX_ARRAY_SIZEConcurrentMapCountDownLatch/modules/java.base/java/util/concurrent/CountDownLatch.classawait(long,java.util.concurrent.TimeUnit)CountDownLatch(int)ExecutionException/modules/java.base/java/util/concurrent/ExecutionException.classExecutionException(java.lang.Throwable)ExecutionException(java.lang.String,java.lang.Throwable)ExecutionException(java.lang.String)ExecutionException()Executor/modules/java.base/java/util/concurrent/Executor.classexecute(java.lang.Runnable)ExecutorService/modules/java.base/java/util/concurrent/ExecutorService.classawaitTerminationawaitTermination(long,java.util.concurrent.TimeUnit)isShutdownisShutdown()List<Runnable>SequencedCollection<Runnable>Collection<Runnable>Iterable<Runnable>shutdownNowshutdownNow()shutdownshutdown()ForkJoinWorkerThreadFactory/modules/java.base/java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory.classnewThreadnewThread(java.util.concurrent.ForkJoinPool)ManagedBlocker/modules/java.base/java/util/concurrent/ForkJoinPool$ManagedBlocker.classisReleasableisReleasable()blockblock()WorkQueue/modules/java.base/java/util/concurrent/ForkJoinPool$WorkQueue.classisApparentlyUnblockedisApparentlyUnblocked()helpAsyncBlockerhelpAsyncBlocker(java.util.concurrent.ForkJoinPool.ManagedBlocker)helpCompletehelpComplete(java.util.concurrent.ForkJoinTask,boolean,int)tryRemoveAndExectryRemoveAndExec(java.util.concurrent.ForkJoinTask,boolean)topLevelExectopLevelExec(java.util.concurrent.ForkJoinTask,int)peekpeek()tryUnpushtryUnpush(java.util.concurrent.ForkJoinTask,boolean)nextLocalTasknextLocalTask()pushpush(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinPool,boolean)queueSizequeueSize()getPoolIndexgetPoolIndex()WorkQueue(java.util.concurrent.ForkJoinWorkerThread,int,int,boolean)tryLockPhasetryLockPhase()unlockPhaseunlockPhase()updateArray(java.util.concurrent.ForkJoinTask[])updateTopupdateTop(int)updateBaseupdateBase(int)parking/modules/java.base/java/util/concurrent/ForkJoinPool.class"w"wnstealsstackPredphasetopconfigForkJoinPoolendCompensatedBlockendCompensatedBlock(long)beginCompensatedBlockbeginCompensatedBlock()managedBlockmanagedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)awaitQuiescenceawaitQuiescence(long,java.util.concurrent.TimeUnit)isTerminatingisTerminating()? super ForkJoinTask<?>Collection<? super ForkJoinTask<?>>Iterable<? super ForkJoinTask<?>>drainTasksTodrainTasksTo(java.util.Collection)hasQueuedSubmissionshasQueuedSubmissions()getQueuedSubmissionCountgetQueuedSubmissionCount()getStealCountgetStealCount()isQuiescentisQuiescent()getActiveThreadCountgetActiveThreadCount()getRunningThreadCountgetRunningThreadCount()getAsyncModegetAsyncMode()getPoolSizegetPoolSize()getCommonPoolParallelismgetCommonPoolParallelism()getParallelismgetParallelism()invokeAllUninterruptiblyinvokeAllUninterruptibly(java.util.Collection)setParallelismsetParallelism(int)lazySubmitlazySubmit(java.util.concurrent.ForkJoinTask)externalSubmitexternalSubmit(java.util.concurrent.ForkJoinTask)submit(java.util.concurrent.ForkJoinTask)execute(java.util.concurrent.ForkJoinTask)invoke(java.util.concurrent.ForkJoinTask)commonPoolcommonPool()? super ForkJoinPoolPredicate<? super ForkJoinPool>ForkJoinPool(int,java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory,java.lang.Thread.UncaughtExceptionHandler,boolean,int,int,int,java.util.function.Predicate,long,java.util.concurrent.TimeUnit)ForkJoinPool(int,java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory,java.lang.Thread.UncaughtExceptionHandler,boolean)ForkJoinPool(int)ForkJoinPool()helpAsyncBlocker(java.util.concurrent.Executor,java.util.concurrent.ForkJoinPool.ManagedBlocker)commonQueuecommonQueue()externalQueueexternalQueue(java.util.concurrent.ForkJoinPool)externalSubmissionQueueexternalSubmissionQueue()nextTaskFornextTaskFor(java.util.concurrent.ForkJoinPool.WorkQueue)helpQuiescePoolhelpQuiescePool(java.util.concurrent.ForkJoinPool,long,boolean)helpComplete(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinPool.WorkQueue,boolean)helpJoinhelpJoin(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinPool.WorkQueue,boolean)uncompensateuncompensate()runWorkerrunWorker(java.util.concurrent.ForkJoinPool.WorkQueue)signalWorksignalWork()deregisterWorkerderegisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)registerWorkerregisterWorker(java.util.concurrent.ForkJoinPool.WorkQueue)nextWorkerThreadNamenextWorkerThreadName()poolIsStoppingpoolIsStopping(java.util.concurrent.ForkJoinPool)slotOffsetslotOffset(int)parallelism"fjpctl"fjpctlctlthreadIdsstealCountkeepAliverunStateWorkQueue[]queuesworkerNamePrefixcontaineruehsaturateterminationmodifyThreadPermissioncommondefaultForkJoinWorkerThreadFactoryASHIFTABASETC_MASKTC_UNITTC_SHIFTRC_MASKRC_UNITRC_SHIFTIDLEDROPPEDPRESET_SIZECLEAR_TLSFIFOMAX_SLEEPMIN_SLEEPSPIN_WAITSRS_LOCKSHUTDOWNSTOPINVALID_IDEXTERNAL_ID_MASKMAX_CAPUMASKLMASKINITIAL_EXTERNAL_QUEUE_CAPACITYINITIAL_QUEUE_CAPACITYDEFAULT_COMMON_MAX_SPARESTIMEOUT_SLOPDEFAULT_KEEPALIVEForkJoinWorkerThread/modules/java.base/java/util/concurrent/ForkJoinWorkerThread.classonTerminationonTermination(java.lang.Throwable)onStartonStart()ForkJoinWorkerThread(java.util.concurrent.ForkJoinPool)ForkJoinWorkerThread(java.lang.ThreadGroup,java.util.concurrent.ForkJoinPool,boolean)ForkJoinWorkerThread(java.lang.ThreadGroup,java.util.concurrent.ForkJoinPool,boolean,boolean)workQueuepool/modules/java.base/java/util/concurrent/Future$State.classcompareTo(java.util.concurrent.Future.State)CANCELLEDFAILEDSUCCESSRUNNINGFutureRunnableFutureThreadFactory/modules/java.base/java/util/concurrent/ThreadFactory.classnewThread(java.lang.Runnable)TimeUnit/modules/java.base/java/util/concurrent/TimeUnit.classEnum<TimeUnit>Comparable<TimeUnit>compareTo(java.util.concurrent.TimeUnit)EnumDesc<TimeUnit>DynamicConstantDesc<TimeUnit>Optional<EnumDesc<TimeUnit>>Class<TimeUnit>Enum<TimeUnit>(java.lang.String,int)of(java.time.temporal.ChronoUnit)toChronoUnittoChronoUnit()timedJointimedJoin(java.lang.Thread,long)timedWaittimedWait(java.lang.Object,long)toDays(long)toHours(long)toMinutes(long)toSeconds(long)toMillis(long)toMicrostoMicros(long)toNanos(long)convertconvert(java.time.Duration)convert(long,java.util.concurrent.TimeUnit)TimeUnit[]MILLISECONDSMICROSECONDSNANOSECONDSTimeoutException/modules/java.base/java/util/concurrent/TimeoutException.classTimeoutException(java.lang.String)TimeoutException()BiConsumerandThenandThen(java.util.function.BiConsumer)accept(java.lang.Object,java.lang.Object)BiFunctionBiFunction<T,U,V>andThen(java.util.function.Function)Function<? super R,? extends V>applyapply(java.lang.Object,java.lang.Object)BinaryOperator/modules/java.base/java/util/function/BinaryOperator.classBiFunction<T,T,T>BiFunction<T,T,V>Function<? super T,? extends V>BinaryOperator<>BinaryOperator<T>maxBymaxBy(java.util.Comparator)minByminBy(java.util.Comparator)ConsumerandThen(java.util.function.Consumer)DoubleBinaryOperator/modules/java.base/java/util/function/DoubleBinaryOperator.classapplyAsDoubleapplyAsDouble(double,double)DoubleConsumer/modules/java.base/java/util/function/DoubleConsumer.classandThen(java.util.function.DoubleConsumer)DoubleFunction/modules/java.base/java/util/function/DoubleFunction.classapply(double)DoublePredicate/modules/java.base/java/util/function/DoublePredicate.classor(java.util.function.DoublePredicate)and(java.util.function.DoublePredicate)testtest(double)DoubleSupplier/modules/java.base/java/util/function/DoubleSupplier.classDoubleToIntFunction/modules/java.base/java/util/function/DoubleToIntFunction.classapplyAsIntapplyAsInt(double)DoubleToLongFunction/modules/java.base/java/util/function/DoubleToLongFunction.classapplyAsLongapplyAsLong(double)DoubleUnaryOperator/modules/java.base/java/util/function/DoubleUnaryOperator.classidentity()andThen(java.util.function.DoubleUnaryOperator)compose(java.util.function.DoubleUnaryOperator)applyAsDouble(double)FunctionFunction<T,T>Function<T,V>Function<V,R>compose(java.util.function.Function)Function<? super V,? extends T>apply(java.lang.Object)IntBinaryOperator/modules/java.base/java/util/function/IntBinaryOperator.classapplyAsInt(int,int)IntConsumer/modules/java.base/java/util/function/IntConsumer.classandThen(java.util.function.IntConsumer)IntFunctionapply(int)IntPredicate/modules/java.base/java/util/function/IntPredicate.classor(java.util.function.IntPredicate)and(java.util.function.IntPredicate)test(int)IntSupplier/modules/java.base/java/util/function/IntSupplier.classIntToDoubleFunction/modules/java.base/java/util/function/IntToDoubleFunction.classapplyAsDouble(int)IntToLongFunction/modules/java.base/java/util/function/IntToLongFunction.classapplyAsLong(int)IntUnaryOperator/modules/java.base/java/util/function/IntUnaryOperator.classandThen(java.util.function.IntUnaryOperator)compose(java.util.function.IntUnaryOperator)applyAsInt(int)LongBinaryOperator/modules/java.base/java/util/function/LongBinaryOperator.classapplyAsLong(long,long)LongConsumer/modules/java.base/java/util/function/LongConsumer.classandThen(java.util.function.LongConsumer)LongFunction/modules/java.base/java/util/function/LongFunction.classapply(long)LongPredicate/modules/java.base/java/util/function/LongPredicate.classor(java.util.function.LongPredicate)and(java.util.function.LongPredicate)test(long)LongSupplier/modules/java.base/java/util/function/LongSupplier.classLongToDoubleFunction/modules/java.base/java/util/function/LongToDoubleFunction.classapplyAsDouble(long)LongToIntFunction/modules/java.base/java/util/function/LongToIntFunction.classapplyAsInt(long)LongUnaryOperator/modules/java.base/java/util/function/LongUnaryOperator.classandThen(java.util.function.LongUnaryOperator)compose(java.util.function.LongUnaryOperator)applyAsLong(long)ObjDoubleConsumer/modules/java.base/java/util/function/ObjDoubleConsumer.classaccept(java.lang.Object,double)ObjIntConsumer/modules/java.base/java/util/function/ObjIntConsumer.classaccept(java.lang.Object,int)ObjLongConsumer/modules/java.base/java/util/function/ObjLongConsumer.classaccept(java.lang.Object,long)PredicatePredicate<>Predicate<T>not(java.util.function.Predicate)isEqual(java.lang.Object)or(java.util.function.Predicate)and(java.util.function.Predicate)test(java.lang.Object)SupplierToDoubleBiFunctionapplyAsDouble(java.lang.Object,java.lang.Object)ToDoubleFunctionapplyAsDouble(java.lang.Object)ToIntBiFunctionapplyAsInt(java.lang.Object,java.lang.Object)ToIntFunctionapplyAsInt(java.lang.Object)ToLongBiFunctionapplyAsLong(java.lang.Object,java.lang.Object)ToLongFunctionapplyAsLong(java.lang.Object)UnaryOperatorFunction<V,T>UnaryOperator<>UnaryOperator<T>java.util.loggingErrorManager/modules/java.logging/java/util/logging/ErrorManager.class/modules/java.logging/java/util/logging/modules/java.logging/java/util/modules/java.logging/java/modules/java.loggingerrorerror(java.lang.String,java.lang.Exception,int)ErrorManager()FORMAT_FAILUREOPEN_FAILURECLOSE_FAILUREFLUSH_FAILUREWRITE_FAILUREGENERIC_FAILURE/modules/java.logging/java/util/logging/Filter.classisLoggable(java.util.logging.LogRecord)Formatter/modules/java.logging/java/util/logging/Formatter.classformatMessageformatMessage(java.util.logging.LogRecord)getTailgetTail(java.util.logging.Handler)getHeadgetHead(java.util.logging.Handler)format(java.util.logging.LogRecord)Formatter()Handler/modules/java.logging/java/util/logging/Handler.classgetLevelgetLevel()setLevelsetLevel(java.util.logging.Level)reportErrorreportError(java.lang.String,java.lang.Exception,int)getErrorManagergetErrorManager()setErrorManagersetErrorManager(java.util.logging.ErrorManager)getFiltergetFilter()setFiltersetFilter(java.util.logging.Filter)getEncodinggetEncoding()setEncodingsetEncoding(java.lang.String)getFormattergetFormatter()setFormattersetFormatter(java.util.logging.Formatter)publishpublish(java.util.logging.LogRecord)unlockunlock()tryUseLocktryUseLock()Handler(java.util.logging.Level,java.util.logging.Formatter,java.util.logging.Formatter)Handler()/modules/java.logging/java/util/logging/Level.classfindLevelfindLevel(java.lang.String)getLocalizedLevelNamegetLocalizedLevelName()getCachedLocalizedLevelNamegetCachedLocalizedLevelName()getLevelNamegetLevelName()getLocalizedNamegetLocalizedName()getResourceBundleNamegetResourceBundleName()Level(java.lang.String,int,java.lang.String)Level(java.lang.String,int)FINESTFINERFINECONFIGSEVERELogNode/modules/java.logging/java/util/logging/LogManager$LogNode.classwalkAndSetParentwalkAndSetParent(java.util.logging.Logger)LogNode(java.util.logging.LogManager.LogNode,java.util.logging.LogManager.LoggerContext)loggerRefHashMap<String,LogNode>AbstractMap<String,LogNode>Map<String,LogNode>LoggerContext/modules/java.logging/java/util/logging/LogManager$LoggerContext.classgetNode(java.lang.String)getLoggerNamesgetLoggerNames()removeLoggerRefremoveLoggerRef(java.lang.String,java.util.logging.LogManager.LoggerWeakRef)addLocalLoggeraddLocalLogger(java.util.logging.Logger,boolean)addLocalLogger(java.util.logging.Logger)findLoggerfindLogger(java.lang.String)demandLoggerdemandLogger(java.lang.String,java.lang.String,java.lang.Module)getGlobalLoggergetGlobalLogger()getRootLoggergetRootLogger()getOwnergetOwner()requiresDefaultLoggersrequiresDefaultLoggers()LoggerWeakRef/modules/java.logging/java/util/logging/LogManager$LoggerWeakRef.classWeakReference<Logger>Reference<Logger>? super LoggerReferenceQueue<? super Logger>Reference<Logger>(java.util.logging.Logger,java.lang.ref.ReferenceQueue)Reference<Logger>(java.util.logging.Logger)refersToImpl(java.util.logging.Logger)refersTo(java.util.logging.Logger)WeakReference<Logger>(java.util.logging.Logger,java.lang.ref.ReferenceQueue)WeakReference<Logger>(java.util.logging.Logger)setParentRefsetParentRef(java.lang.ref.WeakReference)setNodesetNode(java.util.logging.LogManager.LogNode)disposedispose()LoggerWeakRef(java.util.logging.Logger)LogManager/modules/java.logging/java/util/logging/LogManager.classremoveConfigurationListenerremoveConfigurationListener(java.lang.Runnable)addConfigurationListeneraddConfigurationListener(java.lang.Runnable)getLoggingMXBeangetLoggingMXBean()getFormatterPropertygetFormatterProperty(java.lang.String,java.util.logging.Formatter)getFilterPropertygetFilterProperty(java.lang.String,java.util.logging.Filter)getLevelPropertygetLevelProperty(java.lang.String,java.util.logging.Level)getBooleanPropertygetBooleanProperty(java.lang.String,boolean)getLongPropertygetLongProperty(java.lang.String,long)getIntPropertygetIntProperty(java.lang.String,int)getStringPropertygetStringProperty(java.lang.String,java.lang.String)BiFunction<String,String,String>Function<String,BiFunction<String,String,String>>updateConfigurationupdateConfiguration(java.io.InputStream,java.util.function.Function)updateConfiguration(java.util.function.Function)readConfigurationreadConfiguration(java.io.InputStream)getConfigurationFileNamegetConfigurationFileName()readConfiguration()addLoggeraddLogger(java.util.logging.Logger)drainLoggerRefQueueBoundeddrainLoggerRefQueueBounded()demandSystemLoggerdemandSystemLogger(java.lang.String,java.lang.String,java.lang.Module)demandSystemLogger(java.lang.String,java.lang.String,java.lang.Class)demandLogger(java.lang.String,java.lang.String,java.lang.Class)getSystemContextgetSystemContext()getLogManagergetLogManager()ensureLogManagerInitializedensureLogManagerInitialized()LogManager()LOGGING_MXBEAN_NAMEcontrolPermissionLogRecord/modules/java.logging/java/util/logging/LogRecord.classsetThrownsetThrown(java.lang.Throwable)getThrowngetThrown()setInstantsetInstant(java.time.Instant)setMillissetMillis(long)getMillisgetMillis()setLongThreadIDsetLongThreadID(long)getLongThreadIDgetLongThreadID()setThreadIDsetThreadID(int)getThreadIDgetThreadID()setParameterssetParameters(java.lang.Object[])setMessagesetMessage(java.lang.String)setSourceMethodNamesetSourceMethodName(java.lang.String)getSourceMethodNamegetSourceMethodName()setSourceClassNamesetSourceClassName(java.lang.String)getSourceClassNamegetSourceClassName()setSequenceNumbersetSequenceNumber(long)getSequenceNumbergetSequenceNumber()setResourceBundleNamesetResourceBundleName(java.lang.String)setResourceBundlesetResourceBundle(java.util.ResourceBundle)getResourceBundlegetResourceBundle()setLoggerNamesetLoggerName(java.lang.String)getLoggerNamegetLoggerName()LogRecord(java.util.logging.Level,java.lang.String)/modules/java.logging/java/util/logging/Logger.classremoveChildLoggerremoveChildLogger(java.util.logging.LogManager.LoggerWeakRef)setParent(java.util.logging.Logger)getUseParentHandlersgetUseParentHandlers()setUseParentHandlerssetUseParentHandlers(boolean)Handler[]accessCheckedHandlersaccessCheckedHandlers()getHandlersgetHandlers()removeHandlerremoveHandler(java.util.logging.Handler)addHandleraddHandler(java.util.logging.Handler)isLoggable(java.util.logging.Level)isLevelInitializedisLevelInitialized()finestfinest(java.util.function.Supplier)finerfiner(java.util.function.Supplier)finefine(java.util.function.Supplier)config(java.util.function.Supplier)info(java.util.function.Supplier)warningwarning(java.util.function.Supplier)severesevere(java.util.function.Supplier)finest(java.lang.String)finer(java.lang.String)fine(java.lang.String)config(java.lang.String)info(java.lang.String)warning(java.lang.String)severe(java.lang.String)throwingthrowing(java.lang.String,java.lang.String,java.lang.Throwable)exitingexiting(java.lang.String,java.lang.String,java.lang.Object)exiting(java.lang.String,java.lang.String)enteringentering(java.lang.String,java.lang.String,java.lang.Object[])entering(java.lang.String,java.lang.String,java.lang.Object)entering(java.lang.String,java.lang.String)logrblogrb(java.util.logging.Level,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)logrb(java.util.logging.Level,java.util.ResourceBundle,java.lang.String,java.lang.Object[])logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object[])logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String)logplogp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable,java.util.function.Supplier)logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)logp(java.util.logging.Level,java.lang.String,java.lang.String,java.util.function.Supplier)logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)log(java.util.logging.Level,java.lang.Throwable,java.util.function.Supplier)log(java.util.logging.Level,java.lang.String,java.lang.Throwable)log(java.util.logging.Level,java.lang.String,java.lang.Object[])log(java.util.logging.Level,java.lang.String,java.lang.Object)log(java.util.logging.Level,java.util.function.Supplier)log(java.util.logging.Level,java.lang.String)log(java.util.logging.LogRecord)getAnonymousLoggergetAnonymousLogger(java.lang.String)getAnonymousLogger()getPlatformLoggergetPlatformLogger(java.lang.String)getLogger(java.lang.String,java.lang.String)setLogManagersetLogManager(java.util.logging.LogManager)mergeWithSystemLoggermergeWithSystemLogger(java.util.logging.Logger)Logger(java.lang.String,java.lang.String,java.lang.Module,java.util.logging.LogManager,boolean)Logger(java.lang.String,java.lang.String)getGlobalgetGlobal()GLOBAL_LOGGER_NAMESYSTEM_LOGGER_RB_NAMELoggingMXBean/modules/java.logging/java/util/logging/LoggingMXBean.classgetParentLoggerNamegetParentLoggerName(java.lang.String)setLoggerLevelsetLoggerLevel(java.lang.String,java.lang.String)getLoggerLevelgetLoggerLevel(java.lang.String)java.util.randomRandomGenerator/modules/java.base/java/util/random/RandomGenerator.class/modules/java.base/java/util/randomnextExponentialnextExponential()nextGaussian(double,double)nextLong(long,long)nextLong(long)nextInt(int,int)nextDouble(double,double)nextDouble(double)nextFloat(float,float)nextFloat(float)equiDoublesequiDoubles(double,double,boolean,boolean)isDeprecatedisDeprecated()java.util.regexIntHashSet/modules/java.base/java/util/regex/IntHashSet.class/modules/java.base/java/util/regexadd(int)contains(int)IntHashSet()MatchResult/modules/java.base/java/util/regex/MatchResult.classhasMatchhasMatch()namedGroupsnamedGroups()groupCountgroupCount()group(java.lang.String)group(int)group()end(java.lang.String)end(int)end()start(java.lang.String)start(int)Matcher/modules/java.base/java/util/regex/Matcher.classgetMatchedGroupIndexgetMatchedGroupIndex(java.lang.String)getSubSequencegetSubSequence(int,int)getTextLengthgetTextLength()match(int,int)search(int)requireEndrequireEnd()hitEndhitEnd()useAnchoringBoundsuseAnchoringBounds(boolean)hasAnchoringBoundshasAnchoringBounds()useTransparentBoundsuseTransparentBounds(boolean)hasTransparentBoundshasTransparentBounds()regionEndregionEnd()regionStartregionStart()regionregion(int,int)Function<MatchResult,String>replaceFirst(java.util.function.Function)replaceFirst(java.lang.String)resultsresults()replaceAll(java.util.function.Function)replaceAll(java.lang.String)appendTailappendTail(java.lang.StringBuilder)appendTail(java.lang.StringBuffer)appendReplacementappendReplacement(java.lang.StringBuilder,java.lang.String)appendReplacement(java.lang.StringBuffer,java.lang.String)quoteReplacementquoteReplacement(java.lang.String)lookingAtlookingAt()find(int)find()matches()reset(java.lang.CharSequence)usePatternusePattern(java.util.regex.Pattern)toMatchResulttoMatchResult()pattern()Matcher(java.util.regex.Pattern,java.lang.CharSequence)Matcher()anchoringBoundstransparentBoundsIntHashSet[]localsPoslocalslastAppendPositionoldLastacceptModeNOANCHORENDANCHORtextlookbehindTogroupsparentPatternBmpCharPredicate/modules/java.base/java/util/regex/Pattern$BmpCharPredicate.classunionunion(java.util.regex.Pattern.CharPredicate,java.util.regex.Pattern.CharPredicate)union(java.util.regex.Pattern.CharPredicate)and(java.util.regex.Pattern.CharPredicate)CharPredicate/modules/java.base/java/util/regex/Pattern$CharPredicate.class/modules/java.base/java/util/regex/Pattern.classisis(int)GroupHead/modules/java.base/java/util/regex/Pattern$GroupHead.classmatch(java.util.regex.Matcher,int,java.lang.CharSequence)GroupHead(int)localIndexGroupTail/modules/java.base/java/util/regex/Pattern$GroupTail.classGroupTail(int,int)groupIndex/modules/java.base/java/util/regex/Pattern$Node.classstudystudy(java.util.regex.Pattern.TreeInfo)Node()TreeInfo/modules/java.base/java/util/regex/Pattern$TreeInfo.classTreeInfo()deterministicmaxValidPatternsplitAsStreamsplitAsStream(java.lang.CharSequence)Predicate<String>asMatchPredicateasMatchPredicate()asPredicateasPredicate()CIRangeUCIRangeU(int,int)CIRangeCIRange(int,int)RangeRange(int,int)SingleUSingleU(int)SingleISingleI(int,int)SingleSingle(int)SingleSSingleS(int)UNIXDOTUNIXDOT()DOTDOT()ALL()HorizWSHorizWS()VertWSVertWS()quotequote(java.lang.String)split(java.lang.CharSequence)splitWithDelimiters(java.lang.CharSequence,int)split(java.lang.CharSequence,int)matches(java.lang.String,java.lang.CharSequence)flags()matchermatcher(java.lang.CharSequence)compilecompile(java.lang.String,int)compile(java.lang.String)lastAcceptMAX_REPSlocalCountcapturingGroupCounthasGroupReflocalTCNCountList<Node>SequencedCollection<Node>Collection<Node>Iterable<Node>topClosureNodesGroupHead[]groupNodespredicatebuffermatchRootUNICODE_CHARACTER_CLASSCANON_EQUNICODE_CASEDOTALLLITERALMULTILINECOMMENTSCASE_INSENSITIVEUNIX_LINESBaseStreamonCloseonClose(java.lang.Runnable)unorderedunordered()parallelparallel()sequentialsequential()isParallelisParallel()Characteristics/modules/java.base/java/util/stream/Collector$Characteristics.classEnum<Characteristics>Comparable<Characteristics>compareTo(java.util.stream.Collector.Characteristics)EnumDesc<Characteristics>DynamicConstantDesc<Characteristics>Optional<EnumDesc<Characteristics>>Class<Characteristics>Enum<Characteristics>(java.lang.String,int)Characteristics[]IDENTITY_FINISHUNORDEREDCollector/modules/java.base/java/util/stream/Collector.classCollector<>Collector<T,A,R>of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector.Characteristics[])Supplier<A>BiConsumer<A,T>BinaryOperator<A>BiFunction<A,A,A>Function<A,R>Collector<T,R,R>of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector.Characteristics[])Supplier<R>BiConsumer<R,T>BinaryOperator<R>BiFunction<R,R,R>Set<Characteristics>Collection<Characteristics>Iterable<Characteristics>finisherfinisher()combinercombiner()accumulatoraccumulator()suppliersupplier()/modules/java.base/java/util/stream/DoubleStream$Builder.classadd(double)DoubleMapMultiConsumer/modules/java.base/java/util/stream/DoubleStream$DoubleMapMultiConsumer.class/modules/java.base/java/util/stream/DoubleStream.classaccept(double,java.util.function.DoubleConsumer)DoubleStreamBaseStream<Double,DoubleStream>concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)generategenerate(java.util.function.DoubleSupplier)iterateiterate(double,java.util.function.DoublePredicate,java.util.function.DoubleUnaryOperator)iterate(double,java.util.function.DoubleUnaryOperator)of(double[])builderbuilder()Stream<Double>BaseStream<Double,Stream<Double>>boxedboxed()findAnyfindAny()findFirstfindFirst()noneMatchnoneMatch(java.util.function.DoublePredicate)allMatchallMatch(java.util.function.DoublePredicate)anyMatchanyMatch(java.util.function.DoublePredicate)summaryStatisticssummaryStatistics()averageaverage()max()min()sum()ObjDoubleConsumer<>collectcollect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)ObjDoubleConsumer<R>BiConsumer<R,R>reduce(java.util.function.DoubleBinaryOperator)reduce(double,java.util.function.DoubleBinaryOperator)forEachOrderedforEachOrdered(java.util.function.DoubleConsumer)forEach(java.util.function.DoubleConsumer)dropWhiledropWhile(java.util.function.DoublePredicate)takeWhiletakeWhile(java.util.function.DoublePredicate)limit(long)peek(java.util.function.DoubleConsumer)sortedsorted()distinctdistinct()mapMultimapMulti(java.util.stream.DoubleStream.DoubleMapMultiConsumer)? extends DoubleStreamDoubleFunction<? extends DoubleStream>flatMap(java.util.function.DoubleFunction)mapToLongmapToLong(java.util.function.DoubleToLongFunction)mapToIntmapToInt(java.util.function.DoubleToIntFunction)DoubleFunction<>Stream<U>BaseStream<U,Stream<U>>mapToObjmapToObj(java.util.function.DoubleFunction)DoubleFunction<? extends U>map(java.util.function.DoubleUnaryOperator)filter(java.util.function.DoublePredicate)Downstream/modules/java.base/java/util/stream/Gatherer$Downstream.class/modules/java.base/java/util/stream/Gatherer.classisRejectingisRejecting()push(java.lang.Object)Greedy/modules/java.base/java/util/stream/Gatherer$Integrator$Greedy.classIntegrator<A,T,R>/modules/java.base/java/util/stream/Gatherer$Integrator.classGreedy<>Integrator<>Greedy<A,T,R>ofGreedyofGreedy(java.util.stream.Gatherer.Integrator.Greedy)of(java.util.stream.Gatherer.Integrator)Downstream<? super R>integrateintegrate(java.lang.Object,java.lang.Object,java.util.stream.Gatherer.Downstream)IntegratorGathererGatherer<>Gatherer<T,A,R>of(java.util.function.Supplier,java.util.stream.Gatherer.Integrator,java.util.function.BinaryOperator,java.util.function.BiConsumer)BiConsumer<A,Downstream<? super R>>Gatherer<T,Void,R>of(java.util.stream.Gatherer.Integrator,java.util.function.BiConsumer)Integrator<Void,T,R>BiConsumer<Void,Downstream<? super R>>ofSequentialofSequential(java.util.function.Supplier,java.util.stream.Gatherer.Integrator,java.util.function.BiConsumer)ofSequential(java.util.function.Supplier,java.util.stream.Gatherer.Integrator)ofSequential(java.util.stream.Gatherer.Integrator,java.util.function.BiConsumer)ofSequential(java.util.stream.Gatherer.Integrator)defaultFinisherdefaultFinisher()defaultCombinerdefaultCombiner()defaultInitializerdefaultInitializer()RRGatherer<T,?,RR>andThen(java.util.stream.Gatherer)? extends RRGatherer<? super R,?,? extends RR>integratorintegrator()initializerinitializer()/modules/java.base/java/util/stream/IntStream$Builder.classIntMapMultiConsumer/modules/java.base/java/util/stream/IntStream$IntMapMultiConsumer.class/modules/java.base/java/util/stream/IntStream.classaccept(int,java.util.function.IntConsumer)IntStreamBaseStream<Integer,IntStream>concat(java.util.stream.IntStream,java.util.stream.IntStream)rangeClosedrangeClosed(int,int)range(int,int)generate(java.util.function.IntSupplier)iterate(int,java.util.function.IntPredicate,java.util.function.IntUnaryOperator)iterate(int,java.util.function.IntUnaryOperator)of(int[])Stream<Integer>BaseStream<Integer,Stream<Integer>>asDoubleStreamasDoubleStream()asLongStreamasLongStream()noneMatch(java.util.function.IntPredicate)allMatch(java.util.function.IntPredicate)anyMatch(java.util.function.IntPredicate)ObjIntConsumer<>collect(java.util.function.Supplier,java.util.function.ObjIntConsumer,java.util.function.BiConsumer)ObjIntConsumer<R>reduce(java.util.function.IntBinaryOperator)reduce(int,java.util.function.IntBinaryOperator)forEachOrdered(java.util.function.IntConsumer)forEach(java.util.function.IntConsumer)dropWhile(java.util.function.IntPredicate)takeWhile(java.util.function.IntPredicate)peek(java.util.function.IntConsumer)mapMulti(java.util.stream.IntStream.IntMapMultiConsumer)? extends IntStreamIntFunction<? extends IntStream>flatMap(java.util.function.IntFunction)mapToDoublemapToDouble(java.util.function.IntToDoubleFunction)mapToLong(java.util.function.IntToLongFunction)mapToObj(java.util.function.IntFunction)IntFunction<? extends U>map(java.util.function.IntUnaryOperator)filter(java.util.function.IntPredicate)/modules/java.base/java/util/stream/LongStream$Builder.classLongMapMultiConsumer/modules/java.base/java/util/stream/LongStream$LongMapMultiConsumer.class/modules/java.base/java/util/stream/LongStream.classaccept(long,java.util.function.LongConsumer)LongStreamBaseStream<Long,LongStream>concat(java.util.stream.LongStream,java.util.stream.LongStream)rangeClosed(long,long)range(long,long)generate(java.util.function.LongSupplier)iterate(long,java.util.function.LongPredicate,java.util.function.LongUnaryOperator)iterate(long,java.util.function.LongUnaryOperator)of(long[])Stream<Long>BaseStream<Long,Stream<Long>>noneMatch(java.util.function.LongPredicate)allMatch(java.util.function.LongPredicate)anyMatch(java.util.function.LongPredicate)ObjLongConsumer<>collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)ObjLongConsumer<R>reduce(java.util.function.LongBinaryOperator)reduce(long,java.util.function.LongBinaryOperator)forEachOrdered(java.util.function.LongConsumer)forEach(java.util.function.LongConsumer)dropWhile(java.util.function.LongPredicate)takeWhile(java.util.function.LongPredicate)peek(java.util.function.LongConsumer)mapMulti(java.util.stream.LongStream.LongMapMultiConsumer)? extends LongStreamLongFunction<? extends LongStream>flatMap(java.util.function.LongFunction)mapToDouble(java.util.function.LongToDoubleFunction)mapToInt(java.util.function.LongToIntFunction)LongFunction<>mapToObj(java.util.function.LongFunction)LongFunction<? extends U>map(java.util.function.LongUnaryOperator)filter(java.util.function.LongPredicate)/modules/java.base/java/util/stream/Stream$Builder.classConsumer<T>Builder<>StreamBaseStream<T,Stream>concat(java.util.stream.Stream,java.util.stream.Stream)Stream<? extends T>BaseStream<? extends T,Stream<? extends T>>generate(java.util.function.Supplier)iterate(java.lang.Object,java.util.function.Predicate,java.util.function.UnaryOperator)iterate(java.lang.Object,java.util.function.UnaryOperator)Builder<T>noneMatch(java.util.function.Predicate)allMatch(java.util.function.Predicate)anyMatch(java.util.function.Predicate)max(java.util.Comparator)min(java.util.Comparator)List<T>SequencedCollection<T>toListtoList()collect(java.util.stream.Collector)Collector<? super T,A,R>collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)BiConsumer<R,? super T>Stream<R>BaseStream<R,Stream<R>>gathergather(java.util.stream.Gatherer)Gatherer<? super T,?,R>reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)BiFunction<U,? super T,U>BinaryOperator<U>BiFunction<U,U,U>reduce(java.util.function.BinaryOperator)reduce(java.lang.Object,java.util.function.BinaryOperator)IntFunction<A[]>forEachOrdered(java.util.function.Consumer)dropWhile(java.util.function.Predicate)takeWhile(java.util.function.Predicate)peek(java.util.function.Consumer)sorted(java.util.Comparator)? super DoubleConsumerBiConsumer<? super T,? super DoubleConsumer>mapMultiToDoublemapMultiToDouble(java.util.function.BiConsumer)? super LongConsumerBiConsumer<? super T,? super LongConsumer>mapMultiToLongmapMultiToLong(java.util.function.BiConsumer)? super IntConsumerBiConsumer<? super T,? super IntConsumer>mapMultiToIntmapMultiToInt(java.util.function.BiConsumer)mapMulti(java.util.function.BiConsumer)Consumer<R>? super Consumer<R>BiConsumer<? super T,? super Consumer<R>>Function<? super T,? extends DoubleStream>flatMapToDoubleflatMapToDouble(java.util.function.Function)Function<? super T,? extends LongStream>flatMapToLongflatMapToLong(java.util.function.Function)Function<? super T,? extends IntStream>flatMapToIntflatMapToInt(java.util.function.Function)Stream<? extends R>BaseStream<? extends R,Stream<? extends R>>? extends Stream<? extends R>Function<? super T,? extends Stream<? extends R>>mapToDouble(java.util.function.ToDoubleFunction)mapToLong(java.util.function.ToLongFunction)mapToInt(java.util.function.ToIntFunction)Function<? super T,? extends R>javax.security.authSubject/modules/java.base/javax/security/auth/Subject.class/modules/java.base/javax/security/auth/modules/java.base/javax/security/modules/java.base/javaxSet<T>getPrivateCredentialsgetPrivateCredentials(java.lang.Class)getPublicCredentialsgetPublicCredentials(java.lang.Class)getPrivateCredentials()getPublicCredentials()getPrincipals(java.lang.Class)Set<Principal>Collection<Principal>Iterable<Principal>PrivilegedExceptionAction<>doAsPrivilegeddoAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)PrivilegedExceptionAction<T>PrivilegedAction<>doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)PrivilegedAction<T>doAsdoAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)doAs(javax.security.auth.Subject,java.security.PrivilegedAction)callAscallAs(javax.security.auth.Subject,java.util.concurrent.Callable)getSubjectgetSubject(java.security.AccessControlContext)? extends PrincipalSet<? extends Principal>Collection<? extends Principal>Iterable<? extends Principal>Set<?>Subject(boolean,java.util.Set,java.util.Set,java.util.Set)Subject()privCredentialspubCredentialsprincipalsjavax.xml.transformResult/modules/java.xml/javax/xml/transform/Result.class/modules/java.xml/javax/xml/transform/modules/java.xml/javax/xml/modules/java.xml/javax/modules/java.xmlgetSystemIdgetSystemId()setSystemIdsetSystemId(java.lang.String)PI_ENABLE_OUTPUT_ESCAPINGPI_DISABLE_OUTPUT_ESCAPINGSource/modules/java.xml/javax/xml/transform/Source.classjdk.internalValueBased/modules/java.base/jdk/internal/ValueBased.classjdk.internal.accessJavaLangInvokeAccess/modules/java.base/jdk/internal/access/JavaLangInvokeAccess.class/modules/java.base/jdk/internal/accessexceptionTypesexceptionTypes(java.lang.invoke.MethodHandle)reflectiveInvokerreflectiveInvoker(java.lang.Class)unreflectFieldunreflectField(java.lang.reflect.Field,boolean)nativeMethodHandlenativeMethodHandle(jdk.internal.foreign.abi.NativeEntryPoint)memorySegmentViewHandlememorySegmentViewHandle(java.lang.Class,long,java.nio.ByteOrder)Map<String,byte[]>generateHolderClassesgenerateHolderClasses(java.util.stream.Stream)isHiddenMemberisHiddenMember(int)isCallerSensitive(int)getMethodType(java.lang.String,java.lang.ClassLoader)getDeclaringClass(java.lang.Object)JavaNioAccess/modules/java.base/jdk/internal/access/JavaNioAccess.classpageSizepageSize()unreserveMemoryunreserveMemory(long,long)reserveMemoryreserveMemory(long,long)isLoaded(long,boolean,long)unload(long,boolean,long)load(long,boolean,long)force(java.io.FileDescriptor,long,boolean,long,long)hasSessionhasSession(java.nio.Buffer)isThreadConfinedisThreadConfined(java.nio.Buffer)releaseSessionreleaseSession(java.nio.Buffer)acquireSessionacquireSession(java.nio.Buffer)bufferSegmentbufferSegment(java.nio.Buffer)unmapper(java.nio.Buffer)getBufferAddressgetBufferAddress(java.nio.Buffer)getBufferBasegetBufferBase(java.nio.Buffer)newHeapByteBuffernewHeapByteBuffer(byte[],int,int,java.lang.foreign.MemorySegment)newMappedByteBuffernewMappedByteBuffer(jdk.internal.access.foreign.UnmapperProxy,long,int,java.lang.Object,java.lang.foreign.MemorySegment)newDirectByteBuffernewDirectByteBuffer(long,int,java.lang.Object,java.lang.foreign.MemorySegment)getDirectBufferPoolgetDirectBufferPool()jdk.internal.access.foreignUnmapperProxy/modules/java.base/jdk/internal/access/foreign/UnmapperProxy.class/modules/java.base/jdk/internal/access/foreignunmapunmap()jdk.internal.constantDirectMethodHandleDescImpl/modules/java.base/jdk/internal/constant/DirectMethodHandleDescImpl.class/modules/java.base/jdk/internal/constantDirectMethodHandleDescImpl(java.lang.constant.DirectMethodHandleDesc.Kind,java.lang.constant.ClassDesc,java.lang.String,java.lang.constant.MethodTypeDesc)MethodTypeDescImpl/modules/java.base/jdk/internal/constant/MethodTypeDescImpl.classofValidatedofValidated(java.lang.constant.ClassDesc,java.lang.constant.ClassDesc[])ofTrustedofTrusted(java.lang.constant.ClassDesc,java.lang.constant.ClassDesc[])PrimitiveClassDescImpl/modules/java.base/jdk/internal/constant/PrimitiveClassDescImpl.classDynamicConstantDesc<Class<?>>DynamicConstantDesc<Class<?>>(java.lang.constant.DirectMethodHandleDesc,java.lang.String,java.lang.constant.ClassDesc,java.lang.constant.ConstantDesc[])PrimitiveClassDescImpl(java.lang.String)ReferenceClassDescImpl/modules/java.base/jdk/internal/constant/ReferenceClassDescImpl.classofValidatedBinaryNameofValidatedBinaryName(java.lang.String)ofValidated(java.lang.String)jdk.internal.foreignAbstractMemorySegmentImpl/modules/java.base/jdk/internal/foreign/AbstractMemorySegmentImpl.class/modules/java.base/jdk/internal/foreignList<Number>SequencedCollection<Number>Collection<Number>Iterable<Number>BiFunction<String,List<Number>,RuntimeException>BiFunction<String,List<Number>,V>? super RuntimeExceptionFunction<? super RuntimeException,? extends V>apply(java.lang.String,java.util.List)sessionImplsessionImpl()checkBoundscheckBounds(long,long)isAlignedForElementisAlignedForElement(long,long)isAlignedForElement(long,java.lang.foreign.MemoryLayout)maxAlignMaskmaxAlignMask()unsafeGetBaseunsafeGetBase()unsafeGetOffsetunsafeGetOffset()checkValidStatecheckValidState()checkAccess(long,long,boolean)checkReadOnly(boolean)vectorizedMismatchLargeForBytesvectorizedMismatchLargeForBytes(jdk.internal.foreign.MemorySessionImpl,jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,java.lang.Object,long,long)reinterpretInternalreinterpretInternal(java.lang.Class,long,java.lang.foreign.MemorySegment.Scope,java.util.function.Consumer)makeByteBuffermakeByteBuffer()dupdup(long,long,boolean,jdk.internal.foreign.MemorySessionImpl)AbstractMemorySegmentImpl(long,boolean,jdk.internal.foreign.MemorySessionImpl)readOnlyConfinedSession/modules/java.base/jdk/internal/foreign/ConfinedSession.classjustClosejustClose()release0release0()acquire0acquire0()ConfinedSession(java.lang.Thread)ASYNC_RELEASE_COUNTGlobalSession/modules/java.base/jdk/internal/foreign/GlobalSession.classaddInternaladdInternal(jdk.internal.foreign.MemorySessionImpl.ResourceList.ResourceCleanup)isCloseableisCloseable()GlobalSession()/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl$OfByte.classOfByte(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl$OfChar.classOfChar(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl$OfDouble.classOfDouble(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl$OfFloat.classOfFloat(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl$OfInt.classOfInt(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl$OfLong.classOfLong(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl$OfShort.classOfShort(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)HeapMemorySegmentImpl/modules/java.base/jdk/internal/foreign/HeapMemorySegmentImpl.classHeapMemorySegmentImpl(long,java.lang.Object,long,boolean,jdk.internal.foreign.MemorySessionImpl)ImplicitSession/modules/java.base/jdk/internal/foreign/ImplicitSession.classImplicitSession(java.lang.ref.Cleaner)DereferenceElement/modules/java.base/jdk/internal/foreign/LayoutPath$DereferenceElement.classUnaryOperator<LayoutPath>Function<LayoutPath,LayoutPath>Function<LayoutPath,V>? super LayoutPathFunction<? super LayoutPath,? extends V>Function<V,LayoutPath>? extends LayoutPathFunction<? super V,? extends LayoutPath>apply(jdk.internal.foreign.LayoutPath)instanceinstance()DereferenceElement()GroupElementByIndex/modules/java.base/jdk/internal/foreign/LayoutPath$GroupElementByIndex.classGroupElementByIndex(long)GroupElementByName/modules/java.base/jdk/internal/foreign/LayoutPath$GroupElementByName.classGroupElementByName(java.lang.String)SequenceElement/modules/java.base/jdk/internal/foreign/LayoutPath$SequenceElement.classSequenceElement()SequenceElementByIndex/modules/java.base/jdk/internal/foreign/LayoutPath$SequenceElementByIndex.classSequenceElementByIndex(long)SequenceElementByRange/modules/java.base/jdk/internal/foreign/LayoutPath$SequenceElementByRange.classstepstep()SequenceElementByRange(long,long)LayoutPath/modules/java.base/jdk/internal/foreign/LayoutPath.classrootPathrootPath(java.lang.foreign.MemoryLayout)layoutlayout()sliceHandle()offsetHandleoffsetHandle()dereferenceHandledereferenceHandle(boolean)dereferenceHandle()offset()derefElementderefElement()MappedMemorySegmentImpl/modules/java.base/jdk/internal/foreign/MappedMemorySegmentImpl.classMappedMemorySegmentImpl(long,jdk.internal.access.foreign.UnmapperProxy,long,boolean,jdk.internal.foreign.MemorySessionImpl)ResourceCleanup/modules/java.base/jdk/internal/foreign/MemorySessionImpl$ResourceList$ResourceCleanup.classofRunnableofRunnable(java.lang.Runnable)cleanupcleanup()ResourceCleanup()CLOSED_LISTResourceList/modules/java.base/jdk/internal/foreign/MemorySessionImpl$ResourceList.classcleanup(jdk.internal.foreign.MemorySessionImpl.ResourceList.ResourceCleanup)add(jdk.internal.foreign.MemorySessionImpl.ResourceList.ResourceCleanup)ResourceList()fstMemorySessionImpl/modules/java.base/jdk/internal/foreign/MemorySessionImpl.classnonCloseablenonCloseable()wrongThreadwrongThread()alreadyClosedalreadyClosed()alreadyAcquiredalreadyAcquired(int)tooManyAcquirestooManyAcquires()checkValidState(java.lang.foreign.MemorySegment)checkValidStateRawcheckValidStateRaw()ownerThreadownerThread()whileAlivewhileAlive(java.lang.Runnable)createHeapcreateHeap(java.lang.Object)createImplicitcreateImplicit(java.lang.ref.Cleaner)createSharedcreateShared()createConfinedcreateConfined(java.lang.Thread)MemorySessionImpl(java.lang.Thread,jdk.internal.foreign.MemorySessionImpl.ResourceList)addOrCleanupIfFailaddOrCleanupIfFail(jdk.internal.foreign.MemorySessionImpl.ResourceList.ResourceCleanup)addCloseActionaddCloseAction(java.lang.Runnable)isCloseableByisCloseableBy(java.lang.Thread)toMemorySessiontoMemorySession(java.lang.foreign.Arena)asArenaasArena()resourceListGLOBAL_SESSIONWRONG_THREADALREADY_CLOSEDMAX_FORKSSTATECLOSEDNativeMemorySegmentImpl/modules/java.base/jdk/internal/foreign/NativeMemorySegmentImpl.classNativeMemorySegmentImpl(long,long,boolean,jdk.internal.foreign.MemorySessionImpl)SharedSession/modules/java.base/jdk/internal/foreign/SharedSession.classSharedSession()jdk.internal.foreign.abiABIDescriptor/modules/java.base/jdk/internal/foreign/abi/ABIDescriptor.class/modules/java.base/jdk/internal/foreign/abicapturedStateStoragecapturedStateStorage()retBufAddrStorageretBufAddrStorage()targetAddrStoragetargetAddrStorage()VMStorage[]VMStorage[][]ABIDescriptor(jdk.internal.foreign.abi.Architecture,jdk.internal.foreign.abi.VMStorage[][],jdk.internal.foreign.abi.VMStorage[][],jdk.internal.foreign.abi.VMStorage[][],int,int,jdk.internal.foreign.abi.VMStorage,jdk.internal.foreign.abi.VMStorage,jdk.internal.foreign.abi.VMStorage,jdk.internal.foreign.abi.VMStorage,jdk.internal.foreign.abi.VMStorage)scratch2scratch1shadowSpacestackAlignmentvolatileStorageoutputStorageinputStoragearchArchitecture/modules/java.base/jdk/internal/foreign/abi/Architecture.classtypeSizetypeSize(int)isStackTypeisStackType(int)NativeEntryPoint/modules/java.base/jdk/internal/foreign/abi/NativeEntryPoint.classmake(jdk.internal.foreign.abi.ABIDescriptor,jdk.internal.foreign.abi.VMStorage[],jdk.internal.foreign.abi.VMStorage[],java.lang.invoke.MethodType,boolean,int,boolean)VMStorage/modules/java.base/jdk/internal/foreign/abi/VMStorage.classdebugNamedebugName()indexOrOffsetindexOrOffset()segmentMaskOrSizesegmentMaskOrSize()VMStorage(byte,short,int,java.lang.String)VMStorage(byte,short,int)jdk.internal.foreign.layout/modules/java.base/jdk/internal/foreign/layout/AbstractGroupLayout$Kind.class/modules/java.base/jdk/internal/foreign/layoutcompareTo(jdk.internal.foreign.layout.AbstractGroupLayout.Kind)delimTagUNIONSTRUCTAbstractGroupLayout/modules/java.base/jdk/internal/foreign/layout/AbstractGroupLayout.classAbstractLayout<L>/modules/java.base/jdk/internal/foreign/layout/AbstractLayout.classvarHandleInternalvarHandleInternal(java.lang.foreign.MemoryLayout.PathElement[])decorateLayoutStringdecorateLayoutString(java.lang.String)AbstractLayout<>dup(long,java.util.Optional)AbstractGroupLayout<>hasNaturalAlignmenthasNaturalAlignment()AbstractLayoutAbstractLayout(long,long,java.util.Optional)AbstractLayout<L>(long,long,java.util.Optional)LAbstractGroupLayout(jdk.internal.foreign.layout.AbstractGroupLayout.Kind,java.util.List,long,long,long,java.util.Optional)minByteAlignmentPaddingLayoutImpl/modules/java.base/jdk/internal/foreign/layout/PaddingLayoutImpl.classAbstractLayout<PaddingLayoutImpl>AbstractLayout<PaddingLayoutImpl>(long,long,java.util.Optional)SequenceLayoutImpl/modules/java.base/jdk/internal/foreign/layout/SequenceLayoutImpl.classAbstractLayout<SequenceLayoutImpl>AbstractLayout<SequenceLayoutImpl>(long,long,java.util.Optional)of(long,java.lang.foreign.MemoryLayout)StructLayoutImpl/modules/java.base/jdk/internal/foreign/layout/StructLayoutImpl.classAbstractGroupLayout<StructLayoutImpl>AbstractLayout<StructLayoutImpl>AbstractLayout<StructLayoutImpl>(long,long,java.util.Optional)AbstractGroupLayout<StructLayoutImpl>(jdk.internal.foreign.layout.AbstractGroupLayout.Kind,java.util.List,long,long,long,java.util.Optional)of(java.util.List)UnionLayoutImpl/modules/java.base/jdk/internal/foreign/layout/UnionLayoutImpl.classAbstractGroupLayout<UnionLayoutImpl>AbstractLayout<UnionLayoutImpl>AbstractLayout<UnionLayoutImpl>(long,long,java.util.Optional)AbstractGroupLayout<UnionLayoutImpl>(jdk.internal.foreign.layout.AbstractGroupLayout.Kind,java.util.List,long,long,long,java.util.Optional)AbstractValueLayout/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout.classAbstractLayout<V>AbstractValueLayout<>AbstractLayout<V>(long,long,java.util.Optional)selfself()/modules/java.base/jdk/internal/foreign/layout/ValueLayouts.classisValidCarrierisValidCarrier(java.lang.Class)assertCarrierSizeassertCarrierSize(java.lang.Class,long)dup(java.nio.ByteOrder,long,java.util.Optional)AbstractValueLayout(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)ADDRESS_SIZE_BYTESOfAddressImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfAddressImpl.classAbstractValueLayout<OfAddressImpl>AbstractLayout<OfAddressImpl>AbstractLayout<OfAddressImpl>(long,long,java.util.Optional)AbstractValueLayout<OfAddressImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)of(java.nio.ByteOrder)OfBooleanImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfBooleanImpl.classAbstractValueLayout<OfBooleanImpl>AbstractLayout<OfBooleanImpl>AbstractLayout<OfBooleanImpl>(long,long,java.util.Optional)AbstractValueLayout<OfBooleanImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)OfByteImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfByteImpl.classAbstractValueLayout<OfByteImpl>AbstractLayout<OfByteImpl>AbstractLayout<OfByteImpl>(long,long,java.util.Optional)AbstractValueLayout<OfByteImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)OfCharImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfCharImpl.classAbstractValueLayout<OfCharImpl>AbstractLayout<OfCharImpl>AbstractLayout<OfCharImpl>(long,long,java.util.Optional)AbstractValueLayout<OfCharImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)OfDoubleImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfDoubleImpl.classAbstractValueLayout<OfDoubleImpl>AbstractLayout<OfDoubleImpl>AbstractLayout<OfDoubleImpl>(long,long,java.util.Optional)AbstractValueLayout<OfDoubleImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)OfFloatImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfFloatImpl.classAbstractValueLayout<OfFloatImpl>AbstractLayout<OfFloatImpl>AbstractLayout<OfFloatImpl>(long,long,java.util.Optional)AbstractValueLayout<OfFloatImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)OfIntImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfIntImpl.classAbstractValueLayout<OfIntImpl>AbstractLayout<OfIntImpl>AbstractLayout<OfIntImpl>(long,long,java.util.Optional)AbstractValueLayout<OfIntImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)OfLongImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfLongImpl.classAbstractValueLayout<OfLongImpl>AbstractLayout<OfLongImpl>AbstractLayout<OfLongImpl>(long,long,java.util.Optional)AbstractValueLayout<OfLongImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)OfShortImpl/modules/java.base/jdk/internal/foreign/layout/ValueLayouts$OfShortImpl.classAbstractValueLayout<OfShortImpl>AbstractLayout<OfShortImpl>AbstractLayout<OfShortImpl>(long,long,java.util.Optional)AbstractValueLayout<OfShortImpl>(java.lang.Class,java.nio.ByteOrder,long,long,java.util.Optional)ValueLayoutsvalueLayoutvalueLayout(java.lang.Class,java.nio.ByteOrder)jdk.internal.ioJdkConsole/modules/java.base/jdk/internal/io/JdkConsole.class/modules/java.base/jdk/internal/iojdk.internal.javacFeature/modules/java.base/jdk/internal/javac/PreviewFeature$Feature.class/modules/java.base/jdk/internal/javacEnum<Feature>Comparable<Feature>compareTo(jdk.internal.javac.PreviewFeature.Feature)EnumDesc<Feature>DynamicConstantDesc<Feature>Optional<EnumDesc<Feature>>Class<Feature>Enum<Feature>(java.lang.String,int)Feature[]TEST/modules/java.base/jdk/internal/javac/PreviewFeature.class2147483647"Test Feature"Test Feature"Preview"PreviewLANGUAGE_MODELMODULE_IMPORTS476"Module Import Declarations"Module Import DeclarationsSTREAM_GATHERERS473"Stream Gatherers"Stream Gatherers"Second Preview"Second PreviewCLASSFILE_API466"ClassFile API"ClassFile APISTRUCTURED_CONCURRENCY480"Structured Concurrency"Structured Concurrency"Third Preview"Third PreviewSCOPED_VALUES481"Scoped Values"Scoped ValuesIMPLICIT_CLASSES477"Implicitly Declared Classes and Instance Main Methods"Implicitly Declared Classes and Instance Main MethodsSTRING_TEMPLATES459"String Templates"String TemplatesFOREIGNVIRTUAL_THREADSJEP/modules/java.base/jdk/internal/javac/PreviewFeature$JEP.classstatus()titletitle()number()PreviewFeaturereflectivereflective()Restricted/modules/java.base/jdk/internal/javac/Restricted.classjdk.internal.loaderNativeLibrary/modules/java.base/jdk/internal/loader/NativeLibrary.class/modules/java.base/jdk/internal/loaderfindEntry0findEntry0(long,java.lang.String)lookup(java.lang.String)NativeLibrary()jdk.internal.miscScoped/modules/java.base/jdk/internal/misc/ScopedMemoryAccess$Scoped.class/modules/java.base/jdk/internal/misc/modules/java.base/jdk/internal/misc/ScopedMemoryAccess.classScopedAccessError/modules/java.base/jdk/internal/misc/ScopedMemoryAccess$ScopedAccessError.classnewRuntimeExceptionnewRuntimeException()Supplier<RuntimeException>ScopedAccessError(java.util.function.Supplier)ScopedMemoryAccessgetAndAddDoubleReleasegetAndAddDoubleRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getAndAddDoubleAcquiregetAndAddDoubleAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getAndAddDoublegetAndAddDouble(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getAndSetDoubleReleasegetAndSetDoubleRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getAndSetDoubleAcquiregetAndSetDoubleAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getAndSetDoublegetAndSetDouble(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)weakCompareAndSetDoubleReleaseweakCompareAndSetDoubleRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)weakCompareAndSetDoubleAcquireweakCompareAndSetDoubleAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)weakCompareAndSetDoubleweakCompareAndSetDouble(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)weakCompareAndSetDoublePlainweakCompareAndSetDoublePlain(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)compareAndExchangeDoubleReleasecompareAndExchangeDoubleRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)compareAndExchangeDoubleAcquirecompareAndExchangeDoubleAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)compareAndExchangeDoublecompareAndExchangeDouble(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)compareAndSetDoublecompareAndSetDouble(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double,double)putDoubleOpaqueputDoubleOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getDoubleOpaquegetDoubleOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putDoubleReleaseputDoubleRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getDoubleAcquiregetDoubleAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putDoubleVolatileputDoubleVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getDoubleVolatilegetDoubleVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putDouble(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,double)getDouble(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)getAndAddFloatReleasegetAndAddFloatRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getAndAddFloatAcquiregetAndAddFloatAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getAndAddFloatgetAndAddFloat(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getAndSetFloatReleasegetAndSetFloatRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getAndSetFloatAcquiregetAndSetFloatAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getAndSetFloatgetAndSetFloat(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)weakCompareAndSetFloatReleaseweakCompareAndSetFloatRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)weakCompareAndSetFloatAcquireweakCompareAndSetFloatAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)weakCompareAndSetFloatweakCompareAndSetFloat(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)weakCompareAndSetFloatPlainweakCompareAndSetFloatPlain(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)compareAndExchangeFloatReleasecompareAndExchangeFloatRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)compareAndExchangeFloatAcquirecompareAndExchangeFloatAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)compareAndExchangeFloatcompareAndExchangeFloat(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)compareAndSetFloatcompareAndSetFloat(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float,float)putFloatOpaqueputFloatOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getFloatOpaquegetFloatOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putFloatReleaseputFloatRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getFloatAcquiregetFloatAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putFloatVolatileputFloatVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getFloatVolatilegetFloatVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putFloat(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,float)getFloat(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)getAndBitwiseXorLongReleasegetAndBitwiseXorLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseXorLongAcquiregetAndBitwiseXorLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseXorLonggetAndBitwiseXorLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseAndLongReleasegetAndBitwiseAndLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseAndLongAcquiregetAndBitwiseAndLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseAndLonggetAndBitwiseAndLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseOrLongReleasegetAndBitwiseOrLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseOrLongAcquiregetAndBitwiseOrLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndBitwiseOrLonggetAndBitwiseOrLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndAddLongReleasegetAndAddLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndAddLongAcquiregetAndAddLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndAddLonggetAndAddLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndSetLongReleasegetAndSetLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndSetLongAcquiregetAndSetLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getAndSetLonggetAndSetLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)weakCompareAndSetLongReleaseweakCompareAndSetLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)weakCompareAndSetLongAcquireweakCompareAndSetLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)weakCompareAndSetLongweakCompareAndSetLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)weakCompareAndSetLongPlainweakCompareAndSetLongPlain(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)compareAndExchangeLongReleasecompareAndExchangeLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)compareAndExchangeLongAcquirecompareAndExchangeLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)compareAndExchangeLongcompareAndExchangeLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)compareAndSetLongcompareAndSetLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,long)putLongOpaqueputLongOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getLongOpaquegetLongOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putLongReleaseputLongRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getLongAcquiregetLongAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putLongVolatileputLongVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getLongVolatilegetLongVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putLongUnalignedputLongUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,boolean)getLongUnalignedgetLongUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,boolean)putLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long)getLong(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)getAndBitwiseXorIntReleasegetAndBitwiseXorIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseXorIntAcquiregetAndBitwiseXorIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseXorIntgetAndBitwiseXorInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseAndIntReleasegetAndBitwiseAndIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseAndIntAcquiregetAndBitwiseAndIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseAndIntgetAndBitwiseAndInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseOrIntReleasegetAndBitwiseOrIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseOrIntAcquiregetAndBitwiseOrIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndBitwiseOrIntgetAndBitwiseOrInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndAddIntReleasegetAndAddIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndAddIntAcquiregetAndAddIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndAddIntgetAndAddInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndSetIntReleasegetAndSetIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndSetIntAcquiregetAndSetIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getAndSetIntgetAndSetInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)weakCompareAndSetIntReleaseweakCompareAndSetIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)weakCompareAndSetIntAcquireweakCompareAndSetIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)weakCompareAndSetIntweakCompareAndSetInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)weakCompareAndSetIntPlainweakCompareAndSetIntPlain(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)compareAndExchangeIntReleasecompareAndExchangeIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)compareAndExchangeIntAcquirecompareAndExchangeIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)compareAndExchangeIntcompareAndExchangeInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)compareAndSetIntcompareAndSetInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,int)putIntOpaqueputIntOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getIntOpaquegetIntOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putIntReleaseputIntRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getIntAcquiregetIntAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putIntVolatileputIntVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getIntVolatilegetIntVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putIntUnalignedputIntUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int,boolean)getIntUnalignedgetIntUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,boolean)putInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,int)getInt(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)getAndBitwiseXorCharReleasegetAndBitwiseXorCharRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseXorCharAcquiregetAndBitwiseXorCharAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseXorChargetAndBitwiseXorChar(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseAndCharReleasegetAndBitwiseAndCharRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseAndCharAcquiregetAndBitwiseAndCharAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseAndChargetAndBitwiseAndChar(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseOrCharReleasegetAndBitwiseOrCharRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseOrCharAcquiregetAndBitwiseOrCharAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndBitwiseOrChargetAndBitwiseOrChar(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndAddCharReleasegetAndAddCharRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndAddCharAcquiregetAndAddCharAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getAndAddChargetAndAddChar(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)putCharOpaqueputCharOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getCharOpaquegetCharOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putCharReleaseputCharRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getCharAcquiregetCharAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putCharVolatileputCharVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getCharVolatilegetCharVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putCharUnalignedputCharUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char,boolean)getCharUnalignedgetCharUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,boolean)putChar(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,char)getChar(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)getAndBitwiseXorShortReleasegetAndBitwiseXorShortRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseXorShortAcquiregetAndBitwiseXorShortAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseXorShortgetAndBitwiseXorShort(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseAndShortReleasegetAndBitwiseAndShortRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseAndShortAcquiregetAndBitwiseAndShortAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseAndShortgetAndBitwiseAndShort(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseOrShortReleasegetAndBitwiseOrShortRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseOrShortAcquiregetAndBitwiseOrShortAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndBitwiseOrShortgetAndBitwiseOrShort(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndAddShortReleasegetAndAddShortRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndAddShortAcquiregetAndAddShortAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getAndAddShortgetAndAddShort(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)putShortOpaqueputShortOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getShortOpaquegetShortOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putShortReleaseputShortRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getShortAcquiregetShortAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putShortVolatileputShortVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getShortVolatilegetShortVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putShortUnalignedputShortUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short,boolean)getShortUnalignedgetShortUnaligned(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,boolean)putShort(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,short)getShort(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)getAndBitwiseXorByteReleasegetAndBitwiseXorByteRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseXorByteAcquiregetAndBitwiseXorByteAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseXorBytegetAndBitwiseXorByte(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseAndByteReleasegetAndBitwiseAndByteRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseAndByteAcquiregetAndBitwiseAndByteAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseAndBytegetAndBitwiseAndByte(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseOrByteReleasegetAndBitwiseOrByteRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseOrByteAcquiregetAndBitwiseOrByteAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndBitwiseOrBytegetAndBitwiseOrByte(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndAddByteReleasegetAndAddByteRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndAddByteAcquiregetAndAddByteAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getAndAddBytegetAndAddByte(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)putByteOpaqueputByteOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getByteOpaquegetByteOpaque(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putByteReleaseputByteRelease(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getByteAcquiregetByteAcquire(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putByteVolatileputByteVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getByteVolatilegetByteVolatile(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)putByteputByte(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,byte)getByte(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long)jdk.internal.vm.vectorVector<>/modules/java.base/jdk/internal/vm/vector/VectorSupport$Vector.class/modules/java.base/jdk/internal/vm/vector/modules/java.base/jdk/internal/vmVectorMask<>/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorMask.classStoreVectorMaskedOperation<>/modules/java.base/jdk/internal/vm/vector/VectorSupport$StoreVectorMaskedOperation.classVector<E>VectorMask<E>storeIntoMemorySegmentMaskedstoreIntoMemorySegmentMasked(java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.foreign.AbstractMemorySegmentImpl,long,jdk.internal.vm.vector.VectorSupport.StoreVectorMaskedOperation)Class<? extends V>Class<M>StoreVectorMaskedOperation<AbstractMemorySegmentImpl,V,M>StoreVectorOperation<>/modules/java.base/jdk/internal/vm/vector/VectorSupport$StoreVectorOperation.classstoreIntoMemorySegmentstoreIntoMemorySegment(java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.foreign.AbstractMemorySegmentImpl,long,jdk.internal.vm.vector.VectorSupport.StoreVectorOperation)StoreVectorOperation<AbstractMemorySegmentImpl,V>VectorSpecies<>/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorSpecies.classLoadVectorMaskedOperation<>/modules/java.base/jdk/internal/vm/vector/VectorSupport$LoadVectorMaskedOperation.classVectorSpecies<E>loadFromMemorySegmentMaskedloadFromMemorySegmentMasked(java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.foreign.AbstractMemorySegmentImpl,long,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.VectorSpecies,int,jdk.internal.vm.vector.VectorSupport.LoadVectorMaskedOperation)LoadVectorMaskedOperation<AbstractMemorySegmentImpl,V,S,M>LoadOperation<>/modules/java.base/jdk/internal/vm/vector/VectorSupport$LoadOperation.classloadFromMemorySegmentloadFromMemorySegment(java.lang.Class,java.lang.Class,int,jdk.internal.foreign.AbstractMemorySegmentImpl,long,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.LoadOperation)LoadOperation<AbstractMemorySegmentImpl,V,S>forceInternalforceInternal(jdk.internal.foreign.MemorySessionImpl,java.io.FileDescriptor,long,boolean,long,long)force(jdk.internal.foreign.MemorySessionImpl,java.io.FileDescriptor,long,boolean,long,long)unloadInternalunloadInternal(jdk.internal.foreign.MemorySessionImpl,long,boolean,long)unload(jdk.internal.foreign.MemorySessionImpl,long,boolean,long)loadInternalloadInternal(jdk.internal.foreign.MemorySessionImpl,long,boolean,long)load(jdk.internal.foreign.MemorySessionImpl,long,boolean,long)isLoadedInternalisLoadedInternal(jdk.internal.foreign.MemorySessionImpl,long,boolean,long)isLoaded(jdk.internal.foreign.MemorySessionImpl,long,boolean,long)vectorizedMismatchvectorizedMismatch(jdk.internal.foreign.MemorySessionImpl,jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,java.lang.Object,long,int,int)setMemorysetMemory(jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,long,byte)copySwapMemorycopySwapMemory(jdk.internal.foreign.MemorySessionImpl,jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,java.lang.Object,long,long,long)copyMemorycopyMemory(jdk.internal.foreign.MemorySessionImpl,jdk.internal.foreign.MemorySessionImpl,java.lang.Object,long,java.lang.Object,long,long)getScopedMemoryAccessgetScopedMemoryAccess()closeScope0closeScope0(jdk.internal.foreign.MemorySessionImpl,jdk.internal.misc.ScopedMemoryAccess.ScopedAccessError)closeScopecloseScope(jdk.internal.foreign.MemorySessionImpl,jdk.internal.misc.ScopedMemoryAccess.ScopedAccessError)Unsafe/modules/java.base/jdk/internal/misc/Unsafe.classinvokeCleanerinvokeCleaner(java.nio.ByteBuffer)putCharUnaligned(java.lang.Object,long,char,boolean)putCharUnaligned(java.lang.Object,long,char)putShortUnaligned(java.lang.Object,long,short,boolean)putShortUnaligned(java.lang.Object,long,short)putIntUnaligned(java.lang.Object,long,int,boolean)putIntUnaligned(java.lang.Object,long,int)putLongUnaligned(java.lang.Object,long,long,boolean)putLongUnaligned(java.lang.Object,long,long)getCharUnaligned(java.lang.Object,long,boolean)getCharUnaligned(java.lang.Object,long)getShortUnaligned(java.lang.Object,long,boolean)getShortUnaligned(java.lang.Object,long)getIntUnaligned(java.lang.Object,long,boolean)getIntUnaligned(java.lang.Object,long)getLongUnaligned(java.lang.Object,long,boolean)getLongUnaligned(java.lang.Object,long)unalignedAccessunalignedAccess()isBigEndianisBigEndian()storeFencestoreFence()loadFenceloadFence()getAndBitwiseXorLongAcquire(java.lang.Object,long,long)getAndBitwiseXorLongRelease(java.lang.Object,long,long)getAndBitwiseXorLong(java.lang.Object,long,long)getAndBitwiseAndLongAcquire(java.lang.Object,long,long)getAndBitwiseAndLongRelease(java.lang.Object,long,long)getAndBitwiseAndLong(java.lang.Object,long,long)getAndBitwiseOrLongAcquire(java.lang.Object,long,long)getAndBitwiseOrLongRelease(java.lang.Object,long,long)getAndBitwiseOrLong(java.lang.Object,long,long)getAndBitwiseXorIntAcquire(java.lang.Object,long,int)getAndBitwiseXorIntRelease(java.lang.Object,long,int)getAndBitwiseXorInt(java.lang.Object,long,int)getAndBitwiseAndIntAcquire(java.lang.Object,long,int)getAndBitwiseAndIntRelease(java.lang.Object,long,int)getAndBitwiseAndInt(java.lang.Object,long,int)getAndBitwiseOrIntAcquire(java.lang.Object,long,int)getAndBitwiseOrIntRelease(java.lang.Object,long,int)getAndBitwiseOrInt(java.lang.Object,long,int)getAndBitwiseXorShortAcquire(java.lang.Object,long,short)getAndBitwiseXorShortRelease(java.lang.Object,long,short)getAndBitwiseXorShort(java.lang.Object,long,short)getAndBitwiseAndShortAcquire(java.lang.Object,long,short)getAndBitwiseAndShortRelease(java.lang.Object,long,short)getAndBitwiseAndShort(java.lang.Object,long,short)getAndBitwiseOrShortAcquire(java.lang.Object,long,short)getAndBitwiseOrShortRelease(java.lang.Object,long,short)getAndBitwiseOrShort(java.lang.Object,long,short)getAndBitwiseXorCharAcquire(java.lang.Object,long,char)getAndBitwiseXorCharRelease(java.lang.Object,long,char)getAndBitwiseXorChar(java.lang.Object,long,char)getAndBitwiseAndCharAcquire(java.lang.Object,long,char)getAndBitwiseAndCharRelease(java.lang.Object,long,char)getAndBitwiseAndChar(java.lang.Object,long,char)getAndBitwiseOrCharAcquire(java.lang.Object,long,char)getAndBitwiseOrCharRelease(java.lang.Object,long,char)getAndBitwiseOrChar(java.lang.Object,long,char)getAndBitwiseXorByteAcquire(java.lang.Object,long,byte)getAndBitwiseXorByteRelease(java.lang.Object,long,byte)getAndBitwiseXorByte(java.lang.Object,long,byte)getAndBitwiseAndByteAcquire(java.lang.Object,long,byte)getAndBitwiseAndByteRelease(java.lang.Object,long,byte)getAndBitwiseAndByte(java.lang.Object,long,byte)getAndBitwiseOrByteAcquire(java.lang.Object,long,byte)getAndBitwiseOrByteRelease(java.lang.Object,long,byte)getAndBitwiseOrByte(java.lang.Object,long,byte)getAndBitwiseXorBooleanAcquiregetAndBitwiseXorBooleanAcquire(java.lang.Object,long,boolean)getAndBitwiseXorBooleanReleasegetAndBitwiseXorBooleanRelease(java.lang.Object,long,boolean)getAndBitwiseXorBooleangetAndBitwiseXorBoolean(java.lang.Object,long,boolean)getAndBitwiseAndBooleanAcquiregetAndBitwiseAndBooleanAcquire(java.lang.Object,long,boolean)getAndBitwiseAndBooleanReleasegetAndBitwiseAndBooleanRelease(java.lang.Object,long,boolean)getAndBitwiseAndBooleangetAndBitwiseAndBoolean(java.lang.Object,long,boolean)getAndBitwiseOrBooleanAcquiregetAndBitwiseOrBooleanAcquire(java.lang.Object,long,boolean)getAndBitwiseOrBooleanReleasegetAndBitwiseOrBooleanRelease(java.lang.Object,long,boolean)getAndBitwiseOrBooleangetAndBitwiseOrBoolean(java.lang.Object,long,boolean)getAndSetDoubleAcquire(java.lang.Object,long,double)getAndSetDoubleRelease(java.lang.Object,long,double)getAndSetDouble(java.lang.Object,long,double)getAndSetFloatAcquire(java.lang.Object,long,float)getAndSetFloatRelease(java.lang.Object,long,float)getAndSetFloat(java.lang.Object,long,float)getAndSetCharAcquiregetAndSetCharAcquire(java.lang.Object,long,char)getAndSetCharReleasegetAndSetCharRelease(java.lang.Object,long,char)getAndSetChargetAndSetChar(java.lang.Object,long,char)getAndSetShortAcquiregetAndSetShortAcquire(java.lang.Object,long,short)getAndSetShortReleasegetAndSetShortRelease(java.lang.Object,long,short)getAndSetShortgetAndSetShort(java.lang.Object,long,short)getAndSetBooleanAcquiregetAndSetBooleanAcquire(java.lang.Object,long,boolean)getAndSetBooleanReleasegetAndSetBooleanRelease(java.lang.Object,long,boolean)getAndSetBooleangetAndSetBoolean(java.lang.Object,long,boolean)getAndSetByteAcquiregetAndSetByteAcquire(java.lang.Object,long,byte)getAndSetByteReleasegetAndSetByteRelease(java.lang.Object,long,byte)getAndSetBytegetAndSetByte(java.lang.Object,long,byte)getAndSetReferenceAcquiregetAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object)getAndSetReferenceReleasegetAndSetReferenceRelease(java.lang.Object,long,java.lang.Object)getAndSetReferencegetAndSetReference(java.lang.Object,long,java.lang.Object)getAndSetLongAcquire(java.lang.Object,long,long)getAndSetLongRelease(java.lang.Object,long,long)getAndSetLong(java.lang.Object,long,long)getAndSetIntAcquire(java.lang.Object,long,int)getAndSetIntRelease(java.lang.Object,long,int)getAndSetInt(java.lang.Object,long,int)getAndAddDoubleAcquire(java.lang.Object,long,double)getAndAddDoubleRelease(java.lang.Object,long,double)getAndAddDouble(java.lang.Object,long,double)getAndAddFloatAcquire(java.lang.Object,long,float)getAndAddFloatRelease(java.lang.Object,long,float)getAndAddFloat(java.lang.Object,long,float)getAndAddCharAcquire(java.lang.Object,long,char)getAndAddCharRelease(java.lang.Object,long,char)getAndAddChar(java.lang.Object,long,char)getAndAddShortAcquire(java.lang.Object,long,short)getAndAddShortRelease(java.lang.Object,long,short)getAndAddShort(java.lang.Object,long,short)getAndAddByteAcquire(java.lang.Object,long,byte)getAndAddByteRelease(java.lang.Object,long,byte)getAndAddByte(java.lang.Object,long,byte)getAndAddLongAcquire(java.lang.Object,long,long)getAndAddLongRelease(java.lang.Object,long,long)getAndAddLong(java.lang.Object,long,long)getAndAddIntAcquire(java.lang.Object,long,int)getAndAddIntRelease(java.lang.Object,long,int)getAndAddInt(java.lang.Object,long,int)getLoadAveragegetLoadAverage(double[],int)parkpark(boolean,long)unparkunpark(java.lang.Object)putDoubleOpaque(java.lang.Object,long,double)putLongOpaque(java.lang.Object,long,long)putFloatOpaque(java.lang.Object,long,float)putIntOpaque(java.lang.Object,long,int)putCharOpaque(java.lang.Object,long,char)putShortOpaque(java.lang.Object,long,short)putByteOpaque(java.lang.Object,long,byte)putBooleanOpaqueputBooleanOpaque(java.lang.Object,long,boolean)putReferenceOpaqueputReferenceOpaque(java.lang.Object,long,java.lang.Object)getDoubleOpaque(java.lang.Object,long)getLongOpaque(java.lang.Object,long)getFloatOpaque(java.lang.Object,long)getIntOpaque(java.lang.Object,long)getCharOpaque(java.lang.Object,long)getShortOpaque(java.lang.Object,long)getByteOpaque(java.lang.Object,long)getBooleanOpaquegetBooleanOpaque(java.lang.Object,long)getReferenceOpaquegetReferenceOpaque(java.lang.Object,long)putDoubleRelease(java.lang.Object,long,double)putLongRelease(java.lang.Object,long,long)putFloatRelease(java.lang.Object,long,float)putIntRelease(java.lang.Object,long,int)putCharRelease(java.lang.Object,long,char)putShortRelease(java.lang.Object,long,short)putByteRelease(java.lang.Object,long,byte)putBooleanReleaseputBooleanRelease(java.lang.Object,long,boolean)putReferenceReleaseputReferenceRelease(java.lang.Object,long,java.lang.Object)getDoubleAcquire(java.lang.Object,long)getLongAcquire(java.lang.Object,long)getFloatAcquire(java.lang.Object,long)getIntAcquire(java.lang.Object,long)getCharAcquire(java.lang.Object,long)getShortAcquire(java.lang.Object,long)getByteAcquire(java.lang.Object,long)getBooleanAcquiregetBooleanAcquire(java.lang.Object,long)getReferenceAcquiregetReferenceAcquire(java.lang.Object,long)putDoubleVolatile(java.lang.Object,long,double)getDoubleVolatile(java.lang.Object,long)putFloatVolatile(java.lang.Object,long,float)getFloatVolatile(java.lang.Object,long)putLongVolatile(java.lang.Object,long,long)getLongVolatile(java.lang.Object,long)putCharVolatile(java.lang.Object,long,char)getCharVolatile(java.lang.Object,long)putShortVolatile(java.lang.Object,long,short)getShortVolatile(java.lang.Object,long)putByteVolatile(java.lang.Object,long,byte)getByteVolatile(java.lang.Object,long)putBooleanVolatileputBooleanVolatile(java.lang.Object,long,boolean)getBooleanVolatilegetBooleanVolatile(java.lang.Object,long)putIntVolatile(java.lang.Object,long,int)getIntVolatile(java.lang.Object,long)putReferenceVolatileputReferenceVolatile(java.lang.Object,long,java.lang.Object)getReferenceVolatilegetReferenceVolatile(java.lang.Object,long)weakCompareAndSetLong(java.lang.Object,long,long,long)weakCompareAndSetLongRelease(java.lang.Object,long,long,long)weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)weakCompareAndSetLongPlain(java.lang.Object,long,long,long)compareAndExchangeLongRelease(java.lang.Object,long,long,long)compareAndExchangeLongAcquire(java.lang.Object,long,long,long)compareAndExchangeLong(java.lang.Object,long,long,long)compareAndSetLong(java.lang.Object,long,long,long)weakCompareAndSetDouble(java.lang.Object,long,double,double)weakCompareAndSetDoubleRelease(java.lang.Object,long,double,double)weakCompareAndSetDoubleAcquire(java.lang.Object,long,double,double)weakCompareAndSetDoublePlain(java.lang.Object,long,double,double)compareAndExchangeDoubleRelease(java.lang.Object,long,double,double)compareAndExchangeDoubleAcquire(java.lang.Object,long,double,double)compareAndExchangeDouble(java.lang.Object,long,double,double)compareAndSetDouble(java.lang.Object,long,double,double)weakCompareAndSetFloat(java.lang.Object,long,float,float)weakCompareAndSetFloatRelease(java.lang.Object,long,float,float)weakCompareAndSetFloatAcquire(java.lang.Object,long,float,float)weakCompareAndSetFloatPlain(java.lang.Object,long,float,float)compareAndExchangeFloatRelease(java.lang.Object,long,float,float)compareAndExchangeFloatAcquire(java.lang.Object,long,float,float)compareAndExchangeFloat(java.lang.Object,long,float,float)compareAndSetFloat(java.lang.Object,long,float,float)weakCompareAndSetBooleanPlainweakCompareAndSetBooleanPlain(java.lang.Object,long,boolean,boolean)weakCompareAndSetBooleanReleaseweakCompareAndSetBooleanRelease(java.lang.Object,long,boolean,boolean)weakCompareAndSetBooleanAcquireweakCompareAndSetBooleanAcquire(java.lang.Object,long,boolean,boolean)weakCompareAndSetBooleanweakCompareAndSetBoolean(java.lang.Object,long,boolean,boolean)compareAndExchangeBooleanReleasecompareAndExchangeBooleanRelease(java.lang.Object,long,boolean,boolean)compareAndExchangeBooleanAcquirecompareAndExchangeBooleanAcquire(java.lang.Object,long,boolean,boolean)compareAndExchangeBooleancompareAndExchangeBoolean(java.lang.Object,long,boolean,boolean)compareAndSetBooleancompareAndSetBoolean(java.lang.Object,long,boolean,boolean)weakCompareAndSetCharPlainweakCompareAndSetCharPlain(java.lang.Object,long,char,char)weakCompareAndSetCharReleaseweakCompareAndSetCharRelease(java.lang.Object,long,char,char)weakCompareAndSetCharAcquireweakCompareAndSetCharAcquire(java.lang.Object,long,char,char)weakCompareAndSetCharweakCompareAndSetChar(java.lang.Object,long,char,char)compareAndExchangeCharReleasecompareAndExchangeCharRelease(java.lang.Object,long,char,char)compareAndExchangeCharAcquirecompareAndExchangeCharAcquire(java.lang.Object,long,char,char)compareAndExchangeCharcompareAndExchangeChar(java.lang.Object,long,char,char)compareAndSetCharcompareAndSetChar(java.lang.Object,long,char,char)compareAndExchangeShortReleasecompareAndExchangeShortRelease(java.lang.Object,long,short,short)compareAndExchangeShortAcquirecompareAndExchangeShortAcquire(java.lang.Object,long,short,short)weakCompareAndSetShortPlainweakCompareAndSetShortPlain(java.lang.Object,long,short,short)weakCompareAndSetShortReleaseweakCompareAndSetShortRelease(java.lang.Object,long,short,short)weakCompareAndSetShortAcquireweakCompareAndSetShortAcquire(java.lang.Object,long,short,short)weakCompareAndSetShortweakCompareAndSetShort(java.lang.Object,long,short,short)compareAndSetShortcompareAndSetShort(java.lang.Object,long,short,short)compareAndExchangeShortcompareAndExchangeShort(java.lang.Object,long,short,short)compareAndExchangeByteReleasecompareAndExchangeByteRelease(java.lang.Object,long,byte,byte)compareAndExchangeByteAcquirecompareAndExchangeByteAcquire(java.lang.Object,long,byte,byte)weakCompareAndSetBytePlainweakCompareAndSetBytePlain(java.lang.Object,long,byte,byte)weakCompareAndSetByteReleaseweakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)weakCompareAndSetByteAcquireweakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)weakCompareAndSetByteweakCompareAndSetByte(java.lang.Object,long,byte,byte)compareAndSetBytecompareAndSetByte(java.lang.Object,long,byte,byte)compareAndExchangeBytecompareAndExchangeByte(java.lang.Object,long,byte,byte)weakCompareAndSetInt(java.lang.Object,long,int,int)weakCompareAndSetIntRelease(java.lang.Object,long,int,int)weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)weakCompareAndSetIntPlain(java.lang.Object,long,int,int)compareAndExchangeIntRelease(java.lang.Object,long,int,int)compareAndExchangeIntAcquire(java.lang.Object,long,int,int)compareAndExchangeInt(java.lang.Object,long,int,int)compareAndSetInt(java.lang.Object,long,int,int)weakCompareAndSetReferenceweakCompareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)weakCompareAndSetReferenceReleaseweakCompareAndSetReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)weakCompareAndSetReferenceAcquireweakCompareAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)weakCompareAndSetReferencePlainweakCompareAndSetReferencePlain(java.lang.Object,long,java.lang.Object,java.lang.Object)compareAndExchangeReferenceReleasecompareAndExchangeReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)compareAndExchangeReferenceAcquirecompareAndExchangeReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)compareAndExchangeReferencecompareAndExchangeReference(java.lang.Object,long,java.lang.Object,java.lang.Object)compareAndSetReferencecompareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)allocateUninitializedArrayallocateUninitializedArray(java.lang.Class,int)allocateInstance(java.lang.Class)defineClass0(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)isWritebackEnabledisWritebackEnabled()dataCacheLineAlignDowndataCacheLineAlignDown(long)dataCacheLineFlushSizedataCacheLineFlushSize()addressSizeaddressSize()arrayIndexScalearrayIndexScale(java.lang.Class)arrayBaseOffsetarrayBaseOffset(java.lang.Class)ensureClassInitializedensureClassInitialized(java.lang.Class)shouldBeInitialized(java.lang.Class)staticFieldBasestaticFieldBase(java.lang.reflect.Field)staticFieldOffsetstaticFieldOffset(java.lang.reflect.Field)objectFieldOffsetobjectFieldOffset(java.lang.Class,java.lang.String)objectFieldOffset(java.lang.reflect.Field)writebackMemorywritebackMemory(long,long)freeMemory(long)copySwapMemory(long,long,long,long)copySwapMemory(java.lang.Object,long,java.lang.Object,long,long,long)copyMemory(long,long,long)copyMemory(java.lang.Object,long,java.lang.Object,long,long)setMemory(long,long,byte)setMemory(java.lang.Object,long,long,byte)reallocateMemoryreallocateMemory(long,long)allocateMemoryallocateMemory(long)putAddressputAddress(long,long)getAddress(long)putDouble(long,double)getDouble(long)putFloat(long,float)getFloat(long)putLong(long,long)getLong(long)putInt(long,int)getInt(long)putChar(long,char)getChar(long)putShort(long,short)getShort(long)putByte(long,byte)getByte(long)getUncompressedObjectgetUncompressedObject(long)putAddress(java.lang.Object,long,long)getAddress(java.lang.Object,long)putDouble(java.lang.Object,long,double)getDouble(java.lang.Object,long)putFloat(java.lang.Object,long,float)getFloat(java.lang.Object,long)putLong(java.lang.Object,long,long)getLong(java.lang.Object,long)putChar(java.lang.Object,long,char)getChar(java.lang.Object,long)putShort(java.lang.Object,long,short)getShort(java.lang.Object,long)putByte(java.lang.Object,long,byte)getByte(java.lang.Object,long)putBooleanputBoolean(java.lang.Object,long,boolean)getBoolean(java.lang.Object,long)putReferenceputReference(java.lang.Object,long,java.lang.Object)getReferencegetReference(java.lang.Object,long)putInt(java.lang.Object,long,int)getInt(java.lang.Object,long)getUnsafegetUnsafe()ADDRESS_SIZEARRAY_OBJECT_INDEX_SCALEARRAY_DOUBLE_INDEX_SCALEARRAY_FLOAT_INDEX_SCALEARRAY_LONG_INDEX_SCALEARRAY_INT_INDEX_SCALEARRAY_CHAR_INDEX_SCALEARRAY_SHORT_INDEX_SCALEARRAY_BYTE_INDEX_SCALEARRAY_BOOLEAN_INDEX_SCALEARRAY_OBJECT_BASE_OFFSETARRAY_DOUBLE_BASE_OFFSETARRAY_FLOAT_BASE_OFFSETARRAY_LONG_BASE_OFFSETARRAY_INT_BASE_OFFSETARRAY_CHAR_BASE_OFFSETARRAY_SHORT_BASE_OFFSETARRAY_BYTE_BASE_OFFSETARRAY_BOOLEAN_BASE_OFFSETINVALID_FIELD_OFFSETBufferPool/modules/java.base/jdk/internal/misc/VM$BufferPool.classgetMemoryUsedgetMemoryUsed()getTotalCapacitygetTotalCapacity()VM/modules/java.base/jdk/internal/misc/VM.classinitialErrinitialErr()List<BufferPool>SequencedCollection<BufferPool>Collection<BufferPool>Iterable<BufferPool>getBufferPoolsgetBufferPools()getRuntimeArgumentsgetRuntimeArguments()getNanoTimeAdjustmentgetNanoTimeAdjustment(long)getegidgetegid()getgidgetgid()geteuidgeteuid()getuidgetuid()isSetUIDisSetUID()latestUserDefinedLoaderlatestUserDefinedLoader()toThreadStatetoThreadState(int)addFinalRefCountaddFinalRefCount(int)getPeakFinalRefCountgetPeakFinalRefCount()getFinalRefCountgetFinalRefCount()initializeOSEnvironmentinitializeOSEnvironment()savePropertiessaveProperties(java.util.Map)getSavedPropertiesgetSavedProperties()getSavedPropertygetSavedProperty(java.lang.String)isSystemDomainLoaderisSystemDomainLoader(java.lang.ClassLoader)isSupportedModuleDescriptorVersionisSupportedModuleDescriptorVersion(int,int)isSupportedClassFileVersionisSupportedClassFileVersion(int,int)isDirectMemoryPageAlignedisDirectMemoryPageAligned()maxDirectMemorymaxDirectMemory()isBootedisBooted()isJavaLangInvokeInitedisJavaLangInvokeInited()setJavaLangInvokeInitedsetJavaLangInvokeInited()isModuleSystemInitedisModuleSystemInited()awaitInitLevelawaitInitLevel(int)initLevelinitLevel()initLevel(int)VM()jdk.internal.moduleServiceProvider/modules/java.base/jdk/internal/module/ServicesCatalog$ServiceProvider.class/modules/java.base/jdk/internal/moduleproviderNameproviderName()ServiceProvider(java.lang.Module,java.lang.String)ServicesCatalog/modules/java.base/jdk/internal/module/ServicesCatalog.classputServicesCatalogputServicesCatalog(java.lang.ClassLoader,jdk.internal.module.ServicesCatalog)getServicesCatalog(java.lang.ClassLoader)getServicesCatalogOrNullgetServicesCatalogOrNull(java.lang.ClassLoader)List<ServiceProvider>SequencedCollection<ServiceProvider>Collection<ServiceProvider>Iterable<ServiceProvider>findServicesfindServices(java.lang.String)addProvideraddProvider(java.lang.Module,java.lang.Class,java.lang.Class)register(java.lang.Module)/modules/java.base/jdk/internal/ref/Cleaner.classPhantomReference<Object>PhantomReference<Object>(java.lang.Object,java.lang.ref.ReferenceQueue)create(java.lang.Object,java.lang.Runnable)CleanerImpl/modules/java.base/jdk/internal/ref/CleanerImpl.classstart(java.lang.ref.Cleaner,java.util.concurrent.ThreadFactory)CleanerImpl()getCleanerImplgetCleanerImpl(java.lang.ref.Cleaner)Function<Cleaner,CleanerImpl>setCleanerImplAccesssetCleanerImplAccess(java.util.function.Function)PhantomCleanable<?>PhantomReference<?>Reference<?>phantomCleanableListPhantomCleanablePhantomReference<T>PhantomReference<T>(java.lang.Object,java.lang.ref.ReferenceQueue)performCleanupperformCleanup()isListEmptyisListEmpty()PhantomCleanable()PhantomCleanable(java.lang.Object,java.lang.ref.Cleaner)jdk.internal.reflectCallerSensitive/modules/java.base/jdk/internal/reflect/CallerSensitive.class/modules/java.base/jdk/internal/reflectTag/modules/java.base/jdk/internal/reflect/ConstantPool$Tag.classEnum<Tag>Comparable<Tag>compareTo(jdk.internal.reflect.ConstantPool.Tag)EnumDesc<Tag>DynamicConstantDesc<Tag>Optional<EnumDesc<Tag>>Class<Tag>Enum<Tag>(java.lang.String,int)Tag[]INVALIDINVOKEDYNAMICMETHODTYPEMETHODHANDLENAMEANDTYPEINTERFACEMETHODREFMETHODREFFIELDREFSTRINGDOUBLEFLOATINTEGERUTF8ConstantPool/modules/java.base/jdk/internal/reflect/ConstantPool.classgetTagAtgetTagAt(int)getUTF8AtgetUTF8At(int)getStringAtgetStringAt(int)getDoubleAtgetDoubleAt(int)getFloatAtgetFloatAt(int)getLongAtgetLongAt(int)getIntAtgetIntAt(int)getNameAndTypeRefInfoAtgetNameAndTypeRefInfoAt(int)getNameAndTypeRefIndexAtgetNameAndTypeRefIndexAt(int)getMemberRefInfoAtgetMemberRefInfoAt(int)getFieldAtIfLoadedgetFieldAtIfLoaded(int)getFieldAtgetFieldAt(int)getMethodAtIfLoadedgetMethodAtIfLoaded(int)getMethodAtgetMethodAt(int)getClassRefIndexAtgetClassRefIndexAt(int)getClassAtIfLoadedgetClassAtIfLoaded(int)getClassAtgetClassAt(int)getSizegetSize()ConstantPool()ConstructorAccessor/modules/java.base/jdk/internal/reflect/ConstructorAccessor.classFieldAccessor/modules/java.base/jdk/internal/reflect/FieldAccessor.classMethodAccessor/modules/java.base/jdk/internal/reflect/MethodAccessor.classinvoke(java.lang.Object,java.lang.Object[],java.lang.Class)ReflectionFactory/modules/java.base/jdk/internal/reflect/ReflectionFactory.classuseOldSerializableConstructoruseOldSerializableConstructor()useNativeAccessorOnlyuseNativeAccessorOnly()Constructor<OptionalDataException>newOptionalDataExceptionForSerializationnewOptionalDataExceptionForSerialization()hasStaticInitializerForSerializationhasStaticInitializerForSerialization(java.lang.Class)readResolveForSerializationreadResolveForSerialization(java.lang.Class)writeReplaceForSerializationwriteReplaceForSerialization(java.lang.Class)writeObjectForSerializationwriteObjectForSerialization(java.lang.Class)readObjectNoDataForSerializationreadObjectNoDataForSerialization(java.lang.Class)readObjectForSerializationreadObjectForSerialization(java.lang.Class)newConstructorForSerializationnewConstructorForSerialization(java.lang.Class)newConstructorForSerialization(java.lang.Class,java.lang.reflect.Constructor)newConstructorForExternalizationnewConstructorForExternalization(java.lang.Class)newInstance(java.lang.reflect.Constructor,java.lang.Object[],java.lang.Class)getExecutableSharedParameterTypesgetExecutableSharedParameterTypes(java.lang.reflect.Executable)copyConstructorcopyConstructor(java.lang.reflect.Constructor)copyFieldcopyField(java.lang.reflect.Field)leafCopyMethodleafCopyMethod(java.lang.reflect.Method)copyMethodcopyMethod(java.lang.reflect.Method)setConstructorAccessor(java.lang.reflect.Constructor,jdk.internal.reflect.ConstructorAccessor)getConstructorAccessor(java.lang.reflect.Constructor)newConstructornewConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])newConstructorAccessornewConstructorAccessor(java.lang.reflect.Constructor)newMethodAccessornewMethodAccessor(java.lang.reflect.Method,boolean)newFieldAccessornewFieldAccessor(java.lang.reflect.Field,boolean)getReflectionFactorygetReflectionFactory()ClassFileDumper/modules/java.base/jdk/internal/util/ClassFileDumper.classdumpFailedClassdumpFailedClass(java.lang.String,byte[])dumpClassdumpClass(java.lang.String,java.lang.Class,byte[])isEnabledisEnabled()getInstance(java.lang.String,java.lang.String)ReferenceKey/modules/java.base/jdk/internal/util/ReferenceKey.classunusedunused()ReferencedKeyMap/modules/java.base/jdk/internal/util/ReferencedKeyMap.classReferencedKeyMap<>internAddKeyinternAddKey(jdk.internal.util.ReferencedKeyMap,java.lang.Object)ReferenceKey<T>ReferencedKeyMap<T,ReferenceKey<T>>Map<T,ReferenceKey<T>>intern(jdk.internal.util.ReferencedKeyMap,java.lang.Object,java.util.function.UnaryOperator)intern(jdk.internal.util.ReferencedKeyMap,java.lang.Object)removeStaleReferencesremoveStaleReferences()ReferencedKeyMap<K,V>create(boolean,boolean,java.util.function.Supplier)ReferenceKey<K>Map<ReferenceKey<K>,V>Supplier<Map<ReferenceKey<K>,V>>create(boolean,java.util.function.Supplier)concurrentHashMapSupplierconcurrentHashMapSupplier()ReferencedKeySetAbstractSet<T>AbstractCollection<T>Collection<? extends T>Iterable<? extends T>AbstractCollection<T>()AbstractSet<T>()intern(java.lang.Object,java.util.function.UnaryOperator)intern(java.lang.Object)ReferencedKeySet<>ReferencedKeySet<E>ReferenceKey<E>Map<ReferenceKey<E>,ReferenceKey<E>>Supplier<Map<ReferenceKey<E>,ReferenceKey<E>>>SoftReferenceKey/modules/java.base/jdk/internal/util/SoftReferenceKey.classSoftReference<T>SoftReference<T>(java.lang.Object,java.lang.ref.ReferenceQueue)SoftReference<T>(java.lang.Object)ReferenceQueue<T>SoftReferenceKey(java.lang.Object,java.lang.ref.ReferenceQueue)StrongReferenceKey/modules/java.base/jdk/internal/util/StrongReferenceKey.classStrongReferenceKey(java.lang.Object)WeakReferenceKey/modules/java.base/jdk/internal/util/WeakReferenceKey.classWeakReference<T>WeakReference<T>(java.lang.Object,java.lang.ref.ReferenceQueue)WeakReference<T>(java.lang.Object)WeakReferenceKey(java.lang.Object,java.lang.ref.ReferenceQueue)jdk.internal.vmPinned/modules/java.base/jdk/internal/vm/Continuation$Pinned.classEnum<Pinned>Comparable<Pinned>compareTo(jdk.internal.vm.Continuation.Pinned)EnumDesc<Pinned>DynamicConstantDesc<Pinned>Optional<EnumDesc<Pinned>>Class<Pinned>Enum<Pinned>(java.lang.String,int)Pinned[]CRITICAL_SECTIONMONITORPreemptStatus/modules/java.base/jdk/internal/vm/Continuation$PreemptStatus.classEnum<PreemptStatus>Comparable<PreemptStatus>compareTo(jdk.internal.vm.Continuation.PreemptStatus)EnumDesc<PreemptStatus>DynamicConstantDesc<PreemptStatus>Optional<EnumDesc<PreemptStatus>>Class<PreemptStatus>Enum<PreemptStatus>(java.lang.String,int)pinnedpinned()PreemptStatus[]TRANSIENT_FAIL_PINNED_MONITORTRANSIENT_FAIL_PINNED_NATIVETRANSIENT_FAIL_PINNED_CRITICAL_SECTIONPERM_FAIL_NOT_MOUNTEDPERM_FAIL_YIELDINGPERM_FAIL_UNSUPPORTEDContinuation/modules/java.base/jdk/internal/vm/Continuation.classtryPreempttryPreempt(java.lang.Thread)isPinnedisPinned(jdk.internal.vm.ContinuationScope)unpinunpin()pinpin()isPreemptedisPreempted()onContinueonContinue()onPinnedonPinned(jdk.internal.vm.Continuation.Pinned)yield(jdk.internal.vm.ContinuationScope)wrapWalkwrapWalk(jdk.internal.vm.Continuation,jdk.internal.vm.ContinuationScope,java.util.function.Supplier)stackWalkerstackWalker(java.util.Set,jdk.internal.vm.ContinuationScope)stackWalker(java.util.Set)stackWalker()getCurrentContinuationgetCurrentContinuation(jdk.internal.vm.ContinuationScope)getScopegetScope()Continuation(jdk.internal.vm.ContinuationScope,java.lang.Runnable)ContinuationScope/modules/java.base/jdk/internal/vm/ContinuationScope.classContinuationScope()ContinuationScope(java.lang.String)BindingsSnapshot/modules/java.base/jdk/internal/vm/ScopedValueContainer$BindingsSnapshot.classcontainer()BindingsSnapshot(java.lang.Object,jdk.internal.vm.ScopedValueContainer)ScopedValueContainer/modules/java.base/jdk/internal/vm/ScopedValueContainer.classCallableOp<V,X>captureBindingscaptureBindings()latest(java.lang.Class)SharedThreadContainer/modules/java.base/jdk/internal/vm/SharedThreadContainer.classstart(java.lang.Thread)Stream<Thread>BaseStream<Thread,Stream<Thread>>threadsthreads()onExit(java.lang.Thread)onStart(java.lang.Thread)create(jdk.internal.vm.ThreadContainer,java.lang.String)StackableScope/modules/java.base/jdk/internal/vm/StackableScope.classhead()tryClosetryClose()enclosingScopeenclosingScope(java.lang.Class)enclosingScope()popAllpopAll()popForcefullypopForcefully()tryPoptryPop()push()StackableScope()StackableScope(boolean)ThreadContainer/modules/java.base/jdk/internal/vm/ThreadContainer.classthreadCountthreadCount()Stream<ThreadContainer>BaseStream<ThreadContainer,Stream<ThreadContainer>>ThreadContainer(boolean)jdk.internal.vm.annotationContended/modules/java.base/jdk/internal/vm/annotation/Contended.class/modules/java.base/jdk/internal/vm/annotationDontInline/modules/java.base/jdk/internal/vm/annotation/DontInline.classForceInline/modules/java.base/jdk/internal/vm/annotation/ForceInline.classHidden/modules/java.base/jdk/internal/vm/annotation/Hidden.classIntrinsicCandidate/modules/java.base/jdk/internal/vm/annotation/IntrinsicCandidate.classReservedStackAccess/modules/java.base/jdk/internal/vm/annotation/ReservedStackAccess.classStable/modules/java.base/jdk/internal/vm/annotation/Stable.classBinaryOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$BinaryOperation.classVectorMask<?>apply(jdk.internal.vm.vector.VectorSupport.VectorPayload,jdk.internal.vm.vector.VectorSupport.VectorPayload,jdk.internal.vm.vector.VectorSupport.VectorMask)CompressExpandOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$CompressExpandOperation.classVector<?>apply(jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask)FromBitsCoercedOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$FromBitsCoercedOperation.classVectorSpecies<?>fromBitsfromBits(long,jdk.internal.vm.vector.VectorSupport.VectorSpecies)IndexOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$IndexOperation.classindex(jdk.internal.vm.vector.VectorSupport.Vector,int,jdk.internal.vm.vector.VectorSupport.VectorSpecies)IndexPartiallyInUpperRangeOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$IndexPartiallyInUpperRangeOperation.classapply(long,long)LoadOperationCload(java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.VectorSpecies)LoadVectorMaskedOperationload(java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.VectorMask)LoadVectorOperationWithMap/modules/java.base/jdk/internal/vm/vector/VectorSupport$LoadVectorOperationWithMap.classloadWithMaploadWithMap(java.lang.Object,int,int[],int,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.VectorMask)ReductionOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$ReductionOperation.classShuffleIotaOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$ShuffleIotaOperation.classSHVectorShuffle<?>/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorShuffle.classVectorShuffle<>apply(int,int,int,jdk.internal.vm.vector.VectorSupport.VectorSpecies)ShuffleToVectorOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$ShuffleToVectorOperation.classapply(jdk.internal.vm.vector.VectorSupport.VectorShuffle)StoreVectorMaskedOperationstore(java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask)StoreVectorOperationstore(java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.VectorPayload)StoreVectorOperationWithMap/modules/java.base/jdk/internal/vm/vector/VectorSupport$StoreVectorOperationWithMap.classstoreWithMapstoreWithMap(java.lang.Object,int,jdk.internal.vm.vector.VectorSupport.Vector,int[],int,jdk.internal.vm.vector.VectorSupport.VectorMask)TernaryOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$TernaryOperation.classapply(jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask)UnaryOperation/modules/java.base/jdk/internal/vm/vector/VectorSupport$UnaryOperation.classVecExtractOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VecExtractOp.classapply(jdk.internal.vm.vector.VectorSupport.VectorPayload,int)VecInsertOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VecInsertOp.classapply(jdk.internal.vm.vector.VectorSupport.Vector,int,long)VectorVector(java.lang.Object)VectorBlendOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorBlendOp.classapply(jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask)VectorBroadcastIntOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorBroadcastIntOp.classapply(jdk.internal.vm.vector.VectorSupport.Vector,int,jdk.internal.vm.vector.VectorSupport.VectorMask)VectorCompareOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorCompareOp.classapply(int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask)VectorConvertOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorConvertOp.classVOUTVINapply(jdk.internal.vm.vector.VectorSupport.VectorPayload,jdk.internal.vm.vector.VectorSupport.VectorSpecies)VectorMaskVectorMask(java.lang.Object)VectorMaskOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorMaskOp.classapply(jdk.internal.vm.vector.VectorSupport.VectorMask)VectorPayload/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorPayload.classgetPayloadgetPayload()VectorPayload(java.lang.Object)VectorRearrangeOp/modules/java.base/jdk/internal/vm/vector/VectorSupport$VectorRearrangeOp.classapply(jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorShuffle,jdk.internal.vm.vector.VectorSupport.VectorMask)VectorShuffleVectorShuffle(java.lang.Object)VectorSpeciesVectorSpecies()VectorSupport/modules/java.base/jdk/internal/vm/vector/VectorSupport.classisNonCapturingLambdaisNonCapturingLambda(java.lang.Object)getMaxLaneCountgetMaxLaneCount(java.lang.Class)VectorMaskOp<>maskReductionCoercedmaskReductionCoerced(int,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.VectorMaskOp)? extends MClass<? extends M>VectorMaskOp<M>VPmaybeReboxmaybeRebox(jdk.internal.vm.vector.VectorSupport.VectorPayload)CompressExpandOperation<>compressExpandOpcompressExpandOp(int,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.CompressExpandOperation)CompressExpandOperation<V,M>VectorConvertOp<>convert(int,java.lang.Class,java.lang.Class,int,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.VectorPayload,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.VectorConvertOp)VectorConvertOp<VOUT,VIN,S>VectorBroadcastIntOp<>broadcastIntbroadcastInt(int,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,int,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.VectorBroadcastIntOp)VectorBroadcastIntOp<V,M>VectorBlendOp<>blendblend(java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.VectorBlendOp)VectorBlendOp<V,M>VectorRearrangeOp<>VectorShuffle<E>rearrangeOprearrangeOp(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorShuffle,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.VectorRearrangeOp)Class<SH>VectorRearrangeOp<V,SH,M>VectorCompareOp<>compare(int,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.VectorCompareOp)VectorCompareOp<V,M>test(int,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.VectorMask,java.util.function.BiFunction)BiFunction<M,M,Boolean>StoreVectorOperationWithMap<>WVector<Integer>storeWithMap(java.lang.Class,java.lang.Class,java.lang.Class,int,java.lang.Class,java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,java.lang.Object,int,int[],int,jdk.internal.vm.vector.VectorSupport.StoreVectorOperationWithMap)? extends Vector<Integer>Class<? extends Vector<Integer>>StoreVectorOperationWithMap<C,V,M>storeMaskedstoreMasked(java.lang.Class,java.lang.Class,java.lang.Class,int,java.lang.Object,long,boolean,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.StoreVectorMaskedOperation)StoreVectorMaskedOperation<C,V,M>store(java.lang.Class,java.lang.Class,int,java.lang.Object,long,boolean,jdk.internal.vm.vector.VectorSupport.VectorPayload,java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.StoreVectorOperation)StoreVectorOperation<C,V>LoadVectorOperationWithMap<>loadWithMap(java.lang.Class,java.lang.Class,java.lang.Class,int,java.lang.Class,java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,java.lang.Object,int,int[],int,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.LoadVectorOperationWithMap)LoadVectorOperationWithMap<C,V,S,M>loadMaskedloadMasked(java.lang.Class,java.lang.Class,java.lang.Class,int,java.lang.Object,long,boolean,jdk.internal.vm.vector.VectorSupport.VectorMask,int,java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.LoadVectorMaskedOperation)LoadVectorMaskedOperation<C,V,S,M>load(java.lang.Class,java.lang.Class,int,java.lang.Object,long,boolean,java.lang.Object,long,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.LoadOperation)? extends VMClass<? extends VM>LoadOperation<C,VM,S>TernaryOperation<>ternaryOpternaryOp(int,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.TernaryOperation)TernaryOperation<V,M>BinaryOperation<>binaryOpbinaryOp(int,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.VectorPayload,jdk.internal.vm.vector.VectorSupport.VectorPayload,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.BinaryOperation)BinaryOperation<VM,M>UnaryOperation<>unaryOpunaryOp(int,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.UnaryOperation)UnaryOperation<V,M>VecInsertOp<>insert(java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,int,long,jdk.internal.vm.vector.VectorSupport.VecInsertOp)VecInsertOp<V>VecExtractOp<>extractextract(java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.VectorPayload,int,jdk.internal.vm.vector.VectorSupport.VecExtractOp)VecExtractOp<VM>ReductionOperation<>reductionCoercedreductionCoerced(int,java.lang.Class,java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,jdk.internal.vm.vector.VectorSupport.VectorMask,jdk.internal.vm.vector.VectorSupport.ReductionOperation)ReductionOperation<V,M>IndexOperation<>indexVectorindexVector(java.lang.Class,java.lang.Class,int,jdk.internal.vm.vector.VectorSupport.Vector,int,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.IndexOperation)IndexOperation<V,S>ShuffleToVectorOperation<>shuffleToVectorshuffleToVector(java.lang.Class,java.lang.Class,java.lang.Class,jdk.internal.vm.vector.VectorSupport.VectorShuffle,int,jdk.internal.vm.vector.VectorSupport.ShuffleToVectorOperation)? extends Vector<E>Class<? extends Vector<E>>? extends SHClass<? extends SH>ShuffleToVectorOperation<V,SH>ShuffleIotaOperation<>shuffleIotashuffleIota(java.lang.Class,java.lang.Class,jdk.internal.vm.vector.VectorSupport.VectorSpecies,int,int,int,int,jdk.internal.vm.vector.VectorSupport.ShuffleIotaOperation)ShuffleIotaOperation<S,SH>IndexPartiallyInUpperRangeOperation<>indexPartiallyInUpperRangeindexPartiallyInUpperRange(java.lang.Class,java.lang.Class,int,long,long,jdk.internal.vm.vector.VectorSupport.IndexPartiallyInUpperRangeOperation)IndexPartiallyInUpperRangeOperation<E,M>FromBitsCoercedOperation<>fromBitsCoercedfromBitsCoerced(java.lang.Class,java.lang.Class,int,long,int,jdk.internal.vm.vector.VectorSupport.VectorSpecies,jdk.internal.vm.vector.VectorSupport.FromBitsCoercedOperation)FromBitsCoercedOperation<VM,S>VectorSupport()T_LONGT_INTT_SHORTT_BYTET_DOUBLET_FLOATMODE_BITS_COERCED_LONG_TO_MASKMODE_BROADCASTBT_ugtBT_ultBT_ugeBT_uleBT_unsigned_compareBT_no_overflowBT_overflowBT_gtBT_ltBT_geBT_leBT_neBT_eqVECTOR_OP_HYPOTVECTOR_OP_EXPM1VECTOR_OP_EXPVECTOR_OP_POWVECTOR_OP_LOG1PVECTOR_OP_LOG10VECTOR_OP_LOGVECTOR_OP_CBRTVECTOR_OP_ATAN2VECTOR_OP_ATANVECTOR_OP_ACOSVECTOR_OP_ASINVECTOR_OP_COSHVECTOR_OP_COSVECTOR_OP_SINHVECTOR_OP_SINVECTOR_OP_TANHVECTOR_OP_TANVECTOR_OP_EXPAND_BITSVECTOR_OP_COMPRESS_BITSVECTOR_OP_REVERSE_BYTESVECTOR_OP_REVERSEVECTOR_OP_LZ_COUNTVECTOR_OP_TZ_COUNTVECTOR_OP_MASK_COMPRESSVECTOR_OP_EXPANDVECTOR_OP_COMPRESSVECTOR_OP_RROTATEVECTOR_OP_LROTATEVECTOR_OP_MASK_TOLONGVECTOR_OP_MASK_LASTTRUEVECTOR_OP_MASK_FIRSTTRUEVECTOR_OP_MASK_TRUECOUNTVECTOR_OP_REINTERPRETVECTOR_OP_UCASTVECTOR_OP_CASTVECTOR_OP_URSHIFTVECTOR_OP_RSHIFTVECTOR_OP_LSHIFTVECTOR_OP_FMAVECTOR_OP_XORVECTOR_OP_ORVECTOR_OP_ANDVECTOR_OP_MAXVECTOR_OP_MINVECTOR_OP_DIVVECTOR_OP_MULVECTOR_OP_SUBVECTOR_OP_ADDVECTOR_OP_BIT_COUNTVECTOR_OP_SQRTVECTOR_OP_NEGVECTOR_OP_ABS/Users/thida/ftp/gradle-project-demo/app/build/classes/java/main/org/example/App.class/Users/thida/ftp/gradle-project-demo/app/build/classes/java/main/org/example/Users/thida/ftp/gradle-project-demo/app/build/classes/java/main/org/Users/thida/ftp/gradle-project-demo/app/build/classes/java/main/Users/thida/ftp/gradle-project-demo/app/build/classes/java/Users/thida/ftp/gradle-project-demo/app/build/classes/Users/thida/ftp/gradle-project-demo/app/buildmainmain(java.lang.String[])getGreetinggetGreeting()App()AppTest/Users/thida/ftp/gradle-project-demo/app/build/classes/java/test/org/example/AppTest.class/Users/thida/ftp/gradle-project-demo/app/build/classes/java/test/org/example/Users/thida/ftp/gradle-project-demo/app/build/classes/java/test/org/Users/thida/ftp/gradle-project-demo/app/build/classes/java/testappHasAGreetingappHasAGreeting()AppTest()org.hamcrestDescription/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/Users/thida/.gradle/caches/modules-2/files-2.1/Users/thida/.gradle/caches/modules-2/Users/thida/.gradle/caches/Users/thida/.gradle/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar/org/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar/org/hamcrest/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar/org/hamcrest/Description.class? extends SelfDescribingIterable<? extends SelfDescribing>appendListappendList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)appendValueListappendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])appendValue(java.lang.Object)appendDescriptionOfappendDescriptionOf(org.hamcrest.SelfDescribing)appendText(java.lang.String)/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar/org/hamcrest/Matcher.class_dont_implement_Matcher___instead_extend_BaseMatcher__dont_implement_Matcher___instead_extend_BaseMatcher_()describeMismatchdescribeMismatch(java.lang.Object,org.hamcrest.Description)matches(java.lang.Object)SelfDescribing/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar/org/hamcrest/SelfDescribing.classdescribeTodescribeTo(org.hamcrest.Description)org.junitAssert/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/Users/thida/.gradle/caches/modules-2/files-2.1/junit/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/Assert.classassertThrowsassertThrows(java.lang.String,java.lang.Class,org.junit.function.ThrowingRunnable)assertThrows(java.lang.Class,org.junit.function.ThrowingRunnable)Matcher<>assertThatassertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)Matcher<? super T>assertThat(java.lang.Object,org.hamcrest.Matcher)assertEqualsassertEquals(java.lang.Object[],java.lang.Object[])assertEquals(java.lang.String,java.lang.Object[],java.lang.Object[])format(java.lang.String,java.lang.Object,java.lang.Object)assertNotSameassertNotSame(java.lang.Object,java.lang.Object)assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)assertSame(java.lang.String,java.lang.Object,java.lang.Object)assertNullassertNull(java.lang.Object)assertNull(java.lang.String,java.lang.Object)assertNotNullassertNotNull(java.lang.Object)assertNotNull(java.lang.String,java.lang.Object)assertEquals(float,float,float)assertEquals(double,double,double)assertEquals(java.lang.String,double,double)assertEquals(double,double)assertEquals(java.lang.String,long,long)assertEquals(long,long)assertNotEqualsassertNotEquals(java.lang.String,float,float,float)assertEquals(java.lang.String,float,float,float)assertEquals(java.lang.String,double,double,double)assertArrayEqualsassertArrayEquals(float[],float[],float)assertArrayEquals(java.lang.String,float[],float[],float)assertArrayEquals(double[],double[],double)assertArrayEquals(java.lang.String,double[],double[],double)assertArrayEquals(long[],long[])assertArrayEquals(java.lang.String,long[],long[])assertArrayEquals(int[],int[])assertArrayEquals(java.lang.String,int[],int[])assertArrayEquals(short[],short[])assertArrayEquals(java.lang.String,short[],short[])assertArrayEquals(char[],char[])assertArrayEquals(java.lang.String,char[],char[])assertArrayEquals(byte[],byte[])assertArrayEquals(java.lang.String,byte[],byte[])assertArrayEquals(boolean[],boolean[])assertArrayEquals(java.lang.String,boolean[],boolean[])assertArrayEquals(java.lang.Object[],java.lang.Object[])assertArrayEquals(java.lang.String,java.lang.Object[],java.lang.Object[])assertNotEquals(float,float,float)assertNotEquals(double,double,double)assertNotEquals(java.lang.String,double,double,double)assertNotEquals(long,long)assertNotEquals(java.lang.String,long,long)assertNotEquals(java.lang.Object,java.lang.Object)assertNotEquals(java.lang.String,java.lang.Object,java.lang.Object)assertEquals(java.lang.Object,java.lang.Object)assertEquals(java.lang.String,java.lang.Object,java.lang.Object)failfail()fail(java.lang.String)assertFalseassertFalse(boolean)assertFalse(java.lang.String,boolean)assertTrueassertTrue(boolean)assertTrue(java.lang.String,boolean)Assert()None/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/Test$None.classTest/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/Test.classtimeouttimeout()expectedexpected()org.junit.functionThrowingRunnable/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/function/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/function/ThrowingRunnable.classorg.junit.internalArrayComparisonFailure/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/internal/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar/org/junit/internal/ArrayComparisonFailure.classaddDimensionaddDimension(int)ArrayComparisonFailure(java.lang.String,java.lang.AssertionError,int)sun.invoke.emptyEmpty/modules/java.base/sun/invoke/empty/Empty.class/modules/java.base/sun/invoke/empty/modules/java.base/sun/invoke/modules/java.base/sunsun.invoke.util/modules/java.base/sun/invoke/util/Wrapper.class/modules/java.base/sun/invoke/utilEnum<Wrapper>Comparable<Wrapper>compareTo(sun.invoke.util.Wrapper)EnumDesc<Wrapper>DynamicConstantDesc<Wrapper>Optional<EnumDesc<Wrapper>>Class<Wrapper>Enum<Wrapper>(java.lang.String,int)isStrictSubRangeOfisStrictSubRangeOf(sun.invoke.util.Wrapper)copyArrayBoxingcopyArrayBoxing(java.lang.Object,int,java.lang.Object[],int,int)copyArrayUnboxingcopyArrayUnboxing(java.lang.Object[],int,java.lang.Object,int,int)makeArraymakeArray(int)wrap(int)wrap(java.lang.Object)forceTypeforceType(java.lang.Class,java.lang.Class)convert(java.lang.Object,java.lang.Class)cast(java.lang.Object,java.lang.Class)primitiveSimpleNameprimitiveSimpleName()wrapperSimpleNamewrapperSimpleName()basicTypeStringbasicTypeString()isPrimitiveTypeisPrimitiveType(java.lang.Class)isWrapperNumericOrBooleanTypeisWrapperNumericOrBooleanType(java.lang.Class)isWrapperTypeisWrapperType(java.lang.Class)asPrimitiveTypeasPrimitiveType(java.lang.Class)asWrapperTypeasWrapperType(java.lang.Class)wrapperTypewrapperType(java.lang.Class)wrapperType()primitiveTypeprimitiveType()classDescriptorclassDescriptor()forBasicTypeforBasicType(java.lang.Class)forBasicType(char)findWrapperTypefindWrapperType(java.lang.Class)forWrapperTypeforWrapperType(java.lang.Class)forPrimitiveTypeforPrimitiveType(char)forPrimitiveType(java.lang.Class)zero()isConvertibleFromisConvertibleFrom(sun.invoke.util.Wrapper)isFloatingisFloating()isUnsignedisUnsigned()isSigned()isSubwordOrIntisSubwordOrInt()isIntegralisIntegral()isNumericisNumeric()isDoubleWordisDoubleWord()isSingleWordisSingleWord()stackSlotsstackSlots()bitWidthbitWidth()detailStringdetailString()Wrapper[]VOIDOBJECTINTCHARBYTEBOOLEANsun.nio.chDirectBuffer/modules/java.base/sun/nio/ch/DirectBuffer.class/modules/java.base/sun/nio/ch/modules/java.base/sun/nioInterruptible/modules/java.base/sun/nio/ch/Interruptible.classpostInterruptpostInterrupt()interrupt(java.lang.Thread)sun.reflect.annotationAnnotationType/modules/java.base/sun/reflect/annotation/AnnotationType.class/modules/java.base/sun/reflect/annotation/modules/java.base/sun/reflectisInheritedisInherited()retentionretention()memberDefaultsmemberDefaults()Map<String,Method>membersmembers()memberTypesmemberTypes()invocationHandlerReturnTypeinvocationHandlerReturnType(java.lang.Class)getInstance(java.lang.Class)sun.reflect.generics.factoryGenericsFactory/modules/java.base/sun/reflect/generics/factory/GenericsFactory.class/modules/java.base/sun/reflect/generics/factory/modules/java.base/sun/reflect/genericsmakeVoidmakeVoid()makeDoublemakeDouble()makeFloatmakeFloat()makeLongmakeLong()makeIntmakeInt()makeCharmakeChar()makeShortmakeShort()makeBoolmakeBool()makeBytemakeByte()makeArrayTypemakeArrayType(java.lang.reflect.Type)makeNamedTypemakeNamedType(java.lang.String)FieldTypeSignature[]makeWildcardmakeWildcard(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])findTypeVariablefindTypeVariable(java.lang.String)makeParameterizedTypemakeParameterizedType(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)makeTypeVariablemakeTypeVariable(java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[])sun.reflect.generics.repositoryAbstractRepository/modules/java.base/sun/reflect/generics/repository/AbstractRepository.class/modules/java.base/sun/reflect/generics/repositoryAbstractRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)getReifiergetReifier()getTreegetTree()ConstructorRepository/modules/java.base/sun/reflect/generics/repository/ConstructorRepository.classGenericDeclRepository<MethodTypeSignature>/modules/java.base/sun/reflect/generics/repository/GenericDeclRepository.classAbstractRepository<MethodTypeSignature>AbstractRepository<MethodTypeSignature>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)GenericDeclRepositoryGenericDeclRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)GenericDeclRepository<MethodTypeSignature>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)EMPTY_TYPE_VARSmake(java.lang.String,sun.reflect.generics.factory.GenericsFactory)ConstructorRepository(java.lang.String,sun.reflect.generics.factory.GenericsFactory)AbstractRepository<S>AbstractRepository<S>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)MethodRepository/modules/java.base/sun/reflect/generics/repository/MethodRepository.classsun.reflect.generics.treeArrayTypeSignature/modules/java.base/sun/reflect/generics/tree/ArrayTypeSignature.class/modules/java.base/sun/reflect/generics/treesun.reflect.generics.visitorTypeTreeVisitor<?>/modules/java.base/sun/reflect/generics/visitor/TypeTreeVisitor.class/modules/java.base/sun/reflect/generics/visitoraccept(sun.reflect.generics.visitor.TypeTreeVisitor)make(sun.reflect.generics.tree.TypeSignature)BaseType/modules/java.base/sun/reflect/generics/tree/BaseType.classBooleanSignature/modules/java.base/sun/reflect/generics/tree/BooleanSignature.classmake()BottomSignature/modules/java.base/sun/reflect/generics/tree/BottomSignature.classByteSignature/modules/java.base/sun/reflect/generics/tree/ByteSignature.classCharSignature/modules/java.base/sun/reflect/generics/tree/CharSignature.classClassSignature/modules/java.base/sun/reflect/generics/tree/ClassSignature.classVisitor<?>/modules/java.base/sun/reflect/generics/visitor/Visitor.classaccept(sun.reflect.generics.visitor.Visitor)ClassTypeSignature[]getSuperInterfacesgetSuperInterfaces()FormalTypeParameter[]getFormalTypeParametersgetFormalTypeParameters()make(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.ClassTypeSignature,sun.reflect.generics.tree.ClassTypeSignature[])ClassTypeSignature/modules/java.base/sun/reflect/generics/tree/ClassTypeSignature.classList<SimpleClassTypeSignature>SequencedCollection<SimpleClassTypeSignature>Collection<SimpleClassTypeSignature>Iterable<SimpleClassTypeSignature>make(java.util.List)DoubleSignature/modules/java.base/sun/reflect/generics/tree/DoubleSignature.classFieldTypeSignature/modules/java.base/sun/reflect/generics/tree/FieldTypeSignature.classFloatSignature/modules/java.base/sun/reflect/generics/tree/FloatSignature.classFormalTypeParameter/modules/java.base/sun/reflect/generics/tree/FormalTypeParameter.classmake(java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[])IntSignature/modules/java.base/sun/reflect/generics/tree/IntSignature.classLongSignature/modules/java.base/sun/reflect/generics/tree/LongSignature.classMethodTypeSignature/modules/java.base/sun/reflect/generics/tree/MethodTypeSignature.classTypeSignature[]make(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.TypeSignature[],sun.reflect.generics.tree.ReturnType,sun.reflect.generics.tree.FieldTypeSignature[])ReturnType/modules/java.base/sun/reflect/generics/tree/ReturnType.classShortSignature/modules/java.base/sun/reflect/generics/tree/ShortSignature.classSignature/modules/java.base/sun/reflect/generics/tree/Signature.classSimpleClassTypeSignature/modules/java.base/sun/reflect/generics/tree/SimpleClassTypeSignature.classTypeArgument[]getTypeArgumentsgetTypeArguments()getDollargetDollar()make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])Tree/modules/java.base/sun/reflect/generics/tree/Tree.classTypeArgument/modules/java.base/sun/reflect/generics/tree/TypeArgument.classTypeSignature/modules/java.base/sun/reflect/generics/tree/TypeSignature.classTypeTree/modules/java.base/sun/reflect/generics/tree/TypeTree.classTypeVariableSignature/modules/java.base/sun/reflect/generics/tree/TypeVariableSignature.classgetIdentifiergetIdentifier()make(java.lang.String)VoidDescriptor/modules/java.base/sun/reflect/generics/tree/VoidDescriptor.classWildcard/modules/java.base/sun/reflect/generics/tree/Wildcard.classmake(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])Reifier/modules/java.base/sun/reflect/generics/visitor/Reifier.classTypeTreeVisitor<Type>visitVoidDescriptorvisitVoidDescriptor(sun.reflect.generics.tree.VoidDescriptor)visitDoubleSignaturevisitDoubleSignature(sun.reflect.generics.tree.DoubleSignature)visitFloatSignaturevisitFloatSignature(sun.reflect.generics.tree.FloatSignature)visitLongSignaturevisitLongSignature(sun.reflect.generics.tree.LongSignature)visitIntSignaturevisitIntSignature(sun.reflect.generics.tree.IntSignature)visitCharSignaturevisitCharSignature(sun.reflect.generics.tree.CharSignature)visitShortSignaturevisitShortSignature(sun.reflect.generics.tree.ShortSignature)visitBooleanSignaturevisitBooleanSignature(sun.reflect.generics.tree.BooleanSignature)visitByteSignaturevisitByteSignature(sun.reflect.generics.tree.ByteSignature)visitBottomSignaturevisitBottomSignature(sun.reflect.generics.tree.BottomSignature)visitSimpleClassTypeSignaturevisitSimpleClassTypeSignature(sun.reflect.generics.tree.SimpleClassTypeSignature)visitWildcardvisitWildcard(sun.reflect.generics.tree.Wildcard)visitTypeVariableSignaturevisitTypeVariableSignature(sun.reflect.generics.tree.TypeVariableSignature)visitArrayTypeSignaturevisitArrayTypeSignature(sun.reflect.generics.tree.ArrayTypeSignature)visitClassTypeSignaturevisitClassTypeSignature(sun.reflect.generics.tree.ClassTypeSignature)visitFormalTypeParametervisitFormalTypeParameter(sun.reflect.generics.tree.FormalTypeParameter)getResultgetResult()make(sun.reflect.generics.factory.GenericsFactory)TypeTreeVisitorVisitorTypeTreeVisitor<T>visitMethodTypeSignaturevisitMethodTypeSignature(sun.reflect.generics.tree.MethodTypeSignature)visitClassSignaturevisitClassSignature(sun.reflect.generics.tree.ClassSignature)sun.security.utilDebug/modules/java.base/sun/security/util/Debug.class/modules/java.base/sun/security/util/modules/java.base/sun/securitytoString(java.math.BigInteger)toString(byte[])toHexString(java.math.BigInteger)getPrintStreamgetPrintStream()println(java.lang.String,java.lang.String)println(java.lang.Object,java.lang.String)isVerboseisVerbose()isOnisOn(java.lang.String)getInstance(java.lang.String)HelpHelp()Debug()sun.util.localeBaseLocale/modules/java.base/sun/util/locale/BaseLocale.class/modules/java.base/sun/util/locale/modules/java.base/sun/utilgetRegiongetRegion()convertOldISOCodesconvertOldISOCodes(java.lang.String)getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)UnaryOperator<BaseLocale>Function<BaseLocale,BaseLocale>INTERNERSEPNUM_CONSTANTSBaseLocale[]constantBaseLocalesExtension/modules/java.base/sun/util/locale/Extension.classsetValue(java.lang.String)Extension(char,java.lang.String)Extension(char)CaseInsensitiveChar/modules/java.base/sun/util/locale/InternalLocaleBuilder$CaseInsensitiveChar.classCaseInsensitiveChar(char)CaseInsensitiveString/modules/java.base/sun/util/locale/InternalLocaleBuilder$CaseInsensitiveString.classCaseInsensitiveString(java.lang.String)InternalLocaleBuilder/modules/java.base/sun/util/locale/InternalLocaleBuilder.classremovePrivateuseVariantremovePrivateuseVariant(java.lang.String)clearExtensionsclearExtensions()setLocalesetLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)setLanguageTagsetLanguageTag(sun.util.locale.LanguageTag)setExtensionssetExtensions(java.lang.String)setExtensionsetExtension(char,java.lang.String)setUnicodeLocaleKeywordsetUnicodeLocaleKeyword(java.lang.String,java.lang.String)removeUnicodeLocaleAttributeremoveUnicodeLocaleAttribute(java.lang.String)addUnicodeLocaleAttributeaddUnicodeLocaleAttribute(java.lang.String)setVariantsetVariant(java.lang.String)setRegionsetRegion(java.lang.String)setScriptsetScript(java.lang.String)setLanguagesetLanguage(java.lang.String)InternalLocaleBuilder()LanguageTag/modules/java.base/sun/util/locale/LanguageTag.classcanonicalizePrivateuseSubtagcanonicalizePrivateuseSubtag(java.lang.String)canonicalizePrivateusecanonicalizePrivateuse(java.lang.String)canonicalizeExtensionSubtagcanonicalizeExtensionSubtag(java.lang.String)canonicalizeExtensionSingletoncanonicalizeExtensionSingleton(java.lang.String)canonicalizeExtensioncanonicalizeExtension(java.lang.String)canonicalizeVariantcanonicalizeVariant(java.lang.String)canonicalizeRegioncanonicalizeRegion(java.lang.String)canonicalizeScriptcanonicalizeScript(java.lang.String)canonicalizeExtlangcanonicalizeExtlang(java.lang.String)canonicalizeLanguagecanonicalizeLanguage(java.lang.String)isPrivateuseSubtagisPrivateuseSubtag(java.lang.String)isPrivateusePrefixCharisPrivateusePrefixChar(char)isPrivateusePrefixisPrivateusePrefix(java.lang.String)isExtensionSubtagisExtensionSubtag(java.lang.String)isExtensionSingletonCharisExtensionSingletonChar(char)isExtensionSingletonisExtensionSingleton(java.lang.String)isVariantisVariant(java.lang.String)isRegionisRegion(java.lang.String)isScriptisScript(java.lang.String)isExtlangisExtlang(java.lang.String)isLanguageisLanguage(java.lang.String)getPrivateusegetPrivateuse()getExtensionsgetExtensions()getVariantsgetVariants()getExtlangsgetExtlangs()parseLocaleparseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)caseFoldTagcaseFoldTag(java.lang.String)parse(java.lang.String,sun.util.locale.ParseStatus)PRIVUSE_VARIANT_PREFIXUNDETERMINEDPRIVATEUSELocaleExtensions/modules/java.base/sun/util/locale/LocaleExtensions.classisValidUnicodeLocaleKeyisValidUnicodeLocaleKey(java.lang.String)isValidKeyisValidKey(char)getExtensionValuegetExtensionValue(java.lang.Character)getExtension(java.lang.Character)Map<CaseInsensitiveChar,String>Set<CaseInsensitiveString>Collection<CaseInsensitiveString>Iterable<CaseInsensitiveString>Map<CaseInsensitiveString,String>LocaleExtensions(java.util.Map,java.util.Set,java.util.Map)NUMBER_THAICALENDAR_JAPANESELocaleSyntaxException/modules/java.base/sun/util/locale/LocaleSyntaxException.classLocaleSyntaxException(java.lang.String,int)LocaleSyntaxException(java.lang.String)ParseStatus/modules/java.base/sun/util/locale/ParseStatus.classgetErrorMessagegetErrorMessage()getParseLengthgetParseLength()ParseStatus()errorMsgparseLength/Users/thida/ftp/gradle-project-demo/demo/trap/java/diagnostics/diagnostic-1.trap.gz--jdk-version--javac-args@@@/Users/thida/ftp/gradle-project-demo/demo/log/ext/javac-1.args-Xprefer:source-source-target-d-h/Users/thida/ftp/gradle-project-demo/app/build/generated/sources/headers/java/test-g-sourcepath-proc:none-s/Users/thida/ftp/gradle-project-demo/app/build/generated/sources/annotationProcessor/java/test-XDuseUnsharedTable=true-classpath/Users/thida/ftp/gradle-project-demo/app/build/classes/java/main:/Users/thida/ftp/gradle-project-demo/app/build/resources/main:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-core/1.16.0/5db73f03af4b8201a110606e0d1a8fdb6b93a381/nifi-framework-core-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-recipes/5.2.0/477c28fdc25eb5d59759d8e931be191f11068f4a/curator-recipes-5.2.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-framework/5.2.0/dffcfb521d99b9b7515f7b6041badac62910075e/curator-framework-5.2.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-client/5.2.0/221dde476d45c328da9a08e0671edc4ee654ccb4/curator-client-5.2.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-flowfile-repo-serialization/1.16.0/80d436688210d499a36e6ab864841e1165f27f2f/nifi-flowfile-repo-serialization-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-authorizer/1.16.0/f06a4b69c0410378acd33efb92d7215906bb62b6/nifi-authorizer-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-properties-loader/1.16.0/efe5e3d31b1f284e4c761597dedc691e2e99c12/nifi-properties-loader-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-factory/1.16.0/a84fc209bc861ae8835aabbc974a24e6c3d45aeb/nifi-property-protection-factory-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-gcp/1.16.0/3b3390243b4dbeb55ecef53922475dda43a77ab6/nifi-property-protection-gcp-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.cloud/google-cloud-kms/2.3.0/4e9f44be51e8e672612ffc4ef7a1da0031a46de1/google-cloud-kms-2.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/33.3.1-jre/852f8b363da0111e819460021ca693cacca3e8db/guava-33.3.1-jre.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-administration/1.16.0/cb4dde981259ed99eb3d650e959374bee93ccbe4/nifi-administration-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-h2-database-migrator/1.16.0/7cee1c01f1851ae0830ee6494d5566080113e13c/nifi-h2-database-migrator-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.h2database/h2/2.1.210/a7395ae43062f9237eb441137b789c518c7d4c2f/h2-2.1.210.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.zookeeper/zookeeper/3.5.9/3b0e8eaff97fce87075c02fd764e4f2d04996f31/zookeeper-3.5.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-handler/4.1.50.Final/dc0110fc4d22fb22f1038cd73a6f8a034928a2d7/netty-handler-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-epoll/4.1.50.Final/480ab17c1ebfb32fcd493577d3e3241dc56e62f4/netty-transport-native-epoll-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec/4.1.50.Final/cbcb646c9380c6cdc3f56603ae6418a11418ce0f/netty-codec-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-unix-common/4.1.50.Final/87b98225422fccf2bf113e169c45e683de200a3e/netty-transport-native-unix-common-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport/4.1.50.Final/2e4f6b655933faca0deef8d234ac6725b598109a/netty-transport-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-resolver/4.1.50.Final/deb87b3c901142d73279a58e16867cf6f2b1c2e5/netty-resolver-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-buffer/4.1.50.Final/42b556977c572a376172a3270537ee22203c1a35/netty-buffer-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-common/4.1.117.Final/9e074a4382f56b37f3b9ee1fc21d53e7af58ec9d/netty-common-4.1.117.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.amazon.redshift/redshift-jdbc42/2.1.0.31/a68af623c016781f8471719e60cb63b5dcdcd5d7/redshift-jdbc42-2.1.0.31.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.2/8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12/junit-4.13.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api.grpc/proto-google-cloud-kms-v1/0.94.0/392178c79a8b763613f4b3de0eda4f95d47bca5b/proto-google-cloud-kms-v1-0.94.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.guava/failureaccess/1.0.2/c4a06a64e650562f30b7bf9aaec1bfed43aca12b/failureaccess-1.0.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/b421526c5f297295adef1c886e5246c39d4ac629/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.github.ben-manes.caffeine/caffeine/2.8.1/2231c0c42261bdf144e2bde47332b72467f375cf/caffeine-2.8.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.checkerframework/checker-qual/3.43.0/9425eee39e56b116d2b998b7c2cebcbd11a3c98b/checker-qual-3.43.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.errorprone/error_prone_annotations/2.28.0/59fc00087ce372de42e394d2c789295dff2d19f0/error_prone_annotations-2.28.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.j2objc/j2objc-annotations/3.0.0/7399e65dd7e9ff3404f4535b2f017093bdb134c7/j2objc-annotations-3.0.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-components/1.16.0/2ec49836a1f3b5d80225b6a372376ab641552f6a/nifi-framework-components-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-site-to-site/1.16.0/111e247d471ae2e2542f14a033626947597fc05c/nifi-site-to-site-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-cluster-protocol/1.16.0/bfff915343ef193d7ef793b49c772029763100c6/nifi-framework-cluster-protocol-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-core-api/1.16.0/d48294f7c54bcf5d430c8a541519a44e7a125c80/nifi-framework-core-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-authorization-providers/1.16.0/64e8b02a271318a0f2ded3543817839678a1637e/nifi-framework-authorization-providers-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-expression-language/1.16.0/5bdb8aab1ec18a04f55a6c40d59701b9141143cf/nifi-expression-language-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-repository-models/1.16.0/14c41b0981f6fdcaa462a73fdf30b9288c928dc9/nifi-repository-models-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-site-to-site-client/1.16.0/8a047498ed53c449db5b75e7bbb601ae2b2ab5ff/nifi-site-to-site-client-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-data-provenance-utils/1.16.0/ccf97c126cfc2b0a15cc4e2a7986a0139c3088be/nifi-data-provenance-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-write-ahead-log/1.16.0/bfa245058cb9fe3ff01809836d1a828c3f1883df/nifi-write-ahead-log-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-repository-encryption/1.16.0/170cabe08e277bf1fa9f9be8b38e74147811567d/nifi-repository-encryption-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-encryptor/1.16.0/ccb8d23b2506c53bf4de3024cca74dbff0221baa/nifi-property-encryptor-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-socket-utils/1.16.0/a8a701f7167b2106146268d7369db953994d6488/nifi-socket-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-security-utils/1.16.0/e2ccd94398f518ef596930e6f74beafc525e515f/nifi-security-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-hashicorp/1.16.0/80698bebdbbd158a66618167b7518d47cf7f7abf/nifi-property-protection-hashicorp-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-vault-utils/1.16.0/c925d952054de29089510ce8145b9b2c7d383f1b/nifi-vault-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-utils/1.16.0/798a945738dfdf5a99ae153a08e8454da48e3913/nifi-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-schema-utils/1.16.0/80f5d23942d1119cb113d3f18a8a895c2b55b3c0/nifi-schema-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-security-kms/1.16.0/a82b360df1c7d235951641ca1a6adc818c56f5b/nifi-security-kms-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-logging-utils/1.16.0/446bc63a48af1fdcdf696d145451b72da4e7836b/nifi-logging-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-client-dto/1.16.0/967aec482ecb8af05fb0a9918755fda34528e29b/nifi-client-dto-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-authorization/1.16.0/ee2847b026281d27af6a59271a2aaf8b843da1c7/nifi-framework-authorization-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-client/1.16.0/4fe81b3359d40002c7546f1d144ea63c7ca9df18/nifi-registry-client-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-security-utils/1.16.0/b783c1ccafa3925b9fec835c04be5e0b082780f7/nifi-registry-security-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-web-utils/1.16.0/8cb1b31786a646896522dae0dcbf5d9ce2f375fa/nifi-web-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.core/jersey-client/2.35/ea92be0dd34d0b298930a7514e715783f4eaba97/jersey-client-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework.vault/spring-vault-core/2.3.2/72995dda1a77a457652b946a5a42dbd5b0f3d26b/spring-vault-core-2.3.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/5.3.16/efb9c749b335bf62dc07c1674e9d76d382a027e5/spring-context-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/5.3.16/d61c0545e0395de608be52db1cccb60ba841a26b/spring-aop-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/5.3.16/224ae9b45e138034980a423e2f85d7bd63539a49/spring-web-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.3.16/15decec5cea7a91423272daaae6f5d050c23cf3b/spring-beans-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/5.3.16/831a17ce70686c571f3c05c4bcfb81012c5814df/spring-expression-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/5.3.16/db1b277cd548c725144580dda8703ce179fb3769/spring-core-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/commons-io/commons-io/2.10.0/79384da84646660c57b89aa86a5a1eb98af50e00/commons-io-2.10.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-math3/3.6.1/e4ba98f1d4b3c80ec46392f25e094a6a2e58fcbf/commons-math3-3.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.questdb/questdb/6.2.1-jdk8/bd12b08f28f834100b9010e55e64592c1342311b/questdb-6.2.1-jdk8.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-rocksdb-utils/1.16.0/b52c114f96928c8af1ab947824caa01fd95f6319/nifi-rocksdb-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-flow-diff/1.16.0/df9afe39bf19f9933e3c9f3194bfb2c609228561/nifi-registry-flow-diff-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-data-model/1.16.0/5c35b95b8e898db94a40d91f2dbbd035af5913b5/nifi-registry-data-model-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.media/jersey-media-json-jackson/2.35/6383927e15ecb4baeef2cf0d3373b1ff1795c062/jersey-media-json-jackson-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-azure/1.16.0/f480c58353c126aa032d64cd71f53f6f3edad88d/nifi-property-protection-azure-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-security-keyvault-secrets/4.3.3/1b24ebc2744feaffbcdd89294b93ec43c630229f/azure-security-keyvault-secrets-4.3.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-security-keyvault-keys/4.3.3/600e4755c0b0d68e090f7062e03c9d8e58ce11d8/azure-security-keyvault-keys-4.3.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-identity/1.3.4/8c2348e1f72e0abc4f15d1f613c87635cebee192/azure-identity-1.3.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-core-http-okhttp/1.7.1/d4c868689ca9ea937aa69f0db810200e629843fa/azure-core-http-okhttp-1.7.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-core/1.20.0/a98c6bd18aa2066ecd8b39bf7ac51bd8e7307851/azure-core-1.20.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.datatype/jackson-datatype-jsr310/2.13.1/1ece5a87b59701328215e0083448b4d451857cbd/jackson-datatype-jsr310-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.13.1/bcc5e3a3056e6e98020856b52e53895ad5fdfc4b/jackson-dataformat-xml-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.13.1/1cbcbe4623113e6af92ccaa89884a345270f1a87/jackson-annotations-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.13.1/63de86abf14db6ef940b21a50eaf5cadce0a6627/jackson-module-jaxb-annotations-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-nar-utils/1.16.0/bbd48c0f4a6cebaaf940c547ff12ee8cdcab5bdd/nifi-framework-nar-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-runtime-manifest-core/1.16.0/13ac7e69bccb60f9202d31bd30e4da050ded3086/nifi-runtime-manifest-core-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-aws/1.16.0/34d7a444b94383b93c73d579e3c23508e6b90899/nifi-property-protection-aws-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.microsoft.azure/msal4j-persistence-extension/1.1.0/be693563e6c941cd830bf5e19ec850cef80a5bb1/msal4j-persistence-extension-1.1.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.microsoft.azure/msal4j/1.10.1/1623b8690cfff4622a1d5ad4b6d85290ce1d4d69/msal4j-1.10.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.13.1/698b2d2b15d9a1b7aae025f1d9f576842285e7f6/jackson-databind-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.13.1/51ae921a2ed1e06ca8876f12f32f265e83c0b2b8/jackson-core-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-parameter/1.16.0/1e233abacaabab5cd1b615173fe873b7ff4dd805/nifi-parameter-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-uuid5/1.16.0/846877da6ce535ef3a9a62291a2e29808bbd7b04/nifi-uuid5-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-configuration2/2.7/593326399e5fb5e1f986607f06f63c1250ab36b4/commons-configuration2-2.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-text/1.8/879a6bde4c0537a25504c72ec7a94ba4099f469c/commons-text-1.8.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-lang3/3.12.0/c6842c86792ff03b9f1d1fe2aab8dc23aa6c6f0e/commons-lang3-3.12.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-shared/1.16.0/c19cf1a4896628f7e913a307e8aa9483bcec07e1/nifi-property-protection-shared-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-cipher/1.16.0/849d4831c1597bf184722404773ee23700ec77f1/nifi-property-protection-cipher-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-api/1.16.0/22d47824f65eebd05d2261c16900c46ea3dd854b/nifi-property-protection-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-api/1.16.0/9760c31156580990040d783edf1f0cd5044513d3/nifi-framework-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.quartz-scheduler/quartz/2.3.2/18a6d6b5a40b77bd060b34cb9f2acadc4bae7c8a/quartz-2.3.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.antlr/antlr-runtime/3.5.2/cd9cd41361c155f3af0f653009dcecb08d8b4afd/antlr-runtime-3.5.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-api/1.16.0/77f08c2d0c6fd4403a5229d9f0a059c44ee9d15d/nifi-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.jayway.jsonpath/json-path/2.6.0/67f565b424f7903a12d4f5b9361b11462ecacdac/json-path-2.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpasyncclient/4.1.4/f3a3240681faae3fa46b573a4c7e50cec9db0d86/httpasyncclient-4.1.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.13/e5f6cae5ca7ecaac1ec2827a9e2d65ae2869cada/httpclient-4.5.13.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.15/49d94806b6e3dc933dacbd8acb0fdbab8ebd1e5d/commons-codec-1.15.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-properties/1.16.0/ba014a0ba8ac573b89c3d179cd4738af0f74b35d/nifi-properties-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/c2-protocol-component-api/1.16.0/272ac65a01feea15ee160eb5fcc0983683599c28/c2-protocol-component-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-revision-entity-model/1.16.0/cfb16dc90291eb4326673afb0ed3a39c9540e730/nifi-registry-revision-entity-model-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-extension-manifest-parser/1.16.0/63606abd2116d9a8eea4d8fe08bbce0eb7348aaf/nifi-extension-manifest-parser-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-extension-manifest-model/1.16.0/e2ecb8412d4135b6676986cdd3b52a2c8203a7d6/nifi-extension-manifest-model-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.swagger/swagger-annotations/1.6.0/158dfa5430ff4b96a03e936a2ad1cb2f376a8c1a/swagger-annotations-1.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-user-actions/1.16.0/8525a7fefe7eba434023e6b26e461202e1e109fe/nifi-user-actions-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.aspectj/aspectjweaver/1.9.6/ee3b73aa16df35179255f17354d9dfd8e7822835/aspectjweaver-1.9.6.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework.security/spring-security-core/5.6.2/8977671e16f50dc43b29802fc21e676bef579ba4/spring-security-core-5.6.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-collections4/4.4/62ebe7544cb7164d87e0637a2a6a2bdc981395e8/commons-collections4-4.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.inject/jersey-hk2/2.35/2be6d2227081028566e8e2b0fc6a1abbaecf56f7/jersey-hk2-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.media/jersey-media-multipart/2.35/5181de4ae2c81147cb788e946e96c06a9765e84f/jersey-media-multipart-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.core/jersey-common/2.35/2f15ec1b3a3598d6b12d4b0c6ff6f0905f5e5b4c/jersey-common-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.ext/jersey-entity-filtering/2.35/2fbe9e89f6597e10976d1431dde64b282a761aeb/jersey-entity-filtering-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.ws.rs/jakarta.ws.rs-api/2.1.6/1dcb770bce80a490dff49729b99c7a60e9ecb122/jakarta.ws.rs-api-2.1.6.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-locator/2.6.1/9dedf9d2022e38ec0743ed44c1ac94ad6149acdd/hk2-locator-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-api/2.6.1/114bd7afb4a1bd9993527f52a08a252b5d2acac5/hk2-api-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-utils/2.6.1/396513aa96c1d5a10aa4f75c4dcbf259a698d62d/hk2-utils-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2.external/jakarta.inject/2.6.1/8096ebf722902e75fbd4f532a751e514f02e1eb7/jakarta.inject-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jcl/5.3.16/18d422952e0ce534c2b0ac8b47176c2432fb7e78/spring-jcl-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.rocksdb/rocksdbjni/6.6.4/c0a678885999bdca1bca8ee1226ecc2b9aec7596/rocksdbjni-6.6.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.zookeeper/zookeeper-jute/3.5.9/9f14e67a10bfe1ff02347c02116ab4ca03febb6f/zookeeper-jute-3.5.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.yetus/audience-annotations/0.5.0/55762d3191a8d6610ef46d11e8cb70c7667342a3/audience-annotations-0.5.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.zaxxer/HikariCP-java7/2.4.13/3e441eddedb374d4de8e3abbb0c90997f51cc97b/HikariCP-java7-2.4.13.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/url-connection-client/2.17.106/d205d73bd3cb43ff87598a9a271fd53aabf54e7/url-connection-client-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/kms/2.17.106/ab68a9febae4de915cd7f843a8a2bb921799624a/kms-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/secretsmanager/2.17.106/154909b2976ef870ea60baf3384ea551b00aada/secretsmanager-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/aws-json-protocol/2.17.106/48655259903ac81c85f4ee33fb3f6674465cadde/aws-json-protocol-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/protocol-core/2.17.106/3a431f5151ef4dcb3385a4c9b9abb41563d506a2/protocol-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/aws-core/2.17.106/c4081fc406984259eea5ab0dc411399589c0a312/aws-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/auth/2.17.106/5a0f7711b5a6515a944230c9efaec1dfc913ed80/auth-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/regions/2.17.106/66a3297f38c43af56a26a3756099c76288db6907/regions-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/sdk-core/2.17.106/e39caa6a70612dc569ea14c2b051cda99b1d29af/sdk-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/http-client-spi/2.17.106/41d89ec43e698653da6c3d1dc8356398059cd6db/http-client-spi-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/metrics-spi/2.17.106/4efc222c564d72d4fc5c93bfe20072fdadeee23/metrics-spi-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/json-utils/2.17.106/9f353c061c75140da98cc6ff5320347ad8c848d4/json-utils-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/profiles/2.17.106/16fab6f5b88653842e322007fc57de203fe99144/profiles-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/utils/2.17.106/15c576d95367773933a30906f8075ed0ea34ff0/utils-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.32/cdcff33940d9f2de763bc41ea05a0be5941176c3/slf4j-api-1.7.32.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/2.0.1.Final/cb855558e6271b1b32e716d24cb85c7f583ce09e/validation-api-2.0.1.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/javax.ws.rs/javax.ws.rs-api/2.1/426a0862406536e690c7caa8bb6ed32191986fac/javax.ws.rs-api-2.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-security-utils-api/1.16.0/9a234bc150c2f008ec643fef481636bef9eedb73/nifi-security-utils-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/at.favre.lib/bcrypt/0.9.0/50cca88b852b579c3ce3381688a92c718ffede1b/bcrypt-0.9.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-utils/1.16.0/a04ad250177b1f7dd7df632d25dd31ba267a849c/nifi-property-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.mchange/c3p0/0.9.5.4/a21a1d37ae0b59efce99671544f51c34ed1e8def/c3p0-0.9.5.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.mchange/mchange-commons-java/0.2.15/6ef5abe5f1b94ac45b7b5bad42d871da4fda6bbc/mchange-commons-java-0.2.15.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/oauth2-oidc-sdk/9.7/a6125f3ea3649d590d3ff29b8e7975f7fa018271/oauth2-oidc-sdk-9.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.minidev/json-smart/2.4.7/8d7f4c1530c07c54930935f3da85f48b83b3c109/json-smart-2.4.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/commons-net/commons-net/3.6/b71de00508dcb078d2b24b5fa7e538636de9b3da/commons-net-3.6.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/2.3.3/48e3b9cfc10752fba3521d6511f4165bea951801/jakarta.xml.bind-api-2.3.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/1.2.2/99f53adba383cb1bf7c3862844488574b559621f/jakarta.activation-api-1.2.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore-nio/4.4.10/486f90c2af9bb81c51e8fb905647267053d5441/httpcore-nio-4.4.10.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.14/9dd1a631c082d92ecd4bd8fd4cf55026c720a8c1/httpcore-4.4.14.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-h2-database/1.16.0/b8b8eb39641680d3f78406381b4e9ffce9f2270a/nifi-h2-database-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework.security/spring-security-crypto/5.6.2/5269573116427e6a580f7c3eac8e6b687baff85f/spring-security-crypto-5.6.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.annotation/jakarta.annotation-api/1.3.5/59eb84ee0d616332ff44aba065f3888cf002cd2d/jakarta.annotation-api-1.3.5.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/osgi-resource-locator/1.0.3/de3b21279df7e755e38275137539be5e2c80dd58/osgi-resource-locator-1.0.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.25.0-GA/442dc1f9fd520130bd18da938622f4f9b2e5fba3/javassist-3.25.0-GA.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jvnet.mimepull/mimepull/1.9.13/a4f12d0da986cae55dd5c4a735b4fefc700eb266/mimepull-1.9.13.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/at.favre.lib/bytes/1.3.0/49be3deb54a48744bbab869bc9b636c81d255d30/bytes-1.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.minidev/accessors-smart/2.4.7/3970cfc505e6657ca60f3aa57c849f6043000d7a/accessors-smart-2.4.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2.external/aopalliance-repackaged/2.6.1/b2eb0a83bcbb44cc5d25f8b18f23be116313a638/aopalliance-repackaged-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/annotations/2.17.106/6e6925a8c21575c2e19867ef88637cae3020caa5/annotations-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.java.dev.jna/jna-platform/5.6.0/d18424ffb8bbfd036d71bcaab9b546858f2ef986/jna-platform-5.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.8.1/dd36d61fbfa0a33c805e3d92f64e0832234c56c6/okhttp-4.8.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-api/1.42.1/4a7f734f57ad5b68e4ac591481eb562cdb3d2a94/grpc-api-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-context/1.42.1/c0cc9e5e08ced39792908aeda77e694bff39cea1/grpc-context-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-stub/1.42.1/6fa0c2fb4ff581c89b4aab2d47fb2b568503f630/grpc-stub-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-protobuf/1.42.1/374d43968ef44fdf7105ad304e3f859d7a17471b/grpc-protobuf-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-protobuf-lite/1.42.1/8119b67e3ff9f4d0def3054037d260c26c69adb8/grpc-protobuf-lite-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api/api-common/2.1.1/2eef95ab13b5bf7915408df2e3bc4c73736cd42c/api-common-2.1.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/javax.annotation/javax.annotation-api/1.3.2/934c04d3cfef185a8008e7bf34331b79730a9d43/javax.annotation-api-1.3.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.protobuf/protobuf-java/3.19.1/d6840043a0a9b1b62ec040a2e98b816b5cc944f/protobuf-java-3.19.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api.grpc/proto-google-common-protos/2.7.0/b89a09270e6681417e7f6bede09fc006de0d977f/proto-google-common-protos-2.7.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api/gax/2.7.1/113bee04813baeb2302de70f204aab69f3e7621a/gax-2.7.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.auth/google-auth-library-credentials/1.3.0/8e085f0a36301395052d1adc26befd4bc0b80d3e/google-auth-library-credentials-1.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api/gax-grpc/2.7.1/60fef9e181ccdd86d88c3885796024ed01a14b4c/gax-grpc-2.7.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.threeten/threetenbp/1.5.2/9aec3509609fc41f29ddc46119a124b8659e2c25/threetenbp-1.5.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-auth/1.42.1/130f19ed48f11a44ad4c188d77af4dfb4400ebe3/grpc-auth-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api.grpc/proto-google-iam-v1/1.1.7/9e2d92d3109c14b0f1df68d5165fd9366f8a9f98/proto-google-iam-v1-1.1.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.auth/google-auth-library-oauth2-http/1.3.0/fb9d88528fe8061230d3a7cb1f2d0ab2423976ae/google-auth-library-oauth2-http-1.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.auto.value/auto-value-annotations/1.8.2/546ae662e646e47a544ef68ebb43987a3146b692/auto-value-annotations-1.8.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.http-client/google-http-client/1.40.1/23e18f41fe9280eee4a6c43790ae3e89ed4d2759/google-http-client-1.40.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.opencensus/opencensus-api/0.28.0/fc0d06a9d975a38c581dff59b99cf31db78bd99/opencensus-api-0.28.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.opencensus/opencensus-contrib-http-util/0.28.0/f6cb276330197d51dd65327fc305a3df7e622705/opencensus-contrib-http-util-0.28.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.http-client/google-http-client-gson/1.40.1/3c9ce115e5f9c19bd16585a281140fc8c95e5b1f/google-http-client-gson-1.40.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.code.gson/gson/2.8.9/8a432c1d6825781e21a02db2e2c33c5fde2833b9/gson-2.8.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm/9.1/a99500cf6eea30535eeac6be73899d048f8d12a8/asm-9.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.projectreactor/reactor-core/3.4.9/820332aa7b0fe3a8dfe14f58fc16e49ad178291/reactor-core-3.4.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.reactivestreams/reactive-streams/1.0.3/d9fb7a7926ffa635b3dcaa5049fb2bfa25b3e7d0/reactive-streams-1.0.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/third-party-jackson-core/2.17.106/53c22138036062298a1a559b81293236d1fcae43/third-party-jackson-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.eventstream/eventstream/1.0.1/6ff8649dffc5190366ada897ba8525a836297784/eventstream-1.0.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-tcnative-boringssl-static/2.0.40.Final/6b73a163c13ed76921892d28eb81235f4b41e40a/netty-tcnative-boringssl-static-2.0.40.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.java.dev.jna/jna/5.6.0/330f2244e9030119ab3030fc3fededc86713d9cc/jna-5.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio/2.7.0/1181a029fa94760ccf46f264bc06ca2e60262f8f/okio-jvm-2.7.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.3.72/8032138f12c0180bc4e51fe139d4c52b46db6109/kotlin-stdlib-1.3.72.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.woodstox/woodstox-core/6.2.7/86622cfd0a9933628b6b876d0c92589148d3b42e/woodstox-core-6.2.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.codehaus.woodstox/stax2-api/4.2.1/a3f7325c52240418c2ba257b103c3c550e140c83/stax2-api-4.2.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/nimbus-jose-jwt/9.9.3/b900868993d44beaf90aa9035442912b516fa34f/nimbus-jose-jwt-9.9.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.github.stephenc.jcip/jcip-annotations/1.0-1/ef31541dd28ae2cefdd17c7ebf352d93e9058c63/jcip-annotations-1.0-1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/content-type/2.1/66d618739859bc75ab9643b96a9839ac7802ec90/content-type-2.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/lang-tag/1.5/7e82e3c4c593f85addf4bd209abde4f8ff933a07/lang-tag-1.5.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.3.72/6ca8bee3d88957eaaaef077c41c908c9940492d8/kotlin-stdlib-common-1.3.72.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jarCodeQL Java extractorAppending source destination directory /Users/thida/ftp/gradle-project-demo/app/build/generated/sources/annotationProcessor/java/test to sourcepathAnnotation processors enabled/Users/thida/ftp/gradle-project-demo/demo/trap/java/diagnostics/diagnostic.trap.gz@@@/Users/thida/ftp/gradle-project-demo/demo/log/ext/javac.args/Users/thida/ftp/gradle-project-demo/app/build/generated/sources/headers/java/main/Users/thida/ftp/gradle-project-demo/app/build/generated/sources/annotationProcessor/java/main/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-core/1.16.0/5db73f03af4b8201a110606e0d1a8fdb6b93a381/nifi-framework-core-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-recipes/5.2.0/477c28fdc25eb5d59759d8e931be191f11068f4a/curator-recipes-5.2.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-framework/5.2.0/dffcfb521d99b9b7515f7b6041badac62910075e/curator-framework-5.2.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-client/5.2.0/221dde476d45c328da9a08e0671edc4ee654ccb4/curator-client-5.2.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-flowfile-repo-serialization/1.16.0/80d436688210d499a36e6ab864841e1165f27f2f/nifi-flowfile-repo-serialization-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-authorizer/1.16.0/f06a4b69c0410378acd33efb92d7215906bb62b6/nifi-authorizer-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-properties-loader/1.16.0/efe5e3d31b1f284e4c761597dedc691e2e99c12/nifi-properties-loader-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-factory/1.16.0/a84fc209bc861ae8835aabbc974a24e6c3d45aeb/nifi-property-protection-factory-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-gcp/1.16.0/3b3390243b4dbeb55ecef53922475dda43a77ab6/nifi-property-protection-gcp-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.cloud/google-cloud-kms/2.3.0/4e9f44be51e8e672612ffc4ef7a1da0031a46de1/google-cloud-kms-2.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/33.3.1-jre/852f8b363da0111e819460021ca693cacca3e8db/guava-33.3.1-jre.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-administration/1.16.0/cb4dde981259ed99eb3d650e959374bee93ccbe4/nifi-administration-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-h2-database-migrator/1.16.0/7cee1c01f1851ae0830ee6494d5566080113e13c/nifi-h2-database-migrator-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.h2database/h2/2.1.210/a7395ae43062f9237eb441137b789c518c7d4c2f/h2-2.1.210.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.zookeeper/zookeeper/3.5.9/3b0e8eaff97fce87075c02fd764e4f2d04996f31/zookeeper-3.5.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-handler/4.1.50.Final/dc0110fc4d22fb22f1038cd73a6f8a034928a2d7/netty-handler-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-epoll/4.1.50.Final/480ab17c1ebfb32fcd493577d3e3241dc56e62f4/netty-transport-native-epoll-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec/4.1.50.Final/cbcb646c9380c6cdc3f56603ae6418a11418ce0f/netty-codec-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-unix-common/4.1.50.Final/87b98225422fccf2bf113e169c45e683de200a3e/netty-transport-native-unix-common-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport/4.1.50.Final/2e4f6b655933faca0deef8d234ac6725b598109a/netty-transport-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-resolver/4.1.50.Final/deb87b3c901142d73279a58e16867cf6f2b1c2e5/netty-resolver-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-buffer/4.1.50.Final/42b556977c572a376172a3270537ee22203c1a35/netty-buffer-4.1.50.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-common/4.1.117.Final/9e074a4382f56b37f3b9ee1fc21d53e7af58ec9d/netty-common-4.1.117.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.amazon.redshift/redshift-jdbc42/2.1.0.31/a68af623c016781f8471719e60cb63b5dcdcd5d7/redshift-jdbc42-2.1.0.31.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api.grpc/proto-google-cloud-kms-v1/0.94.0/392178c79a8b763613f4b3de0eda4f95d47bca5b/proto-google-cloud-kms-v1-0.94.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.guava/failureaccess/1.0.2/c4a06a64e650562f30b7bf9aaec1bfed43aca12b/failureaccess-1.0.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/b421526c5f297295adef1c886e5246c39d4ac629/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.2/25ea2e8b0c338a877313bd4672d3fe056ea78f0d/jsr305-3.0.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.github.ben-manes.caffeine/caffeine/2.8.1/2231c0c42261bdf144e2bde47332b72467f375cf/caffeine-2.8.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.checkerframework/checker-qual/3.43.0/9425eee39e56b116d2b998b7c2cebcbd11a3c98b/checker-qual-3.43.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.errorprone/error_prone_annotations/2.28.0/59fc00087ce372de42e394d2c789295dff2d19f0/error_prone_annotations-2.28.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.j2objc/j2objc-annotations/3.0.0/7399e65dd7e9ff3404f4535b2f017093bdb134c7/j2objc-annotations-3.0.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-components/1.16.0/2ec49836a1f3b5d80225b6a372376ab641552f6a/nifi-framework-components-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-site-to-site/1.16.0/111e247d471ae2e2542f14a033626947597fc05c/nifi-site-to-site-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-cluster-protocol/1.16.0/bfff915343ef193d7ef793b49c772029763100c6/nifi-framework-cluster-protocol-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-core-api/1.16.0/d48294f7c54bcf5d430c8a541519a44e7a125c80/nifi-framework-core-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-authorization-providers/1.16.0/64e8b02a271318a0f2ded3543817839678a1637e/nifi-framework-authorization-providers-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-expression-language/1.16.0/5bdb8aab1ec18a04f55a6c40d59701b9141143cf/nifi-expression-language-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-repository-models/1.16.0/14c41b0981f6fdcaa462a73fdf30b9288c928dc9/nifi-repository-models-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-site-to-site-client/1.16.0/8a047498ed53c449db5b75e7bbb601ae2b2ab5ff/nifi-site-to-site-client-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-data-provenance-utils/1.16.0/ccf97c126cfc2b0a15cc4e2a7986a0139c3088be/nifi-data-provenance-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-write-ahead-log/1.16.0/bfa245058cb9fe3ff01809836d1a828c3f1883df/nifi-write-ahead-log-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-repository-encryption/1.16.0/170cabe08e277bf1fa9f9be8b38e74147811567d/nifi-repository-encryption-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-encryptor/1.16.0/ccb8d23b2506c53bf4de3024cca74dbff0221baa/nifi-property-encryptor-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-socket-utils/1.16.0/a8a701f7167b2106146268d7369db953994d6488/nifi-socket-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-security-utils/1.16.0/e2ccd94398f518ef596930e6f74beafc525e515f/nifi-security-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-hashicorp/1.16.0/80698bebdbbd158a66618167b7518d47cf7f7abf/nifi-property-protection-hashicorp-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-vault-utils/1.16.0/c925d952054de29089510ce8145b9b2c7d383f1b/nifi-vault-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-utils/1.16.0/798a945738dfdf5a99ae153a08e8454da48e3913/nifi-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-schema-utils/1.16.0/80f5d23942d1119cb113d3f18a8a895c2b55b3c0/nifi-schema-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-security-kms/1.16.0/a82b360df1c7d235951641ca1a6adc818c56f5b/nifi-security-kms-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-logging-utils/1.16.0/446bc63a48af1fdcdf696d145451b72da4e7836b/nifi-logging-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-client-dto/1.16.0/967aec482ecb8af05fb0a9918755fda34528e29b/nifi-client-dto-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-authorization/1.16.0/ee2847b026281d27af6a59271a2aaf8b843da1c7/nifi-framework-authorization-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-client/1.16.0/4fe81b3359d40002c7546f1d144ea63c7ca9df18/nifi-registry-client-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-security-utils/1.16.0/b783c1ccafa3925b9fec835c04be5e0b082780f7/nifi-registry-security-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.70/f81e5af49571a9d5a109a88f239a73ce87055417/bcpkix-jdk15on-1.70.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcutil-jdk15on/1.70/54280e7195a7430d7911ded93fc01e07300b9526/bcutil-jdk15on-1.70.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.70/4636a0d01f74acaf28082fb62b317f1080118371/bcprov-jdk15on-1.70.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-web-utils/1.16.0/8cb1b31786a646896522dae0dcbf5d9ce2f375fa/nifi-web-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.core/jersey-client/2.35/ea92be0dd34d0b298930a7514e715783f4eaba97/jersey-client-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework.vault/spring-vault-core/2.3.2/72995dda1a77a457652b946a5a42dbd5b0f3d26b/spring-vault-core-2.3.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/5.3.16/efb9c749b335bf62dc07c1674e9d76d382a027e5/spring-context-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/5.3.16/d61c0545e0395de608be52db1cccb60ba841a26b/spring-aop-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/5.3.16/224ae9b45e138034980a423e2f85d7bd63539a49/spring-web-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.3.16/15decec5cea7a91423272daaae6f5d050c23cf3b/spring-beans-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/5.3.16/831a17ce70686c571f3c05c4bcfb81012c5814df/spring-expression-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/5.3.16/db1b277cd548c725144580dda8703ce179fb3769/spring-core-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/commons-io/commons-io/2.10.0/79384da84646660c57b89aa86a5a1eb98af50e00/commons-io-2.10.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-math3/3.6.1/e4ba98f1d4b3c80ec46392f25e094a6a2e58fcbf/commons-math3-3.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.questdb/questdb/6.2.1-jdk8/bd12b08f28f834100b9010e55e64592c1342311b/questdb-6.2.1-jdk8.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-rocksdb-utils/1.16.0/b52c114f96928c8af1ab947824caa01fd95f6319/nifi-rocksdb-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-flow-diff/1.16.0/df9afe39bf19f9933e3c9f3194bfb2c609228561/nifi-registry-flow-diff-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-data-model/1.16.0/5c35b95b8e898db94a40d91f2dbbd035af5913b5/nifi-registry-data-model-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.media/jersey-media-json-jackson/2.35/6383927e15ecb4baeef2cf0d3373b1ff1795c062/jersey-media-json-jackson-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-azure/1.16.0/f480c58353c126aa032d64cd71f53f6f3edad88d/nifi-property-protection-azure-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-security-keyvault-secrets/4.3.3/1b24ebc2744feaffbcdd89294b93ec43c630229f/azure-security-keyvault-secrets-4.3.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-security-keyvault-keys/4.3.3/600e4755c0b0d68e090f7062e03c9d8e58ce11d8/azure-security-keyvault-keys-4.3.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-identity/1.3.4/8c2348e1f72e0abc4f15d1f613c87635cebee192/azure-identity-1.3.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-core-http-okhttp/1.7.1/d4c868689ca9ea937aa69f0db810200e629843fa/azure-core-http-okhttp-1.7.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.azure/azure-core/1.20.0/a98c6bd18aa2066ecd8b39bf7ac51bd8e7307851/azure-core-1.20.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.datatype/jackson-datatype-jsr310/2.13.1/1ece5a87b59701328215e0083448b4d451857cbd/jackson-datatype-jsr310-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.13.1/bcc5e3a3056e6e98020856b52e53895ad5fdfc4b/jackson-dataformat-xml-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.13.1/1cbcbe4623113e6af92ccaa89884a345270f1a87/jackson-annotations-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.13.1/63de86abf14db6ef940b21a50eaf5cadce0a6627/jackson-module-jaxb-annotations-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-nar-utils/1.16.0/bbd48c0f4a6cebaaf940c547ff12ee8cdcab5bdd/nifi-framework-nar-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-runtime-manifest-core/1.16.0/13ac7e69bccb60f9202d31bd30e4da050ded3086/nifi-runtime-manifest-core-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-aws/1.16.0/34d7a444b94383b93c73d579e3c23508e6b90899/nifi-property-protection-aws-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.microsoft.azure/msal4j-persistence-extension/1.1.0/be693563e6c941cd830bf5e19ec850cef80a5bb1/msal4j-persistence-extension-1.1.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.microsoft.azure/msal4j/1.10.1/1623b8690cfff4622a1d5ad4b6d85290ce1d4d69/msal4j-1.10.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.13.1/698b2d2b15d9a1b7aae025f1d9f576842285e7f6/jackson-databind-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.13.1/51ae921a2ed1e06ca8876f12f32f265e83c0b2b8/jackson-core-2.13.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-parameter/1.16.0/1e233abacaabab5cd1b615173fe873b7ff4dd805/nifi-parameter-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-uuid5/1.16.0/846877da6ce535ef3a9a62291a2e29808bbd7b04/nifi-uuid5-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-configuration2/2.7/593326399e5fb5e1f986607f06f63c1250ab36b4/commons-configuration2-2.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-text/1.8/879a6bde4c0537a25504c72ec7a94ba4099f469c/commons-text-1.8.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-lang3/3.12.0/c6842c86792ff03b9f1d1fe2aab8dc23aa6c6f0e/commons-lang3-3.12.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-shared/1.16.0/c19cf1a4896628f7e913a307e8aa9483bcec07e1/nifi-property-protection-shared-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-cipher/1.16.0/849d4831c1597bf184722404773ee23700ec77f1/nifi-property-protection-cipher-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-protection-api/1.16.0/22d47824f65eebd05d2261c16900c46ea3dd854b/nifi-property-protection-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-framework-api/1.16.0/9760c31156580990040d783edf1f0cd5044513d3/nifi-framework-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.quartz-scheduler/quartz/2.3.2/18a6d6b5a40b77bd060b34cb9f2acadc4bae7c8a/quartz-2.3.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.antlr/antlr-runtime/3.5.2/cd9cd41361c155f3af0f653009dcecb08d8b4afd/antlr-runtime-3.5.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-api/1.16.0/77f08c2d0c6fd4403a5229d9f0a059c44ee9d15d/nifi-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.jayway.jsonpath/json-path/2.6.0/67f565b424f7903a12d4f5b9361b11462ecacdac/json-path-2.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpasyncclient/4.1.4/f3a3240681faae3fa46b573a4c7e50cec9db0d86/httpasyncclient-4.1.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.13/e5f6cae5ca7ecaac1ec2827a9e2d65ae2869cada/httpclient-4.5.13.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.15/49d94806b6e3dc933dacbd8acb0fdbab8ebd1e5d/commons-codec-1.15.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-properties/1.16.0/ba014a0ba8ac573b89c3d179cd4738af0f74b35d/nifi-properties-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/c2-protocol-component-api/1.16.0/272ac65a01feea15ee160eb5fcc0983683599c28/c2-protocol-component-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi.registry/nifi-registry-revision-entity-model/1.16.0/cfb16dc90291eb4326673afb0ed3a39c9540e730/nifi-registry-revision-entity-model-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-extension-manifest-parser/1.16.0/63606abd2116d9a8eea4d8fe08bbce0eb7348aaf/nifi-extension-manifest-parser-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-extension-manifest-model/1.16.0/e2ecb8412d4135b6676986cdd3b52a2c8203a7d6/nifi-extension-manifest-model-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.swagger/swagger-annotations/1.6.0/158dfa5430ff4b96a03e936a2ad1cb2f376a8c1a/swagger-annotations-1.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-user-actions/1.16.0/8525a7fefe7eba434023e6b26e461202e1e109fe/nifi-user-actions-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.aspectj/aspectjweaver/1.9.6/ee3b73aa16df35179255f17354d9dfd8e7822835/aspectjweaver-1.9.6.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework.security/spring-security-core/5.6.2/8977671e16f50dc43b29802fc21e676bef579ba4/spring-security-core-5.6.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-collections4/4.4/62ebe7544cb7164d87e0637a2a6a2bdc981395e8/commons-collections4-4.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.inject/jersey-hk2/2.35/2be6d2227081028566e8e2b0fc6a1abbaecf56f7/jersey-hk2-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.media/jersey-media-multipart/2.35/5181de4ae2c81147cb788e946e96c06a9765e84f/jersey-media-multipart-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.core/jersey-common/2.35/2f15ec1b3a3598d6b12d4b0c6ff6f0905f5e5b4c/jersey-common-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.ext/jersey-entity-filtering/2.35/2fbe9e89f6597e10976d1431dde64b282a761aeb/jersey-entity-filtering-2.35.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.ws.rs/jakarta.ws.rs-api/2.1.6/1dcb770bce80a490dff49729b99c7a60e9ecb122/jakarta.ws.rs-api-2.1.6.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-locator/2.6.1/9dedf9d2022e38ec0743ed44c1ac94ad6149acdd/hk2-locator-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-api/2.6.1/114bd7afb4a1bd9993527f52a08a252b5d2acac5/hk2-api-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-utils/2.6.1/396513aa96c1d5a10aa4f75c4dcbf259a698d62d/hk2-utils-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2.external/jakarta.inject/2.6.1/8096ebf722902e75fbd4f532a751e514f02e1eb7/jakarta.inject-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jcl/5.3.16/18d422952e0ce534c2b0ac8b47176c2432fb7e78/spring-jcl-5.3.16.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.rocksdb/rocksdbjni/6.6.4/c0a678885999bdca1bca8ee1226ecc2b9aec7596/rocksdbjni-6.6.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.zookeeper/zookeeper-jute/3.5.9/9f14e67a10bfe1ff02347c02116ab4ca03febb6f/zookeeper-jute-3.5.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.yetus/audience-annotations/0.5.0/55762d3191a8d6610ef46d11e8cb70c7667342a3/audience-annotations-0.5.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.zaxxer/HikariCP-java7/2.4.13/3e441eddedb374d4de8e3abbb0c90997f51cc97b/HikariCP-java7-2.4.13.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/url-connection-client/2.17.106/d205d73bd3cb43ff87598a9a271fd53aabf54e7/url-connection-client-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/kms/2.17.106/ab68a9febae4de915cd7f843a8a2bb921799624a/kms-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/secretsmanager/2.17.106/154909b2976ef870ea60baf3384ea551b00aada/secretsmanager-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/aws-json-protocol/2.17.106/48655259903ac81c85f4ee33fb3f6674465cadde/aws-json-protocol-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/protocol-core/2.17.106/3a431f5151ef4dcb3385a4c9b9abb41563d506a2/protocol-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/aws-core/2.17.106/c4081fc406984259eea5ab0dc411399589c0a312/aws-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/auth/2.17.106/5a0f7711b5a6515a944230c9efaec1dfc913ed80/auth-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/regions/2.17.106/66a3297f38c43af56a26a3756099c76288db6907/regions-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/sdk-core/2.17.106/e39caa6a70612dc569ea14c2b051cda99b1d29af/sdk-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/http-client-spi/2.17.106/41d89ec43e698653da6c3d1dc8356398059cd6db/http-client-spi-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/metrics-spi/2.17.106/4efc222c564d72d4fc5c93bfe20072fdadeee23/metrics-spi-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/json-utils/2.17.106/9f353c061c75140da98cc6ff5320347ad8c848d4/json-utils-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/profiles/2.17.106/16fab6f5b88653842e322007fc57de203fe99144/profiles-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/utils/2.17.106/15c576d95367773933a30906f8075ed0ea34ff0/utils-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.32/cdcff33940d9f2de763bc41ea05a0be5941176c3/slf4j-api-1.7.32.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/2.0.1.Final/cb855558e6271b1b32e716d24cb85c7f583ce09e/validation-api-2.0.1.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/javax.ws.rs/javax.ws.rs-api/2.1/426a0862406536e690c7caa8bb6ed32191986fac/javax.ws.rs-api-2.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-security-utils-api/1.16.0/9a234bc150c2f008ec643fef481636bef9eedb73/nifi-security-utils-api-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/at.favre.lib/bcrypt/0.9.0/50cca88b852b579c3ce3381688a92c718ffede1b/bcrypt-0.9.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-property-utils/1.16.0/a04ad250177b1f7dd7df632d25dd31ba267a849c/nifi-property-utils-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.mchange/c3p0/0.9.5.4/a21a1d37ae0b59efce99671544f51c34ed1e8def/c3p0-0.9.5.4.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.mchange/mchange-commons-java/0.2.15/6ef5abe5f1b94ac45b7b5bad42d871da4fda6bbc/mchange-commons-java-0.2.15.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/oauth2-oidc-sdk/9.7/a6125f3ea3649d590d3ff29b8e7975f7fa018271/oauth2-oidc-sdk-9.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.minidev/json-smart/2.4.7/8d7f4c1530c07c54930935f3da85f48b83b3c109/json-smart-2.4.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/commons-net/commons-net/3.6/b71de00508dcb078d2b24b5fa7e538636de9b3da/commons-net-3.6.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/2.3.3/48e3b9cfc10752fba3521d6511f4165bea951801/jakarta.xml.bind-api-2.3.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/1.2.2/99f53adba383cb1bf7c3862844488574b559621f/jakarta.activation-api-1.2.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore-nio/4.4.10/486f90c2af9bb81c51e8fb905647267053d5441/httpcore-nio-4.4.10.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.14/9dd1a631c082d92ecd4bd8fd4cf55026c720a8c1/httpcore-4.4.14.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.apache.nifi/nifi-h2-database/1.16.0/b8b8eb39641680d3f78406381b4e9ffce9f2270a/nifi-h2-database-1.16.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.springframework.security/spring-security-crypto/5.6.2/5269573116427e6a580f7c3eac8e6b687baff85f/spring-security-crypto-5.6.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/jakarta.annotation/jakarta.annotation-api/1.3.5/59eb84ee0d616332ff44aba065f3888cf002cd2d/jakarta.annotation-api-1.3.5.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/osgi-resource-locator/1.0.3/de3b21279df7e755e38275137539be5e2c80dd58/osgi-resource-locator-1.0.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.25.0-GA/442dc1f9fd520130bd18da938622f4f9b2e5fba3/javassist-3.25.0-GA.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jvnet.mimepull/mimepull/1.9.13/a4f12d0da986cae55dd5c4a735b4fefc700eb266/mimepull-1.9.13.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/at.favre.lib/bytes/1.3.0/49be3deb54a48744bbab869bc9b636c81d255d30/bytes-1.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.minidev/accessors-smart/2.4.7/3970cfc505e6657ca60f3aa57c849f6043000d7a/accessors-smart-2.4.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2.external/aopalliance-repackaged/2.6.1/b2eb0a83bcbb44cc5d25f8b18f23be116313a638/aopalliance-repackaged-2.6.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/annotations/2.17.106/6e6925a8c21575c2e19867ef88637cae3020caa5/annotations-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.java.dev.jna/jna-platform/5.6.0/d18424ffb8bbfd036d71bcaab9b546858f2ef986/jna-platform-5.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/4.8.1/dd36d61fbfa0a33c805e3d92f64e0832234c56c6/okhttp-4.8.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-api/1.42.1/4a7f734f57ad5b68e4ac591481eb562cdb3d2a94/grpc-api-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-context/1.42.1/c0cc9e5e08ced39792908aeda77e694bff39cea1/grpc-context-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-stub/1.42.1/6fa0c2fb4ff581c89b4aab2d47fb2b568503f630/grpc-stub-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-protobuf/1.42.1/374d43968ef44fdf7105ad304e3f859d7a17471b/grpc-protobuf-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-protobuf-lite/1.42.1/8119b67e3ff9f4d0def3054037d260c26c69adb8/grpc-protobuf-lite-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api/api-common/2.1.1/2eef95ab13b5bf7915408df2e3bc4c73736cd42c/api-common-2.1.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/javax.annotation/javax.annotation-api/1.3.2/934c04d3cfef185a8008e7bf34331b79730a9d43/javax.annotation-api-1.3.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.protobuf/protobuf-java/3.19.1/d6840043a0a9b1b62ec040a2e98b816b5cc944f/protobuf-java-3.19.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api.grpc/proto-google-common-protos/2.7.0/b89a09270e6681417e7f6bede09fc006de0d977f/proto-google-common-protos-2.7.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api/gax/2.7.1/113bee04813baeb2302de70f204aab69f3e7621a/gax-2.7.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.auth/google-auth-library-credentials/1.3.0/8e085f0a36301395052d1adc26befd4bc0b80d3e/google-auth-library-credentials-1.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api/gax-grpc/2.7.1/60fef9e181ccdd86d88c3885796024ed01a14b4c/gax-grpc-2.7.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.threeten/threetenbp/1.5.2/9aec3509609fc41f29ddc46119a124b8659e2c25/threetenbp-1.5.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.grpc/grpc-auth/1.42.1/130f19ed48f11a44ad4c188d77af4dfb4400ebe3/grpc-auth-1.42.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.api.grpc/proto-google-iam-v1/1.1.7/9e2d92d3109c14b0f1df68d5165fd9366f8a9f98/proto-google-iam-v1-1.1.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.auth/google-auth-library-oauth2-http/1.3.0/fb9d88528fe8061230d3a7cb1f2d0ab2423976ae/google-auth-library-oauth2-http-1.3.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.auto.value/auto-value-annotations/1.8.2/546ae662e646e47a544ef68ebb43987a3146b692/auto-value-annotations-1.8.2.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.http-client/google-http-client/1.40.1/23e18f41fe9280eee4a6c43790ae3e89ed4d2759/google-http-client-1.40.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.opencensus/opencensus-api/0.28.0/fc0d06a9d975a38c581dff59b99cf31db78bd99/opencensus-api-0.28.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.opencensus/opencensus-contrib-http-util/0.28.0/f6cb276330197d51dd65327fc305a3df7e622705/opencensus-contrib-http-util-0.28.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.http-client/google-http-client-gson/1.40.1/3c9ce115e5f9c19bd16585a281140fc8c95e5b1f/google-http-client-gson-1.40.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.google.code.gson/gson/2.8.9/8a432c1d6825781e21a02db2e2c33c5fde2833b9/gson-2.8.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm/9.1/a99500cf6eea30535eeac6be73899d048f8d12a8/asm-9.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.projectreactor/reactor-core/3.4.9/820332aa7b0fe3a8dfe14f58fc16e49ad178291/reactor-core-3.4.9.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.reactivestreams/reactive-streams/1.0.3/d9fb7a7926ffa635b3dcaa5049fb2bfa25b3e7d0/reactive-streams-1.0.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.awssdk/third-party-jackson-core/2.17.106/53c22138036062298a1a559b81293236d1fcae43/third-party-jackson-core-2.17.106.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/software.amazon.eventstream/eventstream/1.0.1/6ff8649dffc5190366ada897ba8525a836297784/eventstream-1.0.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/io.netty/netty-tcnative-boringssl-static/2.0.40.Final/6b73a163c13ed76921892d28eb81235f4b41e40a/netty-tcnative-boringssl-static-2.0.40.Final.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/net.java.dev.jna/jna/5.6.0/330f2244e9030119ab3030fc3fededc86713d9cc/jna-5.6.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio/2.7.0/1181a029fa94760ccf46f264bc06ca2e60262f8f/okio-jvm-2.7.0.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.3.72/8032138f12c0180bc4e51fe139d4c52b46db6109/kotlin-stdlib-1.3.72.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.fasterxml.woodstox/woodstox-core/6.2.7/86622cfd0a9933628b6b876d0c92589148d3b42e/woodstox-core-6.2.7.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.codehaus.woodstox/stax2-api/4.2.1/a3f7325c52240418c2ba257b103c3c550e140c83/stax2-api-4.2.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/nimbus-jose-jwt/9.9.3/b900868993d44beaf90aa9035442912b516fa34f/nimbus-jose-jwt-9.9.3.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.github.stephenc.jcip/jcip-annotations/1.0-1/ef31541dd28ae2cefdd17c7ebf352d93e9058c63/jcip-annotations-1.0-1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/content-type/2.1/66d618739859bc75ab9643b96a9839ac7802ec90/content-type-2.1.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/com.nimbusds/lang-tag/1.5/7e82e3c4c593f85addf4bd209abde4f8ff933a07/lang-tag-1.5.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.3.72/6ca8bee3d88957eaaaef077c41c908c9940492d8/kotlin-stdlib-common-1.3.72.jar:/Users/thida/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jarAppending source destination directory /Users/thida/ftp/gradle-project-demo/app/build/generated/sources/annotationProcessor/java/main to sourcepathManifest-Version1.0Implementation-VendorJUnitImplementation-TitleAutomatic-Module-NamejunitImplementation-Version4.13.2Implementation-Vendor-IdBuilt-BymarcBuild-Jdk1.6.0_65Created-ByApache Maven 3.1.1Implementation-URLhttp://junit.orgArchiver-VersionPlexus ArchiverAnt-VersionApache Ant 1.8.11.6.0_33-b03 (Sun Microsystems Inc.)hamcrest-corehamcrest.org1.3tomBuilt-Date2012-07-09 19:49:34java.basejava.lang.classfilejava.lang.classfile.attributejava.lang.classfile.componentsjava.lang.classfile.constantpooljava.lang.classfile.instructionjava.lang.runtimejava.nio.charset.spijava.security.interfacesjava.text.spijava.util.concurrent.atomicjava.util.concurrent.locksjava.util.jarjava.util.spijava.util.zipjavax.cryptojavax.crypto.interfacesjavax.crypto.specjavax.netjavax.net.ssljavax.security.auth.callbackjavax.security.auth.loginjavax.security.auth.spijavax.security.auth.x500javax.security.certcom.sun.crypto.providerjdk.crypto.cryptokicom.sun.security.ntlmjava.security.sasljava.desktopjava.loggingjava.managementjava.management.rmijava.namingjava.rmijdk.charsetsjdk.jartooljdk.jfrjdk.jlinkjdk.netjdk.sctpjdk.internal.eventjdk.incubator.vectorjdk.internal.lejdk.jshelljava.compilerjdk.compilerjdk.jdepsjdk.internal.jimagejdk.internal.jimage.decompressorjdk.internal.jmodjava.instrumentjdk.internal.loggerjava.net.httpjava.security.jgssjdk.attachjdk.internal.vm.cijdk.nio.mapmodejdk.unsupportedjdk.jpackagejdk.internal.org.objectweb.asmjdk.internal.org.objectweb.asm.commonsjdk.internal.org.objectweb.asm.treejdk.internal.org.objectweb.asm.utiljdk.internal.org.xml.saxjdk.internal.org.xml.sax.helpersjdk.internal.perfjdk.internal.jvmstatjdk.management.agentjdk.internal.platformjdk.managementjdk.naming.dnsjava.sql.rowsetjdk.dynalinkjava.prefsjava.smartcardiojdk.internal.util.xmljdk.internal.util.xml.implsun.netsun.net.dnssun.net.extsun.net.utiljdk.jconsolesun.net.wwwsun.net.www.protocol.httpsun.nio.cssun.nio.fssun.reflect.generics.reflectiveObjectssun.reflect.miscjava.datatransfersun.security.actionsun.security.internal.interfacessun.security.internal.specsun.security.jcasun.security.pkcssun.security.providerjdk.security.authsun.security.provider.certpathsun.security.rsasun.security.timestampsun.security.toolsjava.xml.cryptojdk.security.jgsssun.security.validatorsun.security.x509sun.util.cldrsun.util.locale.providerjdk.localedatasun.util.loggingsun.util.resourcesjava.lang.System$LoggerFinderjava.net.ContentHandlerFactoryjava.net.spi.InetAddressResolverProviderjava.net.spi.URLStreamHandlerProviderjava.nio.channels.spi.AsynchronousChannelProviderjava.nio.channels.spi.SelectorProviderjava.nio.charset.spi.CharsetProviderjava.nio.file.spi.FileSystemProviderjava.nio.file.spi.FileTypeDetectorjava.security.Providerjava.text.spi.BreakIteratorProviderjava.text.spi.CollatorProviderjava.text.spi.DateFormatProviderjava.text.spi.DateFormatSymbolsProviderjava.text.spi.DecimalFormatSymbolsProviderjava.text.spi.NumberFormatProviderjava.time.chrono.AbstractChronologyjava.time.chrono.Chronologyjava.time.zone.ZoneRulesProviderjava.util.spi.CalendarDataProviderjava.util.spi.CalendarNameProviderjava.util.spi.CurrencyNameProviderjava.util.spi.LocaleNameProviderjava.util.spi.ResourceBundleControlProviderjava.util.spi.ResourceBundleProviderjava.util.spi.TimeZoneNameProviderjava.util.spi.ToolProviderjavax.security.auth.spi.LoginModulejdk.internal.io.JdkConsoleProviderjdk.internal.logger.DefaultLoggerFindersun.text.spi.JavaTimeDateTimePatternProvidersun.util.locale.provider.LocaleDataMetaInfosun.util.resources.LocaleData$CommonResourceBundleProvidersun.util.resources.LocaleData$SupplementaryResourceBundleProvidersun.util.spi.CalendarProviderjdk.internal.jrtfs.JrtFileSystemProvidersun.util.logging.internal.LoggingProviderImpljava.transaction.xajava.xmljavax.sqljava.sql.Driverjavax.xmljavax.xml.catalogjavax.xml.datatypejavax.xml.namespacejavax.xml.parsersjavax.xml.streamjavax.xml.stream.eventsjavax.xml.stream.utiljavax.xml.transform.domjavax.xml.transform.saxjavax.xml.transform.staxjavax.xml.transform.streamjavax.xml.validationjavax.xml.xpathorg.w3c.domorg.w3c.dom.bootstraporg.w3c.dom.eventsorg.w3c.dom.lsorg.w3c.dom.rangesorg.w3c.dom.traversalorg.w3c.dom.viewsorg.xml.saxorg.xml.sax.extorg.xml.sax.helperscom.sun.org.apache.xml.internal.dtmcom.sun.org.apache.xml.internal.utilscom.sun.org.apache.xpath.internalcom.sun.org.apache.xpath.internal.compilercom.sun.org.apache.xpath.internal.functionscom.sun.org.apache.xpath.internal.objectscom.sun.org.apache.xpath.internal.resjavax.xml.datatype.DatatypeFactoryjavax.xml.parsers.DocumentBuilderFactoryjavax.xml.parsers.SAXParserFactoryjavax.xml.stream.XMLEventFactoryjavax.xml.stream.XMLInputFactoryjavax.xml.stream.XMLOutputFactoryjavax.xml.transform.TransformerFactoryjavax.xml.validation.SchemaFactoryjavax.xml.xpath.XPathFactoryorg.xml.sax.XMLReader                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              bD	 †  ÆÖÍ    